# ΘΕΜΑΤΑ ΕΞΕΤΑΣΕΩΝ ΠΙΣΤΟΠΟΙΗΣΗΣ ΑΡΧΙΚΗΣ ΕΠΑΓΓΕΛΜΑΤΙΚΗΣ ΚΑΤΑΡΤΙΣΗΣ ΕΙΔΙΚΟΤΗΤΑΣ Ι.Ε.Κ. "ΤΕΧΝΙΚΟΣ ΕΦΑΡΜΟΓΩΝ ΠΛΗΡΟΦΟΡΙΚΗΣ(ΠΟΛΥΜΕΣΑ/WEB DESIGNER - DEVELOPER/VIDEO GAMES)"

# 1.Εξετάσεις Πιστοποίησης Αρχικής Επαγγελματικής Κατάρτισης Αποφοίτων Ι.ΕΚ.

Οι εξετάσεις Πιστοποίησης Αρχικής Επαγγελματικής Κατάρτισης αποφοίτων Ινστιτούτων
Επαγγελματικής Κατάρτισης (Ι.Ε.Κ.) της ειδικότητας «ΤΕΧΝΙΚΟΣ ΕΦΑΡΜΟΓΩΝ
ΠΛΗΡΟΦΟΡΙΚΗΣ(ΠΟΛΥΜΕΣΑ/WEB DESIGNER-DEVELOPER/VIDEO GAMES)» διεξάγονται
σύμφωνα με τα οριζόμενα στις διατάξεις της αριθμ. 2944/2014 Κοινής Υπουργικής
Απόφασης Οικονομικών και Παιδείας και Θρησκευμάτων (Φ.Ε.Κ. Β΄ 1098/2014), όπως
τροποποιήθηκε και ισχύει, η οποία εκδόθηκε βάσει της διάταξης της παρ. 5, του άρθρου 25, του Ν.4186/2013 (Φ.Ε.Κ. Α΄ 193/2013), όπως τροποποιήθηκε με τη διάταξη της παρ. 1, του άρθρου
11, του Ν. 4229/ 2014 (Φ.Ε.Κ. Α΄ 8/2014) και ισχύει.

# 2. Διάρκεια του Πρακτικού Μέρους των εξετάσεων

Η διάρκεια εξέτασης του Πρακτικού Μέρους των εξετάσεων Πιστοποίησης Αρχικής Επαγγελματικής Κατάρτισης αποφοίτων Ινστιτούτων Επαγγελματικής Κατάρτισης (Ι.Ε.Κ.) της ειδικότητας 
ΤΕΧΝΙΚΟΣ ΕΦΑΡΜΟΓΩΝ ΠΛΗΡΟΦΟΡΙΚΗΣ(ΠΟΛΥΜΕΣΑ/WEB DESIGNER-DEVELOPER/VIDEO GAMES)» 
καθορίζεται σε τρεις (3) ώρες.

# 3.Θεωρητικό Μέρος: Θέματα Εξετάσεων Πιστοποίησης Αρχικής Επαγγελματικής Κατάρτισης Ειδικότητας Ι.Ε.Κ.

# ΟΜΑΔΑ Α. ΓΕΝΙΚΕΣ ΕΡΩΤΗΣΕΙΣ(224)
(if answers are correct add "✅")

## ✅1. Από ποια βασικά τμήματα αποτελείται ένας ηλεκτρονικός υπολογιστής; Να περιγράψετε συνοπτικά τις κύριες λειτουργίες του κάθε τμήματος.

- **Κεντρική Μονάδα Επεξεργασίας (CPU):** Εκτελεί εντολές και επεξεργάζεται δεδομένα.

- **Μνήμη RAM:** Αποθηκεύει προσωρινά δεδομένα και προγράμματα σε χρήση.

- **Μόνιμη Μνήμη (π.χ., σκληρός δίσκος ή SSD):** Αποθηκεύει δεδομένα και προγράμματα μόνιμα.

- **Μητρική Πλακέτα:** Συνδέει όλα τα εξαρτήματα του υπολογιστή.

- **Τροφοδοτικό:** Παρέχει ηλεκτρική ενέργεια σε όλα τα εξαρτήματα.

- **Κάρτα Γραφικών:** Επεξεργάζεται και εμφανίζει γραφικά στην οθόνη.

- **Συσκευές Εισόδου/Εξόδου:** Επιτρέπουν την αλληλεπίδραση με τον χρήστη (π.χ., πληκτρολόγιο, ποντίκι, οθόνη).

## ✅2. a)Ποιες είναι οι διαθέσιμες τεχνολογίες εκτυπωτών και σε ποια χρήση απευθύνεται η κάθε μία; b)Να αναφέρετε τα κριτήρια αξιολόγησης ενός εκτυπωτή.

a)
- **Inkjet (Ψεκασμού Μελανιού):** Ιδανικοί για οικιακή χρήση και μικρά γραφεία, κατάλληλοι για έγχρωμες εκτυπώσεις φωτογραφιών.

- **Laser:** Κατάλληλοι για γραφεία με μεγάλο όγκο ασπρόμαυρης εκτύπωσης, προσφέροντας ταχύτητα και οικονομία.

- **Thermal (Θερμικοί):** Χρησιμοποιούνται για εκτύπωση αποδείξεων και εισιτηρίων, λόγω ταχύτητας και απλότητας.

- **Dot Matrix (Μητρικοί):** Ιδανικοί για εκτύπωση φορμών πολλαπλής αντιγραφής σε βιομηχανικά περιβάλλοντα.

b)
- **Ποιότητα Εκτύπωσης:** Καθαρότητα κειμένου και εικόνας.
- **Ταχύτητα Εκτύπωσης:** Σελίδες ανά λεπτό (ppm).
- **Κόστος Αναλωσίμων:** Τιμή μελανιού/τόνερ και συχνότητα αντικατάστασης.
- **Συνδεσιμότητα:** USB, Wi-Fi, Ethernet.
- **Ευχρηστία:** Εύκολη εγκατάσταση και λειτουργία.
- **Ενεργειακή Απόδοση:** Κατανάλωση ενέργειας σε λειτουργία και αδράνεια.
- **Διαστάσεις και Σχεδίαση:** Συμβατότητα με διαθέσιμο χώρο και αισθητική.

## ✅3. a)Ποιες κατηγορίες αποθηκευτικών μέσων έχουμε; b)Σε ποια από αυτές ανήκουν οι σκληροί δίσκοι και σε ποια οι οπτικοί δίσκοι;

a)
- **Μαγνητικά Μέσα:**
   - Σκληροί Δίσκοι (HDD)

- **Οπτικά Μέσα:**
   - Οπτικοί Δίσκοι (CD, DVD, Blu-ray)

- **Ημιαγωγικά Μέσα:**
   - SSD (Στερεάς Κατάστασης)

b)
Οι **σκληροί δίσκοι** ανήκουν στα **μαγνητικά μέσα** και οι **οπτικοί δίσκοι** στα **οπτικά μέσα**.

## ✅4. Τι είναι οι σαρωτές (scanners) και τι τα προγράμματα OCR;

- **Σαρωτές (Scanners):** Συσκευές που μετατρέπουν φυσικά έγγραφα ή εικόνες σε ψηφιακή μορφή.
  
- **Προγράμματα OCR (Optical Character Recognition):** Λογισμικό που αναγνωρίζει και μετατρέπει το κείμενο σε ψηφιοποιημένα έγγραφα σε επεξεργάσιμη μορφή.

## ✅5. Τι είναι μια Άδεια Χρήσης λογισμικού και ποιο δικαίωμα παραχωρεί;

- **Άδεια Χρήσης Λογισμικού:** Συμφωνία που παραχωρεί στον χρήστη το δικαίωμα να χρησιμοποιεί το λογισμικό υπό συγκεκριμένους όρους.
  
- **Δικαίωμα που Παραχωρεί:** Επιτρέπει τη χρήση, την αντιγραφή ή την εγκατάσταση του λογισμικού, αλλά δεν μεταβιβάζει την ιδιοκτησία του.

## ✅6. Τί είναι η άρνηση υπηρεσίας DOS (Denial of Service) σαν μορφή επίθεσης σε ένα δίκτυο και με ποιους μηχανισμούς μπορεί ένα δίκτυο να προστατευτεί από τέτοιου είδους επιθέσεις;

- **Άρνηση Υπηρεσίας (DoS):** Επίθεση που στοχεύει να υπερφορτώσει ένα δίκτυο ή διακομιστή, κάνοντάς τον αδύνατο να προσφέρει υπηρεσίες.
  
- **Μηχανισμοί Προστασίας:** Χρήση firewall, φίλτρα κυκλοφορίας, παρακολούθηση δικτύου και υπηρεσίες anti-DoS.

## ✅7. Τι είναι οι Ιοί των υπολογιστών (virus) και σε ποιες κυρίες κατηγορίες μπορούν χωριστούν;

- **Ιοί Υπολογιστών:** Κακόβουλα προγράμματα που εισέρχονται σε συστήματα και μπορούν να προκαλέσουν βλάβες.
  
- **Κατηγορίες:**
  1. **Μακροϊοί**
  2. **Φάκελοι Ιοί**
  3. **Ρίζες Ιοί (Rootkits)**

## ✅8. Ποιος ο ρόλος των αρχών πιστοποίησης ψηφιακών πιστοποιητικών και ποια η διαδικασία έκδοσης ενός πιστοποιητικού για ένα ψηφιακό κατάστημα;

- **Ρόλος:** Εξασφαλίζει την αυθεντικότητα και την ακεραιότητα των ψηφιακών πιστοποιητικών.
  
- **Διαδικασία Έκδοσης Πιστοποιητικού:** Επιβεβαίωση ταυτότητας του αιτούντα, έλεγχος μέσω δημόσιου κλειδιού και έκδοση του πιστοποιητικού από την Αρχή Πιστοποίησης.

## ✅9. Ποια είδη διαμόρφωσης ενός σκληρού δίσκου γνωρίζετε, ποιο δίνει μεγαλύτερη ασφάλεια και γιατί χρειάζεται;

- **Είδη:**
  1. **Μονομερής (Single Partition)**
  2. **RAID (Redundant Array of Independent Disks)**

- **Μεγαλύτερη Ασφάλεια:** RAID 1 (Mirroring) και RAID 5 (Striping με Parity) παρέχουν αντίγραφα ασφαλείας και προστασία δεδομένων σε περίπτωση αποτυχίας δίσκου.

## ✅10. Τι χρειάζεται προκειμένου να κατασκευαστεί ένα στοιχειώδες σύστημα Η/Υ και με ποιο τρόπο επιτυγχάνεται η διασύνδεση μεταξύ των μονάδων του;

- **Απαιτούμενα Στοιχεία:** 
  1. Κεντρική Μονάδα Επεξεργασίας (CPU)
  2. Μνήμη (RAM, ROM)
  3. Αποθηκευτικά Μέσα (π.χ. σκληρός δίσκος)
  4. Συσκευές Εισόδου/Εξόδου (π.χ. πληκτρολόγιο, οθόνη)
  
- **Διασύνδεση Μονάδων:** Επικοινωνία μέσω **μπάσας δεδομένων (data bus)** και **διασύνδεσης I/O** (π.χ. USB, PCI).

## ✅11. Ποια είναι τα αρχεία που λαμβάνουν μέρος στη διαδικασία συγχώνευσης αλληλογραφίας, σε έναν επεξεργαστή κειμένου τύπου Word και ποιος ο ρόλος τους;

  - **Κύριο Έγγραφο (Main Document):** Περιέχει το κείμενο και το σχέδιο του εγγράφου.
  - **Πηγή Δεδομένων (Data Source):** Περιέχει τα δεδομένα (π.χ. ονόματα, διευθύνσεις).
  - **Σύνδεση (Merge Fields):** Αντικαθιστά τα πεδία στο κύριο έγγραφο με τα δεδομένα.

## ✅12. Αναφέρετε τις κατηγορίες των συναρτήσεων σε ένα λογιστικό φύλλο τύπου Excel και περιγράψτε τη χρήση της συνάρτησης If.

- **Κατηγορίες Συναρτήσεων:**
  1. **Μαθηματικές** (π.χ. SUM)
  2. **Στατιστικές** (π.χ. AVERAGE)
  3. **Λογικές** (π.χ. IF)
  
- **Συνάρτηση IF:** Ελέγχει αν μια συνθήκη είναι αληθής ή ψευδής και επιστρέφει διαφορετικά αποτελέσματα ανάλογα με την τιμή.

## ✅13. Ποιες επιλογές προβολής εγγράφων περιλαμβάνει ένας επεξεργαστής κειμένου, τύπου Word; Περιγράψτε τις.

- **Προβολές:**
  1. **Κανονική Προβολή:** Βασική προβολή επεξεργασίας.
  2. **Διάταξη Έγγραφου:** Προβολή του εγγράφου όπως θα εκτυπωθεί.
  3. **Προβολή Διαρθρώσεων:** Εμφανίζει τον τίτλο και την ιεραρχία.
  4. **Προβολή Σχεδίασης:** Για δημιουργία επαγγελματικών εγγράφων.

## ✅14. Ποιος ο σκοπός χρησιμοποίησης αναφορών στους τύπους ενός λογιστικού φύλλου, τύπου Excel; Πόσα και ποια είδη αναφορών τύπων υπάρχουν;

- **Σκοπός:** Αντιστοιχούν σε συγκεκριμένα κελιά για δυναμική αναφορά και υπολογισμούς.
  
- **Είδη Αναφορών:**
  1. **Αναφορές Κυττάρων (π.χ. A1)**
  2. **Αναφορές Περιοχών (π.χ. A1:B5)**
  3. **Αναφορές σε Άλλα Φύλλα**

## ✅15. Ποιες είναι οι κατηγορίες και τα βασικά χαρακτηριστικά των εκτυπωτών;

- **Κατηγορίες:**
  1. **Inkjet:** Ιδανικοί για έγχρωμες εκτυπώσεις φωτογραφιών.
  2. **Laser:** Ιδανικοί για ασπρόμαυρες εκτυπώσεις μεγάλης ποσότητας.
  
- **Χαρακτηριστικά:** Ταχύτητα, ποιότητα εκτύπωσης, κόστος αναλωσίμων, συνδεσιμότητα.

## ✅16. Τι ονομάζεται κώδικας ή σύνολο χαρακτήρων; Τι γνωρίζετε για τους κώδικες χαρακτήρων ASCII και Unicode; Από πόσα bit αποτελείται ο καθένας;

- **Κώδικας Χαρακτήρων:** Σύνολο κανόνων που αντιστοιχούν χαρακτήρες σε αριθμητικές τιμές.
  
- **ASCII:** Χρησιμοποιεί 7 bits και καλύπτει 128 χαρακτήρες.
  
- **Unicode:** Χρησιμοποιεί 16 bits ή περισσότερα και καλύπτει περισσότερους από 100.000 χαρακτήρες.

## ✅17. Ποιες βασικές λειτουργίες μπορούμε να εκτελέσουμε σ' ένα αρχείο;

- **Λειτουργίες:** Δημιουργία, άνοιγμα, αποθήκευση, επεξεργασία, διαγραφή.

## ✅18. Τι είναι τα δεδομένα και ποια η έννοια της πληροφορίας; Ποια είναι η διαφορά μεταξύ πληροφορίας και δεδομένων;

- **Δεδομένα:** Ακατέργαστες πληροφορίες (π.χ. αριθμοί, κείμενα).
  
- **Πληροφορία:** Επεξεργασμένα δεδομένα που έχουν νόημα και αξία.

## ✅19. Τι είναι η μνήμη RAM και ROM; Να αναφέρετε τις διαφορές τους.

- **RAM (Random Access Memory):** Μνήμη προσωρινής αποθήκευσης, ταχύτερη αλλά μη μόνιμη.
  
- **ROM (Read-Only Memory):** Μνήμη μόνο για ανάγνωση, μόνιμη και αποθηκεύει βασικές οδηγίες εκκίνησης.

## ✅20. Τι είναι η λανθάνουσα - κρυφή μνήμη cache; Πως λειτουργεί;

- **Λανθάνουσα Μνήμη (Cache):** Ταχύτερη μνήμη που χρησιμοποιείται για να αποθηκεύει συχνά χρησιμοποιούμενα δεδομένα.
  
- **Λειτουργία:** Βελτιώνει την ταχύτητα πρόσβασης στα δεδομένα.

## ✅21. Να μετατρέψετε τον δεκαδικό αριθμό 120 σε δυαδικό και οκταδικό αριθμό.

- **Δυαδικό:** 1111000
- **Οκταδικό:** 170

## ✅22. Στον υπολογιστή τι εργασία εκτελεί ο επεξεργαστής; Αναφέρετε μερικά είδη επεξεργαστών.

- **Ρόλος:** Εκτελεί εντολές προγραμμάτων και χειρίζεται δεδομένα.
  
- **Είδη Επεξεργαστών:** Intel, AMD, ARM.

## ✅23. Ποιες οι διαφορές μεταξύ ενός interpreter και ενός compiler;

- **Interpreter:** Μεταφράζει και εκτελεί τον κώδικα γραμμή προς γραμμή.
  
- **Compiler:** Μεταφράζει ολόκληρο το πρόγραμμα σε εκτελέσιμο αρχείο.

## ✅24. Ποιες είναι οι διαφορές ανάμεσα στην επαναληπτική εντολή "όσο….επανάλαβε" (while … do) και την επαναληπτική εντολή "αρχή_επανάληψης…μέχρις_ότου" (repeat…until);

- **While...Do:** Εκτελεί τον βρόχο όσο η συνθήκη είναι αληθής.
  
- **Repeat...Until:** Εκτελεί τον βρόχο τουλάχιστον μία φορά και συνεχίζει μέχρι η συνθήκη να γίνει αληθής.

## ✅25. Ποιους τρόπους γνωρίζετε για την αναπαράσταση ενός αλγορίθμου; Δώστε μία σύντομη περιγραφή για τον καθένα.

- **Περιγραφικός:** Λεκτική περιγραφή των βημάτων.
  
- **Διαγράμματα Ροής (Flowchart):** Οπτική αναπαράσταση των βημάτων.

- **Ψευδοκώδικας (Pseudocode):** Μείγμα φυσικής γλώσσας και προγραμματισμού.

## ✅26. Ποιες είναι οι διαφορές ανάμεσα στα συντακτικά και τα λογικά λάθη; Δώστε από ένα παράδειγμα στη γλώσσα προγραμματισμού C.

- **Συντακτικά Λάθη:** Λάθη στη σύνταξη του προγράμματος (π.χ. απουσία ερωτηματικού).
  
- **Λογικά Λάθη:** Λάθη στην εκτέλεση, παράγουν λάθος αποτελέσματα (π.χ. λάθος συνθήκη).

## ✅27. Tι εννοούμε με τους όρους LIFO (Last In First Out) και FIFO (First In First Out) και σε ποιες δομές δεδομένων βρίσκουν εφαρμογή;

- **LIFO (Last In First Out):** Η τελευταία είσοδος είναι η πρώτη που εξέρχεται (π.χ. Στοίβες).
  
- **FIFO (First In First Out):** Η πρώτη είσοδος είναι η πρώτη που εξέρχεται (π.χ. Ουρές).

## ✅28. Τι είναι οι στατικές και τι οι δυναμικές δομές δεδομένων; Ποιες οι διαφορές τους;

- **Στατικές Δομές:** Μνήμη καθορισμένη εκ των προτέρων (π.χ. πίνακες).
  
- **Δυναμικές Δομές:** Μνήμη που αποδεσμεύεται ή δεσμεύεται δυναμικά (π.χ. λίστες).

## ✅29. Να γραφεί πρόγραμμα σε C το οποίο θα δέχεται από το πληκτρολόγιο έναν ακέραιο. Εν συνεχεία θα υπολογίζει και θα εκτυπώνει το παραγοντικό αυτού του αριθμού. Για παράδειγμα με είσοδο 5 το πρόγραμμα θα υπολογίζει το 5! = 1 * 2 * 3 * 4 * 5 = 120 και θα εκτυπώνει στην οθόνη το 120.

```c
#include <stdio.h>

int main() {
    int num, i;
    long long fact = 1;
    
    printf("Δώσε έναν ακέραιο αριθμό: ");
    scanf("%d", &num);
    
    for(i = 1; i <= num; i++) {
        fact *= i;
    }
    
    printf("Το παραγοντικό του %d είναι: %lld\n", num, fact);
    
    return 0;
}
```
## ✅30. Αναφέρατε πέντε, από τους βασικούς τύπους δεδομένων (Data Types) της Pascal ή C. Να αναφέρετε τα όριά τους (κατά προσέγγιση και όπου αυτά υπάρχουν) καθώς και ένα παράδειγμα από τον κάθε τύπο.

- **int:** Ακέραιοι αριθμοί, όρια περίπου -2,147,483,648 έως 2,147,483,647.
- **float:** Πραγματικοί αριθμοί με κινητή υποδιαστολή, όρια περίπου ±3.4e-38 έως ±3.4e+38.
- **char:** Χαρακτήρες, όρια -128 έως 127.
- **double:** Διπλής ακρίβειας πραγματικοί αριθμοί, όρια περίπου ±1.7e-308 έως ±1.7e+308.
- **long:** Ακέραιοι αριθμοί μεγάλου εύρους, όρια περίπου -2^31 έως 2^31-1.

## ✅31. Τι ονομάζουμε recursion (αναδρομή); α) Να γραφεί αναδρομική συνάρτηση (σε C) με όνομα power που να δέχεται σαν παραμέτρους δυο ακέραιους αριθμούς (a και b) και να επιστρέφει το αποτέλεσμα ab.Ισχύει: ab = a * a * a * … * a (b φορές) π.χ. 35 = 3 * 3 * 3 * 3 * 3 (5 φορές) b)Περιγράψτε σχηματικά πως δουλεύει για α=3 και β=5
- Η αναδρομή (recursion) είναι μια τεχνική προγραμματισμού όπου μια συνάρτηση καλεί τον εαυτό της για να λύσει μικρότερα υποπροβλήματα, 
έως ότου φτάσει σε μια βασική περίπτωση που σταματά την κλήση.

a)
```c
#include <stdio.h>

int power(int a, int b) {
    if (b == 0) return 1;
    return a * power(a, b - 1);
}

int main() {
    int a, b;
    printf("Δώσε δύο ακέραιους αριθμούς (a και b): ");
    scanf("%d %d", &a, &b);
    printf("Το αποτέλεσμα είναι: %d\n", power(a, b));
    return 0;
}

b) 
power(3, 5) → 3 * power(3, 4)
power(3, 4) → 3 * power(3, 3)
power(3, 3) → 3 * power(3, 2)
power(3, 2) → 3 * power(3, 1)
power(3, 1) → 3 * power(3, 0)
power(3, 0) → 1
```

## ✅32. Να γραφεί αλγόριθμος ο οποίος να διαβάζει τα ονόματα 10 πωλητών μιας εταιρείας και να τα αποθηκεύει σε ένα πίνακα Α, και τις αντίστοιχες πωλήσεις αυτών των πωλητών το 2005 και να τις αποθηκεύει σε ένα πίνακα Β. Ο αλγόριθμος πρέπει να εκτυπώνει: 
α) Το μέσο όρο των πωλήσεων όλων των πωλητών.
β) Το όνομα του πωλητή με τις μέγιστες πωλήσεις.
γ) Το όνομα του πωλητή με τις μικρότερες πωλήσεις.
```c
#include <stdio.h>
#include <string.h>

int main() {
    char vendors[10][50];
    float sales[10], totalSales = 0;
    int i, maxIndex = 0, minIndex = 0;
    
    for(i = 0; i < 10; i++) {
        printf("Δώσε όνομα πωλητή %d: ", i+1);
        scanf("%s", vendors[i]);
        printf("Δώσε πωλήσεις του %s το 2005: ", vendors[i]);
        scanf("%f", &sales[i]);
        totalSales += sales[i];
        
        if(sales[i] > sales[maxIndex]) maxIndex = i;
        if(sales[i] < sales[minIndex]) minIndex = i;
    }

    printf("Μέσος όρος πωλήσεων: %.2f\n", totalSales / 10);
    printf("Πωλητής με τις μέγιστες πωλήσεις: %s\n", vendors[maxIndex]);
    printf("Πωλητής με τις μικρότερες πωλήσεις: %s\n", vendors[minIndex]);
    
    return 0;
}
```
## ✅33. A.Εξηγήστε σύντομα τι κάνει το ακόλουθο πρόγραμμα: 
```c
 #include <stdio.h> 
 #include <math.h> 
 int main() { 
 int n; 
for (n=50;n!=60;n++) 
printf(""%d \t %f \n"",n,log(n)); 
return 0; 
}
```
Το πρόγραμμα εκτυπώνει τον λογάριθμο του αριθμού `n` για τις τιμές `n` από 50 έως 59.

### B. Αν στην for αντικαταστήσουμε τον αριθμό 60 με τον αριθμό 40 τι θα συμβεί;
Το πρόγραμμα θα εκτυπώσει λογάριθμους για τις τιμές από 50 έως 39, δηλαδή οι τιμές `n` θα είναι από 50 ως 40.


## ✅34. Στον ακόλουθο κώδικα τι θα εκτυπώσει η printf αν δώσουμε από το πληκτρολόγιο τις τιμές: –3 και 7 όταν μας ζητηθεί να εισάγουμε τιμές; 
```c
#include <stdio.h>
#include <math.h>
int main() {
    int n = -3, i, k;
    float x = 3., y;
    
    printf("Dwse times: ");
    scanf("%d%f", &i, &y);
    
    k = 3 / 5;
    x = ++n;
    x *= i;
    n = --k;
    y = n % i;
    
    printf("%d\t%d\t%d\t%f\t%f\n", n, i, k, x, y);
    
    return 0;
}

```
- Ο κώδικας θα εκτυπώσει το εξής:
[-1	-3	-1	6.000000	-1.000000]

## ✅35. Να γραφεί πρόγραμμα που να δέχεται ένα διψήφιο ακέραιο αριθμό, και να επιστρέφει τον αριθμό ανεστραμμένο καθώς και το άθροισμα των ψηφίων του αριθμού (αν π.χ. ο χρήστης δώσει τον αριθμό 53, το πρόγραμμα πρέπει να επιστρέψει 35 και 8).  Σημείωση: το πρόγραμμα πρέπει να ελέγχει αν ο αριθμός είναι διψήφιος και για την περίπτωση που δεν είναι να βγάζει μήνυμα λάθους.
```c
#include <stdio.h>

int main() {
    int num, tens, ones, sum;

    printf("Δώσε έναν διψήφιο αριθμό: ");
    scanf("%d", &num);
    
    if (num < 10 || num > 99) {
        printf("Ο αριθμός δεν είναι διψήφιος.\n");
        return 1;
    }

    tens = num / 10;
    ones = num % 10;
    sum = tens + ones;

    printf("Ανεστραμμένος αριθμός: %d\n", ones * 10 + tens);
    printf("Άθροισμα ψηφίων: %d\n", sum);

    return 0;
}
```

## ✅36. Να γραφεί σε C η διαδικασία της γρήγορης ταξινόμησης (quick sort).
```c
#include <stdio.h>

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = low - 1;
        
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        quickSort(arr, low, i);
        quickSort(arr, i + 2, high);
    }
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    quickSort(arr, 0, n - 1);
    
    printf("Ταξινομημένος πίνακας: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    return 0;
}
```

## ✅37. Να ταξινομήσετε τον παρακάτω πίνακα με τις τεχνικές selection sort και bubble sort, περιγράφοντας αναλυτικά το κάθε βήμα της ταξινόμησης. 6 7 9 3 5 8
- Selection Sort:
1. Βρίσκουμε το μικρότερο στοιχείο και το τοποθετούμε στην πρώτη θέση.
2. Επαναλαμβάνουμε για το υπόλοιπο της λίστας.
[6, 7, 9, 3, 5, 8] → [3, 7, 9, 6, 5, 8]
[3, 7, 9, 6, 5, 8] → [3, 5, 9, 6, 7, 8]
[3, 5, 9, 6, 7, 8] → [3, 5, 6, 9, 7, 8]
[3, 5, 6, 9, 7, 8] → [3, 5, 6, 7, 9, 8]
[3, 5, 6, 7, 9, 8] → [3, 5, 6, 7, 8, 9]
  
- Bubble Sort:
1. Συγκρίνουμε κάθε ζευγάρι γειτονικών στοιχείων και τα ανταλλάσσουμε αν είναι σε λάθος σειρά.
2. Επαναλαμβάνουμε για όλα τα στοιχεία.
[6, 7, 9, 3, 5, 8] → [6, 7, 3, 5, 8, 9]
[6, 7, 3, 5, 8, 9] → [6, 3, 5, 7, 8, 9]
[6, 3, 5, 7, 8, 9] → [3, 5, 6, 7, 8, 9]

## ✅38. Να γραφεί πρόγραμμα σε C που να αποθηκεύει ακέραιους αριθμούς από το πληκτρολόγιο σε έναν πίνακα διαστάσεων 5x5 και κατόπιν να εκτυπώνει: 
α). όλα τα στοιχεία του πίνακα 
β). όλα τα στοιχεία της κύριας διαγωνίου του πίνακα 
γ). όλα τα στοιχεία της αναστροφής διαγωνίου του πίνακα.
```c
#include <stdio.h>

int main() {
    int arr[5][5], i, j;
    // Είσοδος πίνακα
    printf("Δώστε 25 ακέραιους αριθμούς για τον πίνακα 5x5:\n");
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            scanf("%d", &arr[i][j]);
        }
    }
    // Εκτύπωση όλων των στοιχείων
    printf("Όλα τα στοιχεία του πίνακα:\n");
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
    // Κύρια διαγώνιος
    printf("Κύρια διαγώνιος:\n");
    for (i = 0; i < 5; i++) {
        printf("%d ", arr[i][i]);
    }
    printf("\n");
    // Αναστροφή διαγώνιος
    printf("Αναστροφή διαγώνιος:\n");
    for (i = 0; i < 5; i++) {
        printf("%d ", arr[i][4 - i]);
    }
    printf("\n");
    return 0;
}
```

## ✅39. Τι εννοούμε με τους όρους "Αλγόριθμος" και "Πρόγραμμα";

- **Αλγόριθμος**: Σειρά από σαφείς οδηγίες για επίλυση προβλήματος.
- **Πρόγραμμα**: Σειρά εντολών σε γλώσσα προγραμματισμού που εκτελεί αλγόριθμο.

## ✅40. Τι ονομάζουμε δομή δεδομένων;
- Οργανωμένη συλλογή δεδομένων για αποτελεσματική αποθήκευση και επεξεργασία.

## ✅41. Σε ποιες κατηγορίες διακρίνονται τα προβλήματα με κριτήριο το είδος επίλυσης τους;
- Αναδρομικά προβλήματα, Δυναμική προγραμματισμός, Προβλήματα ταξινόμησης, Προβλήματα αναζήτησης.

## ✅42. Ποιες είναι οι βασικές λειτουργίες (ή πράξεις) επί των δομών δεδομένων;
- Εισαγωγή, Διαγραφή, Αναζήτηση, Ενημέρωση.

## ✅43. Τι εννοούμε με τον όρο "πρόβλημα" και σε τι αναφερόμαστε με τον όρο "Ανάλυση Προβλήματος";
- **Πρόβλημα**: Κατάσταση που απαιτεί λύση.
- **Ανάλυση Προβλήματος**: Η διαδικασία κατανόησης, ανάλυσης και καθορισμού των απαιτούμενων λύσεων για το πρόβλημα.

## ✅44. Να αναφέρετε τις πιο συνηθισμένες τεχνικές σχεδίασης αλγορίθμων.
- Αναδρομή, Δυναμικός προγραμματισμός, Διαίρει και βασίλευε, Greedy.

## ✅45. Ποια είναι τα χαρακτηριστικά ενός αλγορίθμου;
- Ακρίβεια, περιοδικότητα, καταληκτικότητα, αποτελεσματικότητα.

## ✅46. Με ποιους τρόπους πραγματοποιείται η περιγραφή ενός αλγορίθμου;
- Γλωσσικά, Διαγράμματα ροής, Ψευδοκώδικας, Κώδικας.

## ✅47. Ποια είναι τα χαρακτηριστικά που είναι απαραίτητα προκειμένου να θεωρήσουμε έναν αλγόριθμο πλήρη;
- Καταληκτικότητα, σαφήνεια, αποτελεσματικότητα.

## ✅48. Να αναφέρετε πόσα είναι τα είδη της δομής επιλογής.
- 1. Απλή επιλογή
- 2. Επιλογή με εναλλακτική
- 3. Πολυπληθής επιλογή

## ✅49. Να αναφέρετε πόσα είναι τα είδη της δομής επανάληψης.
- 1. Επανάληψη με τον έλεγχο στο τέλος (do-while)
- 2. Επανάληψη με τον έλεγχο στην αρχή (while, for)

## ✅50. Στη δομή δεδομένων τι είναι η στοίβα; Δώστε ένα παράδειγμα.
- **Στοίβα**: Δομή δεδομένων LIFO. Παράδειγμα: Αναδρομικές κλήσεις.

## ✅51. Να αναφέρετε τα είδη της αναζήτησης και της ταξινόμησης των στοιχείων ενός πίνακα.
- **Αναζήτηση**: Γραμμική, Δυαδική.
- **Ταξινόμηση**: Φυσαλίδας, Επιλογής, Γρήγορη, Μειξης.

## ✅52. Tι είναι RAM και πώς είναι δομημένη;
- **RAM**: Μνήμη προσωρινής αποθήκευσης που επιτρέπει γρήγορη ανάγνωση και εγγραφή. Οργανώνεται σε κύτταρα με διευθύνσεις.

## ✅53. Πόσα είδη καταχωρητών υπάρχουν; Να αναφερθούν τουλάχιστον τρεις χαρακτηριστικοί καταχωρητές γενικής χρήσης.
- Είδη: Καταχωρητές δεδομένων, διευθύνσεων, γενικής χρήσης.

## ✅54. Τι είναι το bit, το byte και το word; Τι αναπαριστά το καθένα; Πως συνδέονται μεταξύ τους;
- **Bit**: Μικρότερη μονάδα πληροφορίας, μπορεί να είναι 0 ή 1.
- **Byte**: 8 bits.
- **Word**: 16, 32, 64 bits.
- Σχέση: 1 Byte = 8 bits.

## ✅55. Να αναφέρετε τρία διαφορετικά είδη διευθυνσιοδότησης και δώστε σύντομα παραδείγματα.
- Άμεση, Έμμεση, Διευθυνσιοδότηση με βάση.

## ✅56. Από τι εξαρτάται η τεχνική διαχείρισης της μνήμης ενός υπολογιστή;
- Από την αρχιτεκτονική του συστήματος και το λειτουργικό σύστημα.

## ✅57. Από τι εξαρτάται το μέγεθος της μνήμης που μπορεί να χρησιμοποιήσει ένας υπολογιστής;
- Από την **αρχιτεκτονική** (32-bit ή 64-bit), το **λειτουργικό σύστημα** και τη **διαμόρφωση του υπολογιστή**.

## ✅58. Εξηγήστε γιατί αυξάνοντας την κεντρική μνήμη, κατά κανόνα, επιταχύνουμε τη λειτουργία του υπολογιστικού συστήματος.
- Μειώνει τη χρήση εξωτερικών αποθηκευτικών μέσων, επιταχύνοντας τη λειτουργία.

## ✅59. Να αναφερθούν περιληπτικά, ποια είναι τα κύρια μέρη από τα οποία αποτελείται ένας μικροεπεξεργαστής.
- ALU, Μονάδα ελέγχου, Καταχωρητές, Μνήμη Cache.

## ✅60. Το ψηφίο ισοτιμίας τι είδους πληροφορία δίνει και τι είδη ισοτιμίας έχουμε;
- **Ψηφίο ισοτιμίας**: Ελέγχει λάθη.
- Είδη: Ζυγό, Άρτιο.

## ✅61. Ποια είδη διαμόρφωσης ενός σκληρού δίσκου γνωρίζετε και ποιο δίνει μεγαλύτερη ασφάλεια;

- **RAID 0**: Χωρίς ασφάλεια, αυξάνει την ταχύτητα.
- **RAID 1**: Αντιγραφή (mirroring), υψηλή ασφάλεια.
- **RAID 5**: Αντιγραφή και κατανομή, καλός συνδυασμός ταχύτητας και ασφάλειας.

## ✅62. Τι είναι τα Ι/0 bus, το interrupt; και τί ο Controller;

- **I/O bus**: Δίαυλος για επικοινωνία μεταξύ υπολογιστή και περιφερειακών συσκευών.
- **Interrupt**: Σήμα που σταματά τη διαδικασία του επεξεργαστή για να εξυπηρετήσει μια εξωτερική ενέργεια.
- **Controller**: Συσκευή που ελέγχει τη μεταφορά δεδομένων μεταξύ του υπολογιστή και των περιφερειακών συσκευών.

## ✅63. Τι είναι το ρολόι του υπολογιστή και σε τι χρησιμεύει;

- **Ρολόι**: Παράγει περιοδικά σήματα που συγχρονίζουν τη λειτουργία των εξαρτημάτων του υπολογιστή.

## ✅64. Να αναφέρετε δύο διαφορετικούς τρόπους εισαγωγής στοιχείων από το πληκτρολόγιο (Με έλεγχο του περιεχομένου και χωρίς έλεγχο) σε γλώσσα assembly.

- **Με έλεγχο**: Χρήση εντολής `IN` με έλεγχο.
- **Χωρίς έλεγχο**: Απευθείας είσοδος μέσω της εντολής `GETC`.

## ✅65. Να αναφέρετε δύο διαφορετικούς τρόπους απεικόνισης στοιχείων στην οθόνη με assembly.

- **Χρήση εντολής `OUT`** για έξοδο χαρακτήρων.
- **Χρήση διαγράμματος γραφικών** για εμφάνιση δεδομένων.

## ✅66. Τί είναι ένας κατάλογος, ποια στοιχεία γνωρίζετε για αυτόν και ποιες οι υποστηριζόμενες λειτουργίες του;

- **Κατάλογος**: Οργάνωση αρχείων με όνομα και θέση αποθήκευσης.
- Στοιχεία: Όνομα αρχείου, μέγεθος, ημερομηνία δημιουργίας.
- Λειτουργίες: Δημιουργία, Διαγραφή, Ενημέρωση.

## ✅67. Τι είναι Διαδοχική οργάνωση αρχείων (sequential) και τι Άμεση οργάνωση αρχείων;

- **Διαδοχική οργάνωση**: Τα αρχεία αποθηκεύονται σειριακά.
- **Άμεση οργάνωση**: Τα αρχεία αποθηκεύονται με βάση έναν υπολογισμένο δείκτη.

## ✅68. Τι είναι τo αρχείο system.ini των windows;

- **System.ini**: Αρχείο ρυθμίσεων του συστήματος που περιέχει παραμέτρους για τη ρύθμιση συσκευών και εφαρμογών.

## ✅69. Ποια είναι τα δομικά μέρη του UNIX;

- **Πυρήνας (Kernel)**, **Συστήματα Αρχείων**, **Διαδικασίες**, **Χειρισμός Συσκευών**.

## ✅70. Τι είναι το FAT και τι το NTFS σύστημα διαχείρισης αρχείων στο δίσκο;

- **FAT**: Παλιό σύστημα διαχείρισης αρχείων, λιγότερο αποδοτικό.
- **NTFS**: Νέο σύστημα, υποστηρίζει καλύτερη ασφάλεια, μεγάλες ποσότητες δεδομένων και αποδοτικότητα.

## ✅71. Τί είναι ανάκτηση πληροφοριών και πόσα είδη υπάρχουν;

- **Ανάκτηση πληροφοριών**: Διαδικασία ανεύρεσης και εξαγωγής δεδομένων από βάσεις δεδομένων.
- Είδη: **Ανάκτηση βάσει περιεχομένου**, **Ανάκτηση βάσει λέξεων-κλειδιών**.

## ✅72. Τι είναι ένα κατακερματισμένο αρχείο και τι δεικτοδοτούμενο; Αναφέρατε τι γίνεται με τις εγγραφές των αρχείων σε κάθε μία από τις παραπάνω κατηγορίες.

- **Κατακερματισμένο**: Τα δεδομένα είναι κατακερματισμένα σε διάφορες θέσεις του δίσκου.
- **Δεικτοδοτούμενο**: Τα δεδομένα αποθηκεύονται με δείκτες για άμεση αναζήτηση.

## ✅73. Πρέπει να ανακτήσετε το αρχείο mad.ben, σε ένα υπολογιστή με Λ/Σ Linux. Έχει κρατηθεί αντίγραφο ασφαλείας του στο αρχείο Βackup.tar. Με τη χρήση ποιάς/ποιών εντολής/ών θα το κάνετε;

- Χρησιμοποιήστε την εντολή: `tar -xvf Backup.tar mad.ben`.

## ✅74. Ποίος είναι ο πιο εύκολος τρόπος να εισάγετε μία λίστα εντολών από τη γραμμή εντολών στα Linux;

- Χρησιμοποιήστε το σύστημα ιστορικού εντολών με το `history` ή το αρχείο `.bashrc`.

## ✅75. Τί είναι το partial backup στα Linux;

- **Partial backup**: Αντίγραφο ασφαλείας μέρους του συστήματος ή συγκεκριμένων αρχείων, όχι ολόκληρου του συστήματος.

## ✅76. Πόσα μέρη (partitions) χρειάζεται για να εγκαταστήσετε τα Linux; Ποια θα είναι αυτά και τί θα εγκατασταθεί στο κάθε ένα από αυτά;

- Χρειάζονται τουλάχιστον δύο partitions:
  1. **Root (/)**: Εγκατάσταση του λειτουργικού συστήματος.
  2. **Swap**: Εικονική μνήμη (προαιρετικό, για καλύτερη απόδοση).

## ✅77. Τι σημαίνει παροχέτευση (spooling) και ποια τα πλεονεκτήματα αυτής της τεχνικής στα Λειτουργικά Συστήματα;

- **Spooling**: Αποθήκευση δεδομένων για αργότερη επεξεργασία.
- Πλεονεκτήματα: Καλύτερη διαχείριση πόρων και αποδοτικότερη εκτύπωση/εκτέλεση εργασιών.

## ✅78. Αναφέρετε τί γνωρίζετε για την προστασία φακέλων σε σύστημα UNIX. Πόσες κατηγορίες χρηστών υπάρχουν, πόσα ψηφία λαμβάνει κάθε πεδίο και τι σημαίνει το κάθε ψηφίο ανάλογα με την τιμή που λαμβάνει;

- **Κατηγορίες χρηστών**: Ιδιοκτήτης, Ομάδα, Άλλοι.
- **Ψηφία**: 3 ψηφία (rwx) για κάθε κατηγορία, όπου r=4, w=2, x=1.

## ✅79. Μια εκτεταμένη λίστα πληροφοριών αρχείων - καταλόγων θα άρχιζε από drwxrwxrwx με πιθανότητα παύλας σε μερικούς από τους παραπάνω χαρακτήρες. Αναλύστε τι σημαίνουν.

- **d**: Κατάλογος, **rwx**: Δικαιώματα ανάγνωσης, εγγραφής και εκτέλεσης για ιδιοκτήτη, ομάδα, άλλους.

## ✅80. Ποιο ρόλο επιτελεί το Λειτουργικό Σύστημα σε έναν υπολογιστή; Τι θα γινόταν αν δεν υπήρχε αυτό;

- **Ρόλος**: Διαχείριση πόρων και επικοινωνία μεταξύ υλικού και λογισμικού.
- Χωρίς Λ/Σ: Δεν θα μπορούσε να υπάρξει εκτέλεση προγραμμάτων.

## ✅81. Να αναφέρετε ονομαστικά τα κυριότερα μέρη ενός Λειτουργικού Συστήματος (ΛΣ).Τι γνωρίζετε για τον πυρήνα και το ρόλο του σε ένα ΛΣ;

- **Μέρη**: Πυρήνας, Διοίκηση αρχείων, Διαχείριση πόρων.
- **Πυρήνας**: Ο κύριος συντονιστής των πόρων του υπολογιστή.

## ✅82. Αναλύστε τι είναι το FTP, τι το HTTP και ποια η χρήση τους στο Διαδίκτυο.

- **FTP**: Πρωτόκολλο μεταφοράς αρχείων.
- **HTTP**: Πρωτόκολλο για μεταφορά ιστοσελίδων.

## ✅83. Να δώσετε τους ορισμούς για τα τρία είδη επικοινωνίας: απλή (simplex), αμφίδρομη μη ταυτόχρονη (half duplex) και αμφίδρομη ταυτόχρονη (full duplex). Ποιες είναι οι ομοιότητες και ποιες οι διαφορές τους;

- **Simplex**: Μόνο μια κατεύθυνση.
- **Half Duplex**: Δύο κατευθύνσεις, αλλά όχι ταυτόχρονα.
- **Full Duplex**: Δύο κατευθύνσεις ταυτόχρονα.

## ✅84. Να εξηγήσετε πώς λειτουργούν οι υπηρεσίες με σύνδεση (connection oriented services) και πώς οι υπηρεσίες χωρίς σύνδεση (connectionless services). Να δώσετε από ένα αντιπροσωπευτικό παράδειγμα για τον κάθε τύπο υπηρεσίας.

- **Με σύνδεση**: Σταθερή σύνδεση πριν τη μεταφορά (π.χ., TCP).
- **Χωρίς σύνδεση**: Δε χρειάζεται σύνδεση (π.χ., UDP).

## ✅85. Να δώσετε ορισμό της έννοιας "μεταγωγή πακέτου". Να περιγράψετε τις 2 μεθόδους προώθησης πακέτων.

- **Μεταγωγή πακέτου**: Διαχωρισμός δεδομένων σε μικρότερα πακέτα για αποστολή.
- **Μέθοδοι**: **Διαδρομή μέσω πίνακα δρομολόγησης** και **Δρομολόγηση μέσω σημείων αναγνώρισης**.

## ✅86. Τι είναι η τεχνική Frame Relay και ποιες ανάγκες καλύπτει;

- **Frame Relay**: Τεχνική μετάδοσης δεδομένων σε υψηλές ταχύτητες με ελάχιστο έλεγχο.
- Καλύπτει ανάγκες επικοινωνίας δεδομένων σε WAN.

## ✅87. Τι ονομάζουμε επικοινωνία δεδομένων;

- **Επικοινωνία δεδομένων**: Η ανταλλαγή δεδομένων μεταξύ συσκευών μέσω δικτύου.

## ✅88. Ποια είναι τα κύρια στοιχεία μετάδοσης των δεδομένων;

- **Μετάδοση**: Σήματα, Καλώδια, Πρωτόκολλα.

## ✅89. Ποιους βασικούς τύπους καλωδίων συνεστραμμένων ζευγών γνωρίζετε και ποιες είναι οι διαφορές τους;

- **STP (Shielded Twisted Pair)**: Με προστασία από παρεμβολές.
- **UTP (Unshielded Twisted Pair)**: Χωρίς προστασία από παρεμβολές.

## ✅90. Ποιες είναι οι βασικές αιτίες θορύβου στην επικοινωνία δεδομένων;

- **Αιτίες**: Παρεμβολές, Θερμικός θόρυβος, Ηλεκτρομαγνητικά πεδία.

## ✅91. Να αναφέρετε τα Αναλογικά Σήματα με τα χαρακτηριστικά τους.

- **Αναλογικά σήματα**: Συνεχείς μεταβολές, αναπαριστούν φυσικές ποσότητες.

## ✅92. Να αναφέρετε τα Ψηφιακά Σήματα με τα χαρακτηριστικά τους.

- **Ψηφιακά σήματα**: Διακριτές τιμές, αναπαριστούν δεδομένα σε μορφή bits.

## ✅93. Σε ποια περίπτωση απαιτείται η μετατροπή του ψηφιακού σήματος σε αναλογικό και το αντίστροφο;

- **Ψηφιακό σε αναλογικό**: Όταν το σήμα μεταδίδεται σε αναλογικό κανάλι.
- **Αναλογικό σε ψηφιακό**: Όταν απαιτείται επεξεργασία από υπολογιστή.

## ✅94. Ποιες είναι οι βασικές διαφορές σύγχρονης και ασύγχρονης μετάδοσης δεδομένων;

- **Σύγχρονη**: Σταθερός ρυθμός μετάδοσης.
- **Ασύγχρονη**: Αστάθμητος ρυθμός μετάδοσης.

## ✅95. Ποιες είναι οι διαφορές μεταγωγής μηνύματος και μεταγωγής πακέτων;

- **Μηνύματα**: Ολόκληρο το μήνυμα μεταφέρεται.
- **Πακέτα**: Τα δεδομένα χωρίζονται σε μικρότερα πακέτα για αποστολή.

## ✅96. Πώς ανταλλάσσουν τα δεδομένα ένας πομπός και ένας δέκτης, σε συνάρτηση με το χρόνο; Δώστε ένα παράδειγμα.

- **Ανταλλαγή**: Πομπός στέλνει δεδομένα και δέκτης τα λαμβάνει σε καθορισμένο χρόνο.
- Παράδειγμα: Επικοινωνία μέσω σειριακής θύρας.

## ✅97. Ποια ετικέτα θα χρησιμοποιήσω για να κάνω τη λέξη Επικοινωνία σύνδεσμο για την αποστολή μηνυμάτων μέσω ηλεκτρονικού ταχυδρομείου στην ηλεκτρονική διεύθυνση webmaster@test.gr ;

- `<a href="mailto:webmaster@test.gr">Επικοινωνία</a>`

## ✅98. Τι θα εμφανίσει ο παρακάτω κώδικας:
<HTML> 
<HEAD> 
<TITLE> Άσκηση </TITLE> 
<SCRIPT LANGUAGE="JavaScript"> window.alert ("Αυτό είναι το μήνυμα 1");

Ο κώδικας αυτός θα εμφανίσει ένα παράθυρο ειδοποίησης (alert) με το μήνυμα "Αυτό είναι το μήνυμα 1" όταν φορτωθεί η σελίδα. 
Το παράθυρο αυτό θα εμφανιστεί πριν από την εμφάνιση του τίτλου της σελίδας "Άσκηση 98" στο σώμα της.

## ✅99. Πώς εισάγουμε γραφικά με την HTML; Πρέπει το "αρχείο γραφικού" να βρίσκεται στο ίδιο σύστημα ή μπορεί να είναι εξωτερικό; Τι επιτυγχάνουν οι παράμετροι ALIGN, HEIGHT, WIDTH, CAPTION;

- Χρησιμοποιούμε την ετικέτα `<img>` για να εισάγουμε γραφικά.
- Το "αρχείο γραφικού" μπορεί να είναι είτε τοπικό είτε εξωτερικό.
- Οι παράμετροι:
  - `ALIGN`: Ορίζει την ευθυγράμμιση της εικόνας.
  - `HEIGHT`: Καθορίζει το ύψος της εικόνας.
  - `WIDTH`: Καθορίζει το πλάτος της εικόνας.
  - `CAPTION`: Ορίζει τον τίτλο του πίνακα (προαιρετικό για πίνακες).

## ✅100. Με ποιος τρόπους μπορούμε να εισάγουμε κείμενο σε μια ιστοσελίδα; (Αναφέρατε τουλάχιστον δύο τρόπους).

1. Χρησιμοποιώντας τις ετικέτες κειμένου HTML, όπως `<p>`, `<h1>`, `<span>`.
2. Εισάγοντας εξωτερικά αρχεία κειμένου μέσω της ετικέτας `<object>` ή `<iframe>`.

## ✅101. Εξηγήστε τι λειτουργίες εκτελούν οι παρακάτω HTML εντολές/παράμετροι (όταν αναφέρονται σε HTML πίνακες) <CAPTION>, <TH>, COLSPAN, ROWSPAN, ALIGN, VALIGN.

- **`<CAPTION>`:** Προσθέτει έναν τίτλο στον πίνακα.
- **`<TH>`:** Ορίζει κελί επικεφαλίδας (με bold και κεντραρισμένο κείμενο).
- **`COLSPAN`:** Επιτρέπει σε ένα κελί να καταλαμβάνει πολλές στήλες.
- **`ROWSPAN`:** Επιτρέπει σε ένα κελί να καταλαμβάνει πολλές γραμμές.
- **`ALIGN`:** Καθορίζει την ευθυγράμμιση του περιεχομένου ενός κελιού (π.χ., αριστερά, κέντρο, δεξιά).
- **`VALIGN`:** Καθορίζει την κατακόρυφη ευθυγράμμιση του περιεχομένου ενός κελιού (π.χ., πάνω, κέντρο, κάτω).

## ✅102. Τί είναι οι σημάνσεις επικεφαλίδας; Ποιο είναι, ως προεπιλογή, το μεγαλύτερο μέγεθος επικεφαλίδας; Το Heading 1 ή το Heading 6;

- Οι σημάνσεις επικεφαλίδας (`<h1>` έως `<h6>`) καθορίζουν τίτλους ή υποτίτλους. Η `<h1>` είναι η μεγαλύτερη και πιο σημαντική, ενώ η `<h6>` είναι η μικρότερη.

## ✅103. Αναφέρατε δύο τεχνολογίες κατασκευής στατικών ιστοσελίδων (Static web pages) και τέσσερις δυναμικών ιστοσελίδων (Dynamic web pages). Ποια είναι η διαφορά των στατικών ιστοσελίδων από τις δυναμικές ιστοσελίδες;

- **Στατικές ιστοσελίδες:**
  1. **HTML:** Χρήση μόνο HTML για την παρουσίαση περιεχομένου.
  2. **HTML + CSS:** Συνδυασμός HTML και CSS για στατική μορφοποίηση.

- **Δυναμικές ιστοσελίδες:**
  1. **PHP:** Για δημιουργία δυναμικού περιεχομένου στον διακομιστή.
  2. **ASP.NET:** Πλαίσιο για ανάπτυξη δυναμικών ιστοσελίδων.
  3. **Node.js (JavaScript):** Εκτέλεση JavaScript στον διακομιστή για δυναμικό περιεχόμενο.
  4. **Ruby on Rails:** Πλαίσιο για ανάπτυξη δυναμικών ιστοσελίδων.

Η βασική διαφορά είναι ότι οι στατικές ιστοσελίδες έχουν σταθερό περιεχόμενο, ενώ οι δυναμικές προσαρμόζουν το περιεχόμενο ανάλογα με τον χρήστη ή άλλες παραμέτρους.

## ✅104. Με ποιόν τρόπο μπορώ να προσθέσω μια γραμμή θέματος (Subject) σε μια σύνδεση email (mailto);
```html
<a href="mailto:email@example.com?subject=Θέμα%20Μηνύματος">Στείλτε Email</a>
```

## ✅105. Ποιες ετικέτες θα χρησιμοποιήσουμε σε κάθε μία από τις παρακάτω περιπτώσεις για να εμφανιστεί η λέξη ""Παράδειγμα"":i. μόνο έντονα γραμμένη ii. έντονα και υπογραμμισμένη iii. μόνο υπογραμμισμένη iv. έντονα, πλάγια και υπογραμμισμένη.

i.  `<b>Παράδειγμα</b>`  
ii. `<b><u>Παράδειγμα</u></b>`  
iii. `<u>Παράδειγμα</u>`  
iv. `<b><i><u>Παράδειγμα</u></i></b>`

## ✅106. Τι κάνει η εντολή <BODY BACKGROUND = "bgimage.gif">; Πώς μπορούμε να αλλάξουμε το χρώμα τού φόντου σε ένα HTML κείμενο; Δώστε την εντολή που κάνει το φόντο πράσινο. Δώστε επίσης την εντολή που κάνει το φόντο 50% πράσινο και 50% μπλέ.

- Η εντολή `<BODY BACKGROUND = "bgimage.gif">` ορίζει ένα φόντο εικόνας για την ιστοσελίδα.
- Για να αλλάξουμε το χρώμα του φόντου σε πράσινο, χρησιμοποιούμε:

```html
<body style="background-color: green;">
```

Για να κάνουμε το φόντο 50% πράσινο και 50% μπλε, χρησιμοποιούμε:

```html
<body style="background: linear-gradient(to right, green 50%, blue 50%);">
```

## ✅107. Ποια είναι η λειτουργία της ετικέτας <div>; Τι λειτουργίες κάνουν οι ιδιότητές της align, class και id;

- Η ετικέτα `<div>` χρησιμοποιείται για τη δημιουργία μπλοκ περιεχομένου και για τη διάταξη σελίδων. Είναι μια δομική ετικέτα που βοηθά στη ομαδοποίηση και τη διαχείριση του περιεχομένου της σελίδας.

- Οι ιδιότητες:
  - **`align`**: Ορίζει την ευθυγράμμιση του περιεχομένου μέσα στο `<div>`, π.χ., `align="center"` για κεντραρισμένο περιεχόμενο.
  - **`class`**: Ορίζει την κλάση του `<div>`, επιτρέποντας την εφαρμογή CSS στυλ σε όλα τα στοιχεία με την ίδια κλάση.
  - **`id`**: Ορίζει ένα μοναδικό αναγνωριστικό για το `<div>`, το οποίο μπορεί να χρησιμοποιηθεί για αναφορές σε JavaScript ή CSS.

## ✅108. Δώστε τις HTML εντολές που υλοποιούν τον παρακάτω πίνακα:
--------------------------------
|Ιανουάριος  |  1  |     |     |
|------------------------------|
|Φεβρουάριος |     |  2  |     |
|------------------------------|
|Μάρτιος     |     |     |  3  |
--------------------------------

```html
<table border="1">
  <tr>
    <td>Ιανουάριος</td>
    <td>1</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>Φεβρουάριος</td>
    <td></td>
    <td>2</td>
    <td></td>
  </tr>
  <tr>
    <td>Μάρτιος</td>
    <td></td>
    <td></td>
    <td>3</td>
  </tr>
</table>
```

## ✅109. Τι είναι οι επώνυμες άγκυρες (Named Anchors), και σε ποιους τύπους ιστοσελίδων χρησιμοποιούνται; Αναφέρετε ένα παράδειγμα.

- **Επώνυμες άγκυρες (Named Anchors):** Είναι σημεία σε μια ιστοσελίδα στα οποία μπορεί να γίνει άμεση πλοήγηση, επιτρέποντας στους χρήστες να μεταβούν γρήγορα σε συγκεκριμένα τμήματα της σελίδας.

- **Χρήση:** Χρησιμοποιούνται κυρίως σε μεγάλες σελίδες με πολύ περιεχόμενο, όπως εγχειρίδια, οδηγίες χρήσης ή άρθρα, όπου απαιτείται γρήγορη πλοήγηση σε διάφορα τμήματα της σελίδας.

- **Παράδειγμα:**

  ```html
  <a name="section1"></a>
  <h2>Ενότητα 1</h2>
  <p>Περιεχόμενο της ενότητας 1...</p>

  <a name="section2"></a>
  <h2>Ενότητα 2</h2>
  <p>Περιεχόμενο της ενότητας 2...</p>

  <!-- Σύνδεσμος προς την Ενότητα 2 -->
  <a href="#section2">Μετάβαση στην Ενότητα 2</a>
  ```

## ✅110. Με ποιόν τρόπο μπορούμε να τοποθετήσουμε κείμενο πάνω σε μια εικόνα;

Για να τοποθετήσουμε κείμενο πάνω σε μια εικόνα, μπορούμε να χρησιμοποιήσουμε HTML και CSS με τον εξής τρόπο:

```html
<!DOCTYPE html>
<html lang="el">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .image-container {
            position: relative;
            width: 100%;
            max-width: 600px;
        }
        .image-container img {
            width: 100%;
            height: auto;
        }
        .text-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
    </style>
    <title>Κείμενο πάνω σε Εικόνα</title>
</head>
<body>

<div class="image-container">
    <img src="image.jpg" alt="Εικόνα">
    <div class="text-overlay">Το Κείμενό σας Εδώ</div>
</div>

</body>
</html>
```

## ✅111. Τι είναι το CSS (Cascading Style Sheet) και με ποιος τρόπους μπορεί να ενσωματωθεί σε μια ιστοσελίδα; (αναφέρατε τουλάχιστον δύο τρόπους)

- **CSS** είναι η γλώσσα που καθορίζει την εμφάνιση και διάταξη των στοιχείων σε μια ιστοσελίδα.
- Τρόποι ενσωμάτωσης:
  1. **Εσωτερικό CSS (Internal CSS)**: Μέσα στο `<head>` με την ετικέτα `<style>`.
  2. **Εξωτερικό CSS (External CSS)**: Μέσω της ετικέτας `<link>`, συνδέεται με αρχείο `.css`.
  3. **Ενσωματωμένο CSS (Inline CSS)**: Στην ετικέτα HTML με το χαρακτηριστικό `style`.

## ✅112. Δώστε τον ορισμό του Hyperlink (Υπερσύνδεση) και εξηγήστε ποιο θα είναι το αποτέλεσμα του ορισμού των κάτωθι target: _self, _parent, _blank και _top όταν αυτά θα ενσωματωθούν σε ένα Hyperlink.
- **Hyperlink**: Σύνδεσμος που οδηγεί σε άλλη σελίδα ή πόρο.
- **Targets**:
  1. **_self**: Ανοίγει στον ίδιο παράθυρο/καρέ.
  2. **_parent**: Ανοίγει στο γονικό παράθυρο.
  3. **_blank**: Ανοίγει σε νέο παράθυρο/καρέ.
  4. **_top**: Ανοίγει στο πλήρες παράθυρο, αντικαθιστώντας τα τρέχοντα καρέ.

## ✅113. Αναφέρατε τον ορισμό του Χάρτη Εικόνας (Image Map). Ποιο εργαλείο χάρτη εικόνας σάς επιτρέπει να σχεδιάσετε ακανόνιστα σχήματα;

- **Χάρτης Εικόνας (Image Map)**: Χρησιμοποιεί εικόνες με ενεργά πεδία (areas) που είναι σύνδεσμοι.
- Εργαλείο: **Imagemap Generator** επιτρέπει τη δημιουργία ακανόνιστων σχημάτων.

## ✅114. Ποια είναι η χρήση της παραμέτρου Cell Padding για έναν πίνακα μιας ιστοσελίδας και ποια της παραμέτρου Cell Spacing.

- **Cell Padding**: Προσθέτει κενό μέσα από τα κελιά του πίνακα.
- **Cell Spacing**: Προσθέτει κενό μεταξύ των κελιών του πίνακα.

## ✅115. Οι περισσότερες ιστοσελίδες χρησιμοποιούν εικόνες και γραφικά για την αναπαράσταση πληροφοριών. Περιγράψτε τα τρία βασικότερα είδη εικόνων (GIF, JPEG, PNG) και εξηγήστε για το καθένα απ’ αυτά τα πλεονεκτήματα χρήσης του σε μια ιστοσελίδα.

- **GIF**: Υποστηρίζει animations, κατάλληλο για απλά γραφικά και κινούμενες εικόνες.
- **JPEG**: Ιδανικό για φωτογραφίες, με υψηλή συμπίεση και μικρό μέγεθος αρχείου.
- **PNG**: Υποστηρίζει διαφάνεια και υψηλή ποιότητα εικόνας, χωρίς απώλεια.

## ✅116. Διατυπώστε τη συνάρτηση swap_image() σε Javascript που δέχεται ως ορίσματα α) το id του αντικειμένου που θέλουμε να διαχειριστούμε και β) το path της εικόνας "pic2.jpg" που θα χρησιμοποιήσουμε ως rollover image. Προσδιορίστε τι είναι το HTML αντικείμενο που καλεί τη συνάρτηση.
```javascript
function swap_image(id, newImagePath) {
    document.getElementById(id).src = newImagePath;
}
```
```html
<img id="myImage" src="pic1.jpg" onmouseover="swap_image('myImage', 'pic2.jpg')" onmouseout="swap_image('myImage', 'pic1.jpg')" />
```

## ✅117. Διατυπώστε τη συνάρτηση check_form() σε Javascript, που ελέγχει εάν τα πεδία username και password της HTML φόρμας "form1" δεν είναι κενά. Εάν κάποιο από αυτά είναι κενό, να ανοίγει ένα message box με την αντίστοιχη ειδοποίηση στον client.

```javascript
function check_form() {
    var username = document.forms["form1"]["username"].value;
    var password = document.forms["form1"]["password"].value;
    if (username == "" || password == "") {
        alert("Please fill in both fields.");
        return false;
    }
}
```

## ✅118. Διατυπώστε τον κώδικα για να διαβάσετε το cookie "user" και εάν αυτό υπάρχει, τυπώστε στο browser "Hello…" και ό,τι περιέχει το cookie, αλλιώς αποθηκεύσατε το cookie "user" με τιμή "Unknown visitor" και διάρκεια ζωής 1 ώρα.

```javascript
function check_cookie() {
    var user = getCookie("user");
    if (user != "") {
        alert("Hello " + user);
    } else {
        setCookie("user", "Unknown visitor", 1);
    }
}

function getCookie(name) {
    var cname = name + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1);
        if (c.indexOf(cname) == 0) return c.substring(cname.length, c.length);
    }
    return "";
}

function setCookie(name, value, hours) {
    var d = new Date();
    d.setTime(d.getTime() + (hours * 60 * 60 * 1000));
    var expires = "expires=" + d.toUTCString();
    document.cookie = name + "=" + value + ";" + expires + ";path=/";
}

```

## ✅119. Διατυπώστε τον κώδικα για ένα script που θα τυπώσει ένα HTML table με 7 σειρές και 6 στήλες. Σε κάθε κελί θα υπάρχει και ένας αριθμός σε αύξουσα σειρά από το 1 ως το 42. Ο πίνακας θα είναι κεντραρισμένος στην σελίδα, με border 1 και padding 4. Η στοίχιση μέσα στα κελιά θα είναι κεντρική και κάθε έβδομος αριθμός (7,14,21...) θα είναι έντονος (bold) και θα έχει χρώμα κόκκινο.

```javascript
function generateTable() {
    var table = "<table border='1' style='width:100%; padding:4px; text-align:center'>";
    var number = 1;
    for (var i = 0; i < 7; i++) {
        table += "<tr>";
        for (var j = 0; j < 6; j++) {
            table += "<td>" + number + "</td>";
            number++;
        }
        table += "</tr>";
    }
    table += "</table>";
    document.getElementById("table-container").innerHTML = table;
}

```

## ✅120. Στείλτε ένα email σε όλες τις εγγραφές του πίνακα subscribers χρησιμοποιώντας τη συνάρτηση mail (to, subject, body). Το email θα έχει θέμα "Login info" και περιεχόμενο "Your username is <το username χρήστη> and your password is <το password χρήστη> ". Δεν απαιτείται ο κώδικας σύνδεσης με τον (My)Sql server. Ο πίνακας subscribers έχει τα πεδία id, username, password, email.

```php
<?php
$subscribers = [
    ['email' => 'example1@example.com', 'username' => 'user1', 'password' => 'pass1'],
    ['email' => 'example2@example.com', 'username' => 'user2', 'password' => 'pass2']
];
// Χρήση του foreach για την αποστολή email σε κάθε εγγραφή
foreach ($subscribers as $subscriber) {
    mail($subscriber['email'], "Login info", "Your username is " . $subscriber['username'] . " and your password is " . $subscriber['password']);
}
?>
```

## ✅121. Ποιες είναι οι σημάνσεις HTML (<σήμανση>), όπως εμφανίζονται στον επιλογέα σήμανσης του Dreamweaver, α) για ένα πίνακα, β) για μια γραμμή πίνακα, γ) για ένα κελί πίνακα, και δ) για μια κεφαλίδα πίνακα; Αναφέρατε μόνο τον κωδικό σήμανσης για την κάθε μια από τις τέσσερις περιπτώσεις.

- **Πίνακας:** `<table>`
- **Γραμμή πίνακα:** `<tr>`
- **Κελί πίνακα:** `<td>`
- **Κεφαλίδα πίνακα:** `<th>`

## ✅122. Γιατί είναι προτιμότερο να ορίζω το στυλ των ιστοσελίδων μου (CSS) σε ένα εξωτερικό αρχείο παρά να εισάγω το στυλ εσωτερικά σε κάθε μια ιστοσελίδα; Ποιο είναι το πρόβλημα με την χρήση εσωτερικών (inline) στυλ;

- **Συντήρηση:** Εύκολη ενημέρωση στυλ σε όλες τις σελίδες.
- **Φόρτωση:** Μειωμένος χρόνος φόρτωσης λόγω κοινής χρήσης του CSS αρχείου.
- **Αναγνωσιμότητα:** Καθαρότερος HTML κώδικας χωρίς ενσωματωμένα στυλ.

**Πρόβλημα με inline στυλ:**

- **Συντήρηση:** Δυσκολία στην ενημέρωση πολλών σελίδων.
- **Κώδικας:** Φορτωμένος με στυλ, μειώνοντας την αναγνωσιμότητα.
- **Φόρτωση:** Αυξημένος χρόνος φόρτωσης λόγω πολλαπλών inline στυλ.

## ✅123. Ποιοι είναι οι τύποι επιλογέων (Selector Types) που χρησιμοποιούνται για τον ορισμό στυλ ενός CSS (Cascading Style Sheet); Περιγράψτε ποιος είναι ο ρόλος του κάθε τύπου. Δώστε ένα παράδειγμα για κάθε τύπο.

1. **Επιλογέας στοιχείου (Element Selector):**
   - **Ρόλος:** Επιλέγει όλα τα στοιχεία ενός συγκεκριμένου τύπου.
   - **Παράδειγμα:** `p { color: blue; }`

2. **Επιλογέας κλάσης (Class Selector):**
   - **Ρόλος:** Επιλέγει στοιχεία με συγκεκριμένη κλάση.
   - **Παράδειγμα:** `.menu { font-size: 14px; }`

3. **Επιλογέας ταυτότητας (ID Selector):**
   - **Ρόλος:** Επιλέγει ένα μοναδικό στοιχείο με συγκεκριμένο ID.
   - **Παράδειγμα:** `#header { background-color: gray; }`

4. **Επιλογέας ομάδας (Group Selector):**
   - **Ρόλος:** Επιλέγει πολλαπλά στοιχεία ταυτόχρονα.
   - **Παράδειγμα:** `h1, h2, h3 { margin-bottom: 10px; }`

5. **Επιλογέας παιδιού (Child Selector):**
   - **Ρόλος:** Επιλέγει στοιχεία που είναι άμεσα παιδιά ενός στοιχείου.
   - **Παράδειγμα:** `ul > li { list-style-type: square; }`

6. **Επιλογέας γειτονικού στοιχείου (Adjacent Sibling Selector):**
   - **Ρόλος:** Επιλέγει ένα στοιχείο που ακολουθεί άμεσα ένα άλλο.
   - **Παράδειγμα:** `h1 + p { margin-top: 0; }`

7. **Επιλογέας γενικού αδελφού (General Sibling Selector):**
   - **Ρόλος:** Επιλέγει όλα τα στοιχεία που είναι αδελφά ενός συγκεκριμένου στοιχείου.
   - **Παράδειγμα:** `h1 ~ p { color: red; }`

## ✅124. Περιγράψτε πώς, με τη βοήθεια σχετικού εργαλείου, μπορείτε να εισάγετε σε μια ιστοσελίδα έναν πίνακα δύο στηλών (η πρώτη πλάτους 100 pixels και η δεύτερη πλάτους 300 pixels) και τριών γραμμών, στοιχισμένο στο κέντρο.

1. **Εργαλείο:** Χρησιμοποιήστε το εργαλείο "Insert Table" του Dreamweaver.
2. **Ρυθμίσεις:**
   - **Στήλες:** 2
   - **Γραμμές:** 3
   - **Πλάτος στηλών:** 1η στήλη: 100px, 2η στήλη: 300px
   - **Στοίχιση:** Κέντρο
3. **Δημιουργία:**
   - Το Dreamweaver θα δημιουργήσει τον πίνακα με τις καθορισμένες προδιαγραφές.

## ✅125. Περιγράψτε πώς με τη χρήση σχετικού εργαλείου, μπορείτε να δημιουργήσετε IMAGE HOTSPOTS, να εισάγετε ένα JAVA APPLET και πώς μπορείτε να εισάγετε μια αριθμημένη λίστα σε μια ιστοσελίδα. Ποιους άλλους τύπους λίστας μπορείτε να εισάγετε και με ποιο τρόπο;

- **IMAGE HOTSPOTS:**
  - Επιλέξτε την εικόνα, χρησιμοποιήστε το εργαλείο "Image Map" για να ορίσετε περιοχές (hotspots) με συνδέσμους.

- **JAVA APPLET:**
  - Εισαγάγετε το applet μέσω του μενού "Insert" > "Object" > "Applet" και καθορίστε τις ρυθμίσεις του.

- **Αριθμημένη λίστα:**
  - Χρησιμοποιήστε το εργαλείο "Ordered List" από τη γραμμή εργαλείων ή πληκτρολογήστε `<ol>` και προσθέστε τα στοιχεία της λίστας.

- **Άλλοι τύποι λιστών:**
  - **Αδιάτακτες λίστες (Unordered Lists):** Χρησιμοποιήστε το εργαλείο "Unordered List" ή πληκτρολογήστε `<ul>` και προσθέστε τα στοιχεία της λίστας.
  - **Λίστες ορισμού (Definition Lists):** Χρησιμοποιήστε το εργαλείο "Definition List" ή πληκτρολογήστε `<dl>`, `<dt>` για τον όρο και `<dd>` για την περιγραφή.

## ✅126. Τι είναι τα «ερωτήματα» (queries) στο σχεσιακό μοντέλο Βάσεων δεδομένων;

- **Ορισμός:** Ερωτήματα είναι εντολές που χρησιμοποιούνται για την ανάκτηση ή την τροποποίηση δεδομένων από μια βάση δεδομένων μέσω SQL.

## ✅127. Τι είναι ένα σύστημα διαχείρισης βάσης δεδομένων;

- **Ορισμός:** Ένα λογισμικό που διαχειρίζεται βάσεις δεδομένων και επιτρέπει την αποθήκευση, την ανάκτηση και την τροποποίηση δεδομένων.

## ✅128. Τι χρησιμοποιούμε προκειμένου να απεικονίσουμε τον πραγματικό κόσμο σ' ένα μοντέλο, το οποίο εύκολα μεταφράζεται σε Σύστημα Διαχείρισης Βάσης Δεδομένων (ΣΔΒΔ);

- **Ορισμός:** Το μοντέλο οντοτήτων-συσχετίσεων (ER) χρησιμοποιείται για την αποτύπωση του πραγματικού κόσμου σε μια βάση δεδομένων.

## ✅129. Εξηγήστε τι σημαίνει ότι «μία σχέση οντοτήτων είναι ένα προς πολλά». Δώστε ένα παράδειγμα.

- **Ορισμός:** Μια σχέση όπου μια οντότητα (π.χ. Πελάτης) μπορεί να συνδέεται με πολλές άλλες οντότητες (π.χ. Παραγγελίες).
- **Παράδειγμα:** Ο πελάτης μπορεί να έχει πολλές παραγγελίες, αλλά κάθε παραγγελία ανήκει σε έναν μόνο πελάτη.

## ✅130. Τι είναι λειτουργικές εξαρτήσεις (functional dependecies); Ποιες μορφές λειτουργικών εξαρτήσεων γνωρίζετε;

- **Ορισμός:** Η λειτουργική εξάρτηση δηλώνει ότι, αν η τιμή μιας στήλης είναι γνωστή, τότε μπορεί να καθορίσει τη τιμή άλλης στήλης.
- **Μορφές λειτουργικών εξαρτήσεων:** 
  1. **Απλές:** Μια στήλη εξαρτάται άμεσα από μια άλλη.
  2. **Σύνθετες:** Η εξάρτηση περιλαμβάνει περισσότερες από μία στήλες.

## ✅131. Ποια είναι τα στάδια ανάπτυξης μίας βάσης δεδομένων;

1. **Ανάλυση:** Ανάλυση των απαιτήσεων και καθορισμός των οντοτήτων.
2. **Σχεδίαση:** Δημιουργία του μοντέλου βάσης δεδομένων (π.χ. ERD).
3. **Υλοποίηση:** Δημιουργία της βάσης δεδομένων με τη χρήση DDL (Data Definition Language).
4. **Συντήρηση:** Ενημέρωση και βελτιστοποίηση της βάσης δεδομένων κατά τη χρήση της.

## ✅132. Tί σημαίνει ο ορισμός Supertype και τι Subtype; Δώστε ένα παράδειγμα για τον κάθε ορισμό.

- **Supertype:** Είναι μια οντότητα που περιέχει κοινές ιδιότητες που μοιράζονται οι υποκείμενες οντότητες (subtypes).
  - **Παράδειγμα:** Ο τύπος "Υπάλληλος" μπορεί να είναι Supertype με υποτύπους "Διευθυντής" και "Υπάλληλος Καταστήματος".
- **Subtype:** Είναι μια εξειδικευμένη μορφή της Supertype, με πρόσθετες ιδιότητες.
  - **Παράδειγμα:** Ο "Διευθυντής" μπορεί να έχει πρόσθετες ιδιότητες όπως "Αριθμός Τμήματος".

## ✅133. Τι ονομάζουμε κανονικοποίηση μιας βάσης δεδομένων και πότε λέμε ότι μία σχέση ή πίνακας βρίσκεται σε πρώτη κανονική μορφή;

- **Ορισμός:** Η κανονικοποίηση είναι η διαδικασία οργάνωσης των δεδομένων μιας βάσης δεδομένων έτσι ώστε να μειώνονται οι ανωμαλίες και οι πλεονασμοί.
- **Πρώτη Κανονική Μορφή (1NF):**
  - Όλα τα πεδία πρέπει να περιέχουν μόνο ατομικές τιμές (χωρίς επαναλαμβανόμενα σύνολα δεδομένων).
  - **Παράδειγμα:** Στον πίνακα "Πελάτες", το πεδίο "Αγορές" δεν πρέπει να περιέχει λίστες, αλλά μόνο μία τιμή για κάθε εγγραφή.

## ✅134. Εξηγήστε την οργάνωση αρχείων με δείκτη «index» σε ένα σύστημα διαχείρισης βάσεων δεδομένων.

- **Ορισμός:** Η οργάνωση αρχείων με δείκτη χρησιμοποιεί ένα ευρετήριο για να επιταχύνει τις αναζητήσεις και την πρόσβαση σε δεδομένα.
- **Διαδικασία:** Το ευρετήριο δημιουργείται για τα πεδία που συχνά χρησιμοποιούνται για αναζητήσεις ή συνδέσεις, επιταχύνοντας έτσι τη διαδικασία αναζήτησης.
- **Παράδειγμα:** Αν ο πίνακας "Πελάτες" περιέχει πολλά δεδομένα, το πεδίο "Αριθμός Πελάτη" μπορεί να ευρετηριαστεί για ταχύτερη αναζήτηση.

## ✅135. Τι είναι «πρωτεύον κλειδί» (primary key) και τί «εξωτερικό κλειδί» (foreign key) στο σχεσιακό μοντέλο βάσεων δεδομένων;

- **Πρωτεύον Κλειδί (Primary Key):** Μοναδικός αναγνωριστής για κάθε εγγραφή στον πίνακα. Δεν μπορεί να έχει τιμή NULL.
  - **Παράδειγμα:** Ο "Αριθμός Πελάτη" είναι το πρωτεύον κλειδί στον πίνακα "Πελάτες".
- **Εξωτερικό Κλειδί (Foreign Key):** Ένα πεδίο που αναφέρεται στο πρωτεύον κλειδί ενός άλλου πίνακα, δημιουργώντας μία σχέση μεταξύ των δύο πινάκων.
  - **Παράδειγμα:** Ο "Αριθμός Πελάτη" στο πίνακα "Παραγγελίες" είναι εξωτερικό κλειδί που αναφέρεται στον πίνακα "Πελάτες".

## ✅136. Ποιους τύπους δεδομένων υποστηρίζει η γλώσσα προγραμματισμού σχεσιακών βάσεων δεδομένων SQL;

- **Αριθμητικοί τύποι:** `INT`, `FLOAT`, `DECIMAL`
- **Χρονικοί τύποι:** `DATE`, `TIME`, `DATETIME`
- **Χαρακτηριστικοί τύποι:** `VARCHAR`, `TEXT`, `CHAR`
- **Λογικοί τύποι:** `BOOLEAN`
- **Βασικοί τύποι:** `NULL`, `BLOB`, `ENUM`

## ✅137. Εξηγήστε πότε λέμε ένα ότι ένα σύστημα βάσεων δεδομένων λειτουργεί σε περιβάλλον πολλαπλών χρηστών.

- **Ορισμός:** Όταν περισσότερα από ένα άτομα ή συστήματα μπορούν να αλληλεπιδρούν με τη βάση δεδομένων ταυτόχρονα, με έλεγχο πρόσβασης και συγχρονισμού.
- **Παράδειγμα:** Μια εταιρεία που χρησιμοποιεί ένα ERP σύστημα όπου οι υπάλληλοι μπορούν να κάνουν εισαγωγές και ενημερώσεις ταυτόχρονα.

## ✅138. Εξηγήστε τι είναι τα κατανεμημένα συστήματα βάσεων δεδομένων (distributed database systems).

- **Ορισμός:** Σύστημα βάσεων δεδομένων που αποθηκεύει δεδομένα σε πολλαπλά σημεία ή διακομιστές, και τα δεδομένα παραμένουν προσβάσιμα σε όλο το δίκτυο.
- **Παράδειγμα:** Μια παγκόσμια εταιρεία με βάσεις δεδομένων σε διαφορετικά κέντρα δεδομένων.

## ✅139. Εξηγήστε τι ονομάζουμε ανοικτά συστήματα διασύνδεσης βάσεων δεδομένων, όπως τα συστήματα που υποστηρίζουν το «Open Database Connectivity (ODBC)».

- **Ορισμός:** Τα ανοικτά συστήματα διασύνδεσης επιτρέπουν σε εφαρμογές να συνδέονται και να αλληλεπιδρούν με διάφορους τύπους βάσεων δεδομένων μέσω κοινών προτύπων. 
Το **Open Database Connectivity (ODBC)** είναι ένα τέτοιο πρότυπο που επιτρέπει σε εφαρμογές να συνδέονται με βάσεις δεδομένων ανεξαρτήτως του κατασκευαστή τους, χρησιμοποιώντας μια κοινή διεπαφή.

## ✅140. Τι σημαίνει «Ακεραιότης Αναφορών-Referential Integrity»; Δώστε ένα παράδειγμα.

- **Ορισμός:** Η ακεραιότητα αναφορών διασφαλίζει τη συνέπεια και την ακρίβεια των σχέσεων μεταξύ πινάκων σε μια βάση δεδομένων. Εξασφαλίζει ότι οι σχέσεις μεταξύ των πινάκων είναι έγκυρες και ότι δεν υπάρχουν "ορφανοί" δείκτες.
- **Παράδειγμα:** Έστω δύο πίνακες, `Πελάτες` και `Παραγγελίες`, όπου κάθε παραγγελία συνδέεται με έναν πελάτη μέσω του πεδίου `Πελάτης_ID`. Η ακεραιότητα αναφορών διασφαλίζει ότι κάθε `Πελάτης_ID` στην `Παραγγελίες` αντιστοιχεί σε έγκυρο `Πελάτης_ID` στον πίνακα `Πελάτες`. Εάν διαγραφεί ένας πελάτης, όλες οι σχετικές παραγγελίες πρέπει είτε να διαγραφούν είτε να ενημερωθούν αναλόγως.

## ✅141. Να αναφέρετε τα μοντέλα βάσεων δεδομένων που γνωρίζετε και ποιες είναι οι διαφορές τους.

- **Σχεσιακό Μοντέλο:** Οργανώνει τα δεδομένα σε πίνακες (σχέσεις) με γραμμές και στήλες. Κάθε γραμμή αντιστοιχεί σε μια εγγραφή, και κάθε στήλη σε ένα χαρακτηριστικό της εγγραφής. Χρησιμοποιεί κλειδιά για τη σύνδεση μεταξύ πινάκων.
- **Ιεραρχικό Μοντέλο:** Οργανώνει τα δεδομένα σε μια ιεραρχία, όπου κάθε εγγραφή έχει μια μοναδική "γονική" εγγραφή. Είναι κατάλληλο για δεδομένα με σαφή ιεραρχική δομή.
- **Δικτυακό Μοντέλο:** Παρόμοιο με το ιεραρχικό, αλλά επιτρέπει μια εγγραφή να έχει πολλούς "γονείς", δημιουργώντας ένα δίκτυο σχέσεων.
- **Αντικειμενοστραφές Μοντέλο:** Συνδυάζει τις βάσεις δεδομένων με την αντικειμενοστραφή προγραμματιστική προσέγγιση, αποθηκεύοντας αντικείμενα με τις μεθόδους και τα χαρακτηριστικά τους.

## ✅142. Εξηγήστε τι είναι «γλώσσα χειρισμού δεδομένων» (Data Manipulation Language) και τι «γλώσσα ορισμού δεδομένων» (Data Definition Language), τα δυο βασικά τμήματα που χωρίζεται η γλώσσα διαχείρισης βάσεων δεδομένων SQL.

- **DML (Data Manipulation Language):** Χρησιμοποιείται για την ανάκτηση, εισαγωγή, ενημέρωση και διαγραφή δεδομένων σε μια βάση δεδομένων. Παραδείγματα εντολών DML είναι οι `SELECT`, `INSERT`, `UPDATE`, `DELETE`.
- **DDL (Data Definition Language):** Χρησιμοποιείται για τον ορισμό και την τροποποίηση της δομής των δεδομένων, όπως η δημιουργία, τροποποίηση ή διαγραφή πινάκων και άλλων αντικειμένων της βάσης δεδομένων. Παραδείγματα εντολών DDL είναι οι `CREATE`, `ALTER`, `DROP`.

## ✅143. Ποιοι είναι οι τρεις πρώτοι κανόνες κανονικοποίησης; Δώστε ένα παράδειγμα για τον κάθε ένα από αυτούς.

1. **Πρώτη Κανονική Μορφή (1NF):** Κάθε πεδίο σε έναν πίνακα πρέπει να περιέχει μόνο μία τιμή (ατομικότητα), και όλα τα πεδία πρέπει να είναι μοναδικά.
   - *Παράδειγμα:* Ένας πίνακας που αποθηκεύει διευθύνσεις πελατών πρέπει να έχει ξεχωριστά πεδία για την οδό, την πόλη και τον ταχυδρομικό κώδικα, αντί να τα αποθηκεύει όλα σε ένα πεδίο.
2. **Δεύτερη Κανονική Μορφή (2NF):** Ο πίνακας πρέπει να είναι σε 1NF και όλα τα μη-πρωτεύοντα πεδία πρέπει να εξαρτώνται πλήρως από το πρωτεύον κλειδί.
   - *Παράδειγμα:* Σε έναν πίνακα `Παραγγελίες` με `Πελάτης_ID` και `Προϊόν_ID` ως σύνθετο πρωτεύον κλειδί, η τιμή του προϊόντος πρέπει να αποθηκεύεται σε ξεχωριστό πίνακα `Προϊόντα` για να αποφευχθεί η επανάληψη.
3. **Τρίτη Κανονική Μορφή (3NF):** Ο πίνακας πρέπει να είναι σε 2NF και όλα τα πεδία πρέπει να εξαρτώνται μόνο από το πρωτεύον κλειδί, χωρίς να υπάρχουν μεταβατικές εξαρτήσεις.
   - *Παράδειγμα:* Σε έναν πίνακα `Πωλήσεις` με πεδία `Πωλητής_ID`, `Πωλητής_Όνομα`, `Πωλητής_Τηλέφωνο`, το `Πωλητής_Τηλέφωνο` εξαρτάται από το `Πωλητής_Όνομα`, όχι άμεσα από το `Πωλητής_ID`. Έτσι, το `Πωλητής_Τηλέφωνο` πρέπει να μεταφερθεί σε ξεχωριστό πίνακα `Πωλητές`.

## ✅144. Τί είναι το Μοντέλο Οντοτήτων Συσχετίσεων(ΜΟΣ); Παρουσιάστε σχηματικά πώς απεικονίζονται στο ΜΟΣ οι οντότητες (entity), οι ιδιότητες των οντοτήτων (attributes), τα πρωτεύοντα κλειδιά (primary key) και οι σχέσεις (relation type και identifying relationship type).

Το Μοντέλο Οντοτήτων-Συσχετίσεων (Entity-Relationship Model) είναι ένα αφαιρετικό μοντέλο δεδομένων που χρησιμοποιείται για την εννοιολογική σχεδίαση βάσεων δεδομένων. Σκοπός του είναι να απεικονίσει τις οντότητες του πραγματικού κόσμου και τις σχέσεις μεταξύ τους. :contentReference[oaicite:0]{index=0}

**Σχηματική αναπαράσταση στο ER:**

- **Οντότητες (Entities):** Απεικονίζονται ως ορθογώνια (ή ελλείψεις) και αντιπροσωπεύουν αντικείμενα ή έννοιες με πραγματική ή θεωρητική υπόσταση.

- **Ιδιότητες (Attributes):** Συνδέονται με τις οντότητες και απεικονίζονται ως ελλείψεις ή κύκλοι.

- **Πρωτεύοντα Κλειδιά (Primary Keys):** Είναι χαρακτηριστικά που μοναδικά προσδιορίζουν μια οντότητα.

- **Σχέσεις (Relationships):** Απεικονίζονται ως ρόμβοι και δείχνουν τη σύνδεση μεταξύ δύο ή περισσότερων οντοτήτων.

**Παράδειγμα:**

- **Οντότητες:** Πολίτης, Πόλη.

- **Ιδιότητες Πολίτη:** ΑΦΜ, Όνομα, Επώνυμο.

- **Ιδιότητες Πόλης:** Όνομα, Πληθυσμός.

- **Σχέση "Γεννήθηκε":** Συνδέει τον Πολίτη με την Πόλη γέννησής του.

- **Σχέση "Κατοικεί":** Συνδέει τον Πολίτη με την Πόλη κατοικίας του.

- **Σχέση "Επισκέπτεται":** Δείχνει τις Πόλεις που έχει επισκεφθεί ο Πολίτης.

## ✅145. Έχουμε δύο οντότητες: Η μία είναι Πολίτης και η άλλη Πόλη. Για αυτές τις δύο οντότητες αναπαραστήστε σχηματικά, με τη βοήθεια της γλώσσας ERDish, τις ακόλουθες σχέσεις: 
Κάθε Άτομο πρέπει να έχει γεννηθεί μόνο σε μία Πόλη / Κάθε Πόλη μπορεί να είναι γενέτειρα ενός ή περισσότερων Πολιτών 2. 
Κάθε Πολίτης πρέπει να έχει μόνιμη κατοικία σε μία μόνο Πόλη / Κάθε Πόλη μπορεί να είναι ο τόπος κατοικίας ενός ή περισσότερων Πολιτών 3. 
Κάθε Πολίτης μπορεί να είναι επισκέπτης μίας ή περισσοτέρων Πόλεων / Κάθε Πόλη πρέπει να την έχει επισκεφθεί ένας ή περισσότεροι Πολίτες.

- **Σχέση**: Ένας προς Πολλούς (1:N)
- Κάθε Πολίτης γεννιέται σε μία μόνο Πόλη, και κάθε Πόλη μπορεί να είναι η γενέτειρα πολλών Πολιτών.

```er
ENTITY Πολίτης {
  +id: INT
  name: STRING
  birth_city_id: INT
}

ENTITY Πόλη {
  +id: INT
  name: STRING
}

RELATION γενέτειρα {
  FROM Πολίτης.birth_city_id TO Πόλη.id
}
```

- **Σχέση**: Ένας προς Πολλούς (1:N)
- Κάθε Πολίτης έχει μόνιμη κατοικία σε μία μόνο Πόλη, και κάθε Πόλη μπορεί να είναι ο τόπος κατοικίας πολλών Πολιτών.

```er
ENTITY Πολίτης {
  +id: INT
  name: STRING
  residence_city_id: INT
}

ENTITY Πόλη {
  +id: INT
  name: STRING
}

RELATION κατοικία {
  FROM Πολίτης.residence_city_id TO Πόλη.id
}
```

- **Σχέση**: Πολλοί προς Πολλούς (N:M)
- Κάθε Πολίτης μπορεί να επισκέπτεται μία ή περισσότερες Πόλεις, και κάθε Πόλη πρέπει να έχει επισκεφτεί τουλάχιστον ένας Πολίτης.

```er
ENTITY Πολίτης {
  +id: INT
  name: STRING
}

ENTITY Πόλη {
  +id: INT
  name: STRING
}

RELATION επισκέπτης {
  FROM Πολίτης.id TO Πόλη.id
  // Πίνακας σύνδεσης για σχέση N:M
}
```


## ✅146. Αναλύστε τις βασικές διαφορές μεταξύ C και C++, όσον αφορά στα χαρακτηριστικά που προσθέτει η C++.

Η C++ είναι μια επέκταση της C, προσθέτοντας χαρακτηριστικά που υποστηρίζουν τον αντικειμενοστρεφή προγραμματισμό, όπως κλάσεις, αντικείμενα, κληρονομικότητα, πολυμορφισμό και ενθυλάκωση. 
Επιπλέον, η C++ προσφέρει πρότυπα (templates) για generic προγραμματισμό, δυνατότητες διαχείρισης μνήμης μέσω δεικτών και αναφορών, καθώς και δυνατότητες χειρισμού εξαιρέσεων για διαχείριση σφαλμάτων.

## ✅147. Ποια είναι η διαφορά μεταξύ του αντικειμένου και της κλάσης; Δώστε ένα παράδειγμα.

Σε μια αντικειμενοστρεφή γλώσσα προγραμματισμού, μια **κλάση** (class) είναι ένα πρότυπο ή μπλεprints για τη δημιουργία αντικειμένων (objects). 
Ορίζει τα χαρακτηριστικά (ιδιότητες) και τις μεθόδους (συναρτήσεις) που θα έχουν τα αντικείμενα αυτής της κλάσης. 
Αντίθετα, ένα **αντικείμενο** είναι μια συγκεκριμένη υλοποίηση της κλάσης, με πραγματικές τιμές για τα χαρακτηριστικά της.

*Παράδειγμα:*

```cpp
class Αυτοκίνητο {
public:
    string μάρκα;
    string μοντέλο;
    int έτος_κατασκευής;

    void οδήγηση() {
        // Κώδικας για οδήγηση
    }
};

int main() {
    Αυτοκίνητο αυτοκίνητο1;
    αυτοκίνητο1.μάρκα = "Toyota";
    αυτοκίνητο1.μοντέλο = "Corolla";
    αυτοκίνητο1.έτος_κατασκευής = 2020;
    αυτοκίνητο1.οδήγηση();
    return 0;
}
```

## ✅148. Ποιες είναι οι διαφορές μεταξύ του δομημένου προγραμματισμού και του προγραμματισμού οδηγούμενου από γεγονότα;

Ο **δομημένος προγραμματισμός** επικεντρώνεται στη χρήση ελεγχόμενων δομών ροής, όπως ακολουθίες, επιλογές (if-else) και επαναλήψεις (loops), για την επίλυση προβλημάτων. Αυτή η προσέγγιση προάγει την αναγνωσιμότητα και τη συντηρησιμότητα του κώδικα, περιορίζοντας τη χρήση άλματος (goto) και ενθαρρύνοντας τη χρήση υποπρογραμμάτων (functions, procedures). 
Στόχος είναι η δημιουργία καθαρών και οργανωμένων προγραμμάτων.

Αντίθετα, ο **προγραμματισμός οδηγούμενος από γεγονότα** βασίζεται στην αντίδραση σε εξωτερικά γεγονότα, όπως η είσοδος χρήστη, η λήψη δεδομένων από δίκτυο ή η ολοκλήρωση μιας διαδικασίας. Αυτή η προσέγγιση είναι κοινή σε εφαρμογές με γραφικές διεπαφές χρήστη (GUI), συστήματα επεξεργασίας ροής δεδομένων και σε περιβάλλοντα όπου η συμπεριφορά του προγράμματος εξαρτάται από αλληλεπιδράσεις σε πραγματικό χρόνο.

- Βασικές Διαφορές

- **Ροή Εκτέλεσης:**
  - *Δομημένος Προγραμματισμός:* Η ροή εκτέλεσης είναι γραμμική και καθορίζεται από τη δομή του προγράμματος.
  - *Προγραμματισμός Οδηγούμενος από Γεγονότα:* Η ροή εκτέλεσης εξαρτάται από τα γεγονότα που συμβαίνουν, με το πρόγραμμα να αντιδρά σε αυτά.

- **Χρήση:**
  - *Δομημένος Προγραμματισμός:* Κατάλληλος για εφαρμογές όπου η ροή είναι προβλέψιμη και δεν εξαρτάται από εξωτερικές εισόδους σε πραγματικό χρόνο.
  - *Προγραμματισμός Οδηγούμενος από Γεγονότα:* Ιδανικός για εφαρμογές με αλληλεπιδράσεις χρήστη, συστήματα που απαιτούν άμεση αντίδραση σε εξωτερικά ερεθίσματα ή εφαρμογές σε πραγματικό χρόνο.

Στην πράξη, πολλές σύγχρονες εφαρμογές συνδυάζουν στοιχεία και από τις δύο προσεγγίσεις, αξιοποιώντας τα πλεονεκτήματα του καθενός.

## ✅149. Αναφέρετε τι καθορίζει η κλάση (class) ενός αντικειμένου και τι το στιγμιότυπο (instance) ενός αντικειμένου σε μια αντικειμενοστραφή γλώσσα προγραμματισμού.

Σε μια αντικειμενοστραφή γλώσσα προγραμματισμού, όπως η C++, η **κλάση** (class) λειτουργεί ως πρότυπο ή σχεδιαστικό πρότυπο για τη δημιουργία αντικειμένων. Ορίζει τα χαρακτηριστικά (μεταβλητές-μέλη) και τις συμπεριφορές (μεθόδους) που θα έχουν τα αντικείμενα που δημιουργούνται από αυτήν.

Από την άλλη, ένα **στιγμιότυπο** (instance) της κλάσης είναι ένα συγκεκριμένο αντικείμενο που δημιουργείται βάσει αυτού του προτύπου. Κάθε στιγμιότυπο έχει τη δική του κατάσταση (τιμές για τα χαρακτηριστικά) και μπορεί να αλληλεπιδρά με άλλες οντότητες μέσω των μεθόδων της κλάσης.

## ✅150. Τι είναι ο constructor και τι ο destructor σε μια κλάση; Ποιος είναι ο λόγος χρήσης τους;

Ο **κατασκευαστής** (constructor) είναι μια ειδική μέθοδος που καλείται κατά τη δημιουργία ενός αντικειμένου για να το αρχικοποιήσει. 

Ο **καταστροφέας** (destructor) είναι μια ειδική μέθοδος που καλείται όταν το αντικείμενο καταστρέφεται, χρησιμοποιείται για να αποδεσμεύσει πόρους ή να κάνει άλλες απαραίτητες ενέργειες πριν από την καταστροφή του αντικειμένου.

## ✅151. Δώστε τον ορισμό των πιο σημαντικών χαρακτηριστικών του αντικειμενοστραφούς προγραμματισμού:

- **Ενθυλάκωση (Encapsulation):** Η διαδικασία της απόκρυψης των δεδομένων και της παροχής ελεγχόμενης πρόσβασης σε αυτά μέσω μεθόδων.
- **Πολυμορφισμός (Polymorphism):** Η δυνατότητα μιας συνάρτησης ή μεθόδου να έχει διαφορετική συμπεριφορά ανάλογα με το αντικείμενο που την καλεί.
- **Κληρονομικότητα (Inheritance):** Η δυνατότητα μιας κλάσης να κληρονομεί χαρακτηριστικά και μεθόδους από μια άλλη κλάση.

## ✅152. Αναλύστε τις διαφορετικές τεχνικές προγραμματισμού procedural (διαδικαστικός), structured (δομημένος) και object-oriented (αντικειμενοστραφή).

- **Procedural Programming (Διαδικαστικός Προγραμματισμός):** Εστιάζει στη δημιουργία συναρτήσεων ή διαδικασιών που εκτελούν ενέργειες με δεδομένα.
- **Structured Programming (Δομημένος Προγραμματισμός):** Εστιάζει στην οργάνωση του προγράμματος σε συγκεκριμένες δομές ελέγχου (if, loops).
- **Object-Oriented Programming (Αντικειμενοστραφής Προγραμματισμός):** Εστιάζει στη δημιουργία και διαχείριση αντικειμένων που έχουν δεδομένα και μεθόδους.

## ✅153. Αναλύστε ποιος είναι ο ρόλος της οδηγίας #include <iostream>.

Η οδηγία `#include <iostream>` εισάγει τη βιβλιοθήκη εισόδου/εξόδου της C++, η οποία περιλαμβάνει τις δυνατότητες για την εκτύπωση στην οθόνη και την ανάγνωση δεδομένων από τον χρήστη.

## ✅154. Δώστε ένα παράδειγμα σε C++ που να εκτυπώνει τα παρακάτω μηνύματα το ένα κάτω από το άλλο: 
“Ένα απλό Πρόγραμμα”, “Είναι γραμμένο σε C++” , “Η C++ είναι αντικειμενοστραφής γλώσσα προγραμματισμού”.

```cpp
#include <iostream>

int main() {
    std::cout << "Ένα απλό Πρόγραμμα" << std::endl;
    std::cout << "Είναι γραμμένο σε C++" << std::endl;
    std::cout << "Η C++ είναι αντικειμενοστραφής γλώσσα προγραμματισμού" << std::endl;
    return 0;
}
```

## ✅155. Αναλύστε τι είναι το λάθος σε χρόνο εκτέλεσης και τι λάθος κατά την μεταγλώττιση. Να αναφέρετε από δύο αιτίες που προκαλούν αυτά τα λάθη.

**Σφάλματα σε χρόνο εκτέλεσης (Runtime Errors):**

- **Ορισμός:** Σφάλματα που εμφανίζονται κατά την εκτέλεση του προγράμματος, όταν ο υπολογιστής προσπαθεί να εκτελέσει μια εντολή που δεν μπορεί να ολοκληρωθεί.

- **Παράδειγμα αιτίων:**
  - **Διαίρεση με το μηδέν:** Προσπάθεια διαίρεσης ενός αριθμού με το μηδέν.
  - **Πρόσβαση σε μη έγκυρη μνήμη:** Πρόσβαση σε διεύθυνση μνήμης που δεν έχει δεσμευτεί ή έχει απελευθερωθεί.

**Σφάλματα κατά τη μεταγλώττιση (Compilation Errors):**

- **Ορισμός:** Σφάλματα που ανιχνεύονται από τον μεταγλωττιστή κατά την προσπάθεια μετατροπής του πηγαίου κώδικα σε εκτελέσιμο πρόγραμμα.

- **Παράδειγμα αιτίων:**
  - **Συντακτικά λάθη:** Λάθη στη σύνταξη του κώδικα, όπως ελλείψεις αγκύλων ή εσφαλμένη χρήση τελεστών.
  - **Αναφορά σε μη δηλωμένες μεταβλητές:** Χρήση μεταβλητής χωρίς προηγούμενη δήλωση ή ορισμό.

## ✅156. Αναλύστε τις διαφορές μεταξύ if και else if όσον αφορά στον έλεγχο και στη χρήση τους. Δώστε παράδειγμα.

- **`if`:** Χρησιμοποιείται για να ελέγξει μια συνθήκη. Αν η συνθήκη είναι αληθής, εκτελείται το μπλοκ κώδικα που ακολουθεί.

- **`else if`:** Χρησιμοποιείται μετά από ένα `if` για να ελέγξει μια εναλλακτική συνθήκη, αν η προηγούμενη ήταν ψευδής.

**Παράδειγμα:**

```cpp
int a = 10;
if (a > 5) {
    std::cout << "Αριθμός μεγαλύτερος από 5" << std::endl;
} else if (a == 5) {
    std::cout << "Αριθμός ίσος με 5" << std::endl;
} else {
    std::cout << "Αριθμός μικρότερος από 5" << std::endl;
}
```

## ✅157. Αναλύστε τη χρήση των πινάκων χαρακτήρων string στον προγραμματισμό με C++.

Στη C++, οι συμβολοσειρές μπορούν να αναπαριστώνται με δύο τρόπους:

1. **Χρήση πίνακα χαρακτήρων (C-strings):**
   - **Δήλωση και αρχικοποίηση:**
     ```cpp
     char str1[] = "Hello";
     char str2[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
     ```
     Εδώ, ο πίνακας `str1` περιέχει τη συμβολοσειρά "Hello", ενώ ο `str2` είναι ένας πίνακας χαρακτήρων με μέγεθος 6, όπου ο τελευταίος χαρακτήρας είναι ο τερματιστικός χαρακτήρας `'\0'`.
   - **Είσοδος από τον χρήστη:**
     ```cpp
     char name[50];
     std::cin.getline(name, 50);
     ```
     Η συνάρτηση `std::cin.getline` διαβάζει μια γραμμή εισόδου και την αποθηκεύει στον πίνακα `name`.
   - **Σύγκριση συμβολοσειρών:**
     ```cpp
     if (strcmp(str1, str2) == 0) {
         std::cout << "Οι συμβολοσειρές είναι ίδιες." << std::endl;
     }
     ```
     Η συνάρτηση `strcmp` συγκρίνει δύο C-strings και επιστρέφει 0 αν είναι ίδιες.

2. **Χρήση της κλάσης `std::string`:**
   - **Δήλωση και αρχικοποίηση:**
     ```cpp
     std::string str1 = "Hello";
     std::string str2("World");
     ```
   - **Είσοδος από τον χρήστη:**
     ```cpp
     std::string name;
     std::getline(std::cin, name);
     ```
   - **Σύγκριση συμβολοσειρών:**
     ```cpp
     if (str1 == str2) {
         std::cout << "Οι συμβολοσειρές είναι ίδιες." << std::endl;
     }
     ```
   - **Πρόσβαση σε χαρακτήρες:**
     ```cpp
     char c = str1[0]; // 'H'
     ```
   - **Εύρεση υποσυμβολοσειράς:**
     ```cpp
     size_t pos = str1.find("ell");
     if (pos != std::string::npos) {
         std::cout << "Βρέθηκε στη θέση: " << pos << std::endl;
     }
     ```

Η χρήση της `std::string` προσφέρει περισσότερες δυνατότητες και ευκολίες σε σχέση με τους πίνακες χαρακτήρων, όπως δυναμική διαχείριση μεγέθους και πλούσιες συναρτήσεις για επεξεργασία συμβολοσειρών.

## ✅158. Αναλύστε τις διαφορές μεταξύ for, while και do while, όσον αφορά στον έλεγχο των συνθηκών τους. Δώστε από ένα παράδειγμα σε C++.

- **`for`:** Χρησιμοποιείται όταν ο αριθμός επαναλήψεων είναι γνωστός εκ των προτέρων.
  - **Σύνταξη:**
    ```cpp
    for (initialization; condition; increment) {
        // Κώδικας προς εκτέλεση
    }
    ```
  - **Παράδειγμα:**
    ```cpp
    for (int i = 0; i < 5; i++) {
        std::cout << i << std::endl;
    }
    ```
    Εκτυπώνει τους αριθμούς από το 0 έως το 4.

- **`while`:** Εκτελεί τον βρόχο όσο η συνθήκη είναι αληθής.
  - **Σύνταξη:**
    ```cpp
    while (condition) {
        // Κώδικας προς εκτέλεση
    }
    ```
  - **Παράδειγμα:**
    ```cpp
    int i = 0;
    while (i < 5) {
        std::cout << i << std::endl;
        i++;
    }
    ```
    Εκτυπώνει τους αριθμούς από το 0 έως το 4.

- **`do while`:** Εκτελεί τον βρόχο τουλάχιστον μία φορά, ανεξάρτητα από τη συνθήκη.
  - **Σύνταξη:**
    ```cpp
    do {
        // Κώδικας προς εκτέλεση
    } while (condition);
    ```
  - **Παράδειγμα:**
    ```cpp
    int i = 0;
    do {
        std::cout << i << std::endl;
        i++;
    } while (i < 5);
    ```
    Εκτυπώνει τους αριθμούς από το 0 έως το 4.
    
## ✅159. Αναλύστε τη χρήση της υπερφόρτωσης σε συναρτήσεις και κατασκευαστές.

Η υπερφόρτωση (overloading) στη C++ επιτρέπει σε συναρτήσεις και κατασκευαστές με το ίδιο όνομα να συνυπάρχουν, αρκεί να διαφέρουν ως προς τον αριθμό ή τον τύπο των παραμέτρων τους. :contentReference[oaicite:0]{index=0}

- Υπερφόρτωση Συναρτήσεων

Η υπερφόρτωση συναρτήσεων επιτρέπει την ύπαρξη πολλών συναρτήσεων με το ίδιο όνομα, αλλά με διαφορετικά πρωτότυπα. Αυτό διευκολύνει την ανάπτυξη ευέλικτου και αναγνώσιμου κώδικα.

**Παράδειγμα:**

```cpp
#include <iostream>
// Υπερφόρτωση συνάρτησης add
int add(int a, int b) {
    return a + b;
}

double add(double a, double b) {
    return a + b;
}

int main() {
    int intSum = add(3, 4);         // Καλεί την add(int, int)
    double doubleSum = add(3.5, 4.5); // Καλεί την add(double, double)
    std::cout << "intSum: " << intSum << "\ndoubleSum: " << doubleSum << std::endl;
    return 0;
}
```

## ✅160. Τι είναι ένα string στην C++ και σε τι διαφέρει από ένα αλφαριθμητικό C-string;

Στην C++, ένα `string` αναφέρεται συνήθως στο τύπο δεδομένων `std::string`, ο οποίος παρέχεται από τη βιβλιοθήκη `<string>`. Αυτός ο τύπος είναι μια κλάση που διευκολύνει τη διαχείριση αλφαριθμητικών χαρακτήρων, προσφέροντας λειτουργίες όπως σύγκριση, συγχώνευση, εύρεση υποσυμβολοσειρών και άλλες. Η `std::string` χειρίζεται αυτόματα την κατανομή και απελευθέρωση μνήμης, καθώς και τον τερματισμό της συμβολοσειράς με το χαρακτήρα null (`'\0'`), διευκολύνοντας έτσι τη χρήση της.

Από την άλλη πλευρά, ένα αλφαριθμητικό C-string είναι ένας πίνακας χαρακτήρων σε γλώσσα C, ο οποίος τερματίζεται με τον ειδικό χαρακτήρα null (`'\0'`). Στην C++, οι C-strings χρησιμοποιούνται συχνά για λόγους συμβατότητας ή απόδοσης, αλλά απαιτούν προσεκτικό χειρισμό της μνήμης και της διαχείρισης του τερματισμού.

**Διαφορές:**

- **Διαχείριση Μνήμης:** Η `std::string` διαχειρίζεται αυτόματα τη μνήμη της, ενώ οι C-strings απαιτούν χειροκίνητη διαχείριση.
- **Λειτουργίες:** Η `std::string` προσφέρει πλούσιο σύνολο μεθόδων για επεξεργασία συμβολοσειρών, ενώ οι C-strings απαιτούν χρήση συναρτήσεων από τη βιβλιοθήκη `<cstring>`.
- **Ασφάλεια:** Η χρήση της `std::string` μειώνει τον κίνδυνο λαθών μνήμης, ενώ οι C-strings είναι πιο επιρρεπείς σε σφάλματα λόγω λανθασμένης διαχείρισης.

## ✅161. Αναλύστε τη χρήση των πινάκων χαρακτήρων string στον προγραμματισμό με C++.

Στην C++, οι πίνακες χαρακτήρων (C-strings) χρησιμοποιούνται για την αναπαράσταση αλφαριθμητικών δεδομένων. Ένας πίνακας χαρακτήρων είναι ένας πίνακας τύπου `char` που τερματίζεται με τον χαρακτήρα null (`'\0'`). Αυτή η μορφή αναπαράστασης αλφαριθμητικών προέρχεται από τη γλώσσα C και είναι χρήσιμη σε καταστάσεις όπου απαιτείται συμβατότητα με παλαιότερο κώδικα ή όταν απαιτείται άμεσος έλεγχος της μνήμης.

**Χρήση:**

```cpp
#include <iostream>

int main() {
    char greeting[] = "Hello, World!";
    std::cout << greeting << std::endl;
    return 0;
}
```

## ✅162. Δημιουργήστε σε C++ ένα πρόγραμμα το οποίο θα δέχεται από τον χρήστη ένα αριθμό και θα επιστρέφει ως τιμή το παραγοντικό του αριθμού. Χρησιμοποιήστε συναρτήσεις αναδρομής.Παράδειγμα το παραγοντικό του 7! είναι:5040 (1*2*3*4*5*6*7). Γενικά:Ν!=(1*2*3...*Ν) και 0!=1

```cpp
#include <iostream>

// Αναδρομική συνάρτηση για τον υπολογισμό του παραγοντικού
long long factorial(int n) {
    if (n <= 1)
        return 1;
    else
        return n * factorial(n - 1);
}

int main() {
    int number;
    std::cout << "Εισάγετε έναν αριθμό: ";
    std::cin >> number;

    if (number < 0)
        std::cout << "Το παραγοντικό ορίζεται μόνο για μη αρνητικούς αριθμούς." << std::endl;
    else
        std::cout << "Το παραγοντικό του " << number << " είναι: " << factorial(number) << std::endl;

    return 0;
}
```

## ✅163. Δημιουργήστε το πρόγραμμα εύρεσης λέξης string σε C++. Το πρόγραμμα δημιουργεί δύο πίνακες string που ο πρώτος περιέχει την πρόταση «C++ is an object oriented Language and is a superset of C». Ο δεύτερος περιέχει την λέξη «is». Το πρόγραμμα πρέπει να ψάχνει στον πρώτο πίνακα να βρει εάν υπάρχει η λέξη που περιέχεται στο δεύτερο πίνακα και να επιστρέφει τη θέση στην οποία βρίσκεται καθώς και πόσες φορές επαναλαμβάνεται.

```cpp
#include <iostream>
#include <string>
#include <vector>

int main() {
    std::string sentence = "C++ is an object oriented Language and is a superset of C";
    std::string word = "is";
    std::vector<size_t> positions;
    size_t pos = sentence.find(word, 0);

    while (pos != std::string::npos) {
        positions.push_back(pos);
        pos = sentence.find(word, pos + 1);
    }

    if (!positions.empty()) {
        std::cout << "Η λέξη '" << word << "' βρέθηκε στις θέσεις: ";
        for (size_t position : positions)
            std::cout << position << " ";
        std::cout << "\nΕπαναλαμβάνεται " << positions.size() << " φορές." << std::endl;
    } else {
        std::cout << "Η λέξη '" << word << "' δεν βρέθηκε στην πρόταση." << std::endl;
    }

    return 0;
}
```

## ✅164. Γράψτε δυο συναρτήσεις που θα υπολογίζουν τον Μέγιστο Κοινό Διαιρέτη (ΜΚΔ) και το Ελάχιστο κοινό πολλαπλάσιο (ΕΚΠ) δυο ακέραιων αριθμών. ΜΚΔ είναι ο μεγαλύτερος από τους κοινούς διαιρέτες δηλαδή τους αριθμούς που τους διαιρούν ακριβώς. Κοινό πολλαπλάσιο (Κ.Π.) δύο ή περισσοτέρων αριθμών λέγεται κάθε ακέραιος, εκτός από το 0, που το συναντάμε κοινό στα πολλαπλάσια των δύο αριθμών. Ο μικρότερος από τα κοινά πολλαπλάσια κάποιων ακέραιων αριθμών λέγεται Ελάχιστο Κοινό Πολλαπλάσιο (Ε.Κ.Π.).

```cpp
#include <iostream>

// Συνάρτηση για τον υπολογισμό του ΜΚΔ με τον αλγόριθμο του Ευκλείδη
int υπολογισμόςΜΚΔ(int a, int b) {
    while (b != 0) {
        int υπόλοιπο = a % b;
        a = b;
        b = υπόλοιπο;
    }
    return a;
}

// Συνάρτηση για τον υπολογισμό του ΕΚΠ
int υπολογισμόςΕΚΠ(int a, int b) {
    return std::abs(a * b) / υπολογισμόςΜΚΔ(a, b);
}

int main() {
    int αριθμός1, αριθμός2;
    std::cout << "Εισάγετε τον πρώτο αριθμό: ";
    std::cin >> αριθμός1;
    std::cout << "Εισάγετε τον δεύτερο αριθμό: ";
    std::cin >> αριθμός2;

    int ΜΚΔ = υπολογισμόςΜΚΔ(αριθμός1, αριθμός2);
    int ΕΚΠ = υπολογισμόςΕΚΠ(αριθμός1, αριθμός2);

    std::cout << "Μέγιστος Κοινός Διαιρέτης (ΜΚΔ): " << ΜΚΔ << std::endl;
    std::cout << "Ελάχιστο Κοινό Πολλαπλάσιο (ΕΚΠ): " << ΕΚΠ << std::endl;

    return 0;
}
```

## ✅165. Αναλύστε τους όρους "κληρονομικότητα" και "πολυεπίπεδη κληρονομικότητα" (multi- level inheritance). Δώστε παραδείγματα σε C++ κώδικα.

**Κληρονομικότητα**: Η κληρονομικότητα είναι η ικανότητα μιας κλάσης να κληρονομεί χαρακτηριστικά (μεταβλητές) και μεθόδους (συναρτήσεις) από μια άλλη κλάση. Αυτό επιτρέπει την επαναχρησιμοποίηση του κώδικα και την ευκολία στη συντήρηση.

**Παράδειγμα σε C++**:
```cpp
#include <iostream>
using namespace std;

class Ζώο {
public:
    void τρέξε() {
        cout << "Το ζώο τρέχει." << endl;
    }
};

class Σκύλος : public Ζώο {  // Κληρονομεί από την κλάση Ζώο
public:
    void γάβγισε() {
        cout << "Ο σκύλος γαβγίζει." << endl;
    }
};

int main() {
    Σκύλος σκύλος;
    σκύλος.τρέξε();  // Κλήση μεθόδου από την κλάση Ζώο
    σκύλος.γάβγισε(); // Κλήση μεθόδου από την κλάση Σκύλος
    return 0;
}
Έξοδος:

Το ζώο τρέχει.
Ο σκύλος γαβγίζει.
```
**Πολυεπίπεδη Κληρονομικότητα:** Η πολυεπίπεδη κληρονομικότητα είναι η διαδικασία στην οποία μια κλάση κληρονομεί από μια άλλη κλάση, η οποία με τη σειρά της κληρονομεί από μια τρίτη κλάση. Αυτό δημιουργεί μια ιεραρχία κλάσεων, και κάθε κλάση μπορεί να προσθέσει τις δικές της μεθόδους ή χαρακτηριστικά.

**Παράδειγμα σε C++**
```cpp 
#include <iostream>
using namespace std;

class Ζώο {
public:
    void τρέξε() {
        cout << "Το ζώο τρέχει." << endl;
    }
};

class Σκύλος : public Ζώο {  // Κληρονομεί από την κλάση Ζώο
public:
    void γάβγισε() {
        cout << "Ο σκύλος γαβγίζει." << endl;
    }
};

class Λύκος : public Σκύλος {  // Κληρονομεί από την κλάση Σκύλος
public:
    void ουρλιάξτε() {
        cout << "Ο λύκος ουρλιάζει." << endl;
    }
};

int main() {
    Λύκος λύκος;
    λύκος.τρέξε();  // Κλήση μεθόδου από την κλάση Ζώο
    λύκος.γάβγισε(); // Κλήση μεθόδου από την κλάση Σκύλος
    λύκος.ουρλιάξτε(); // Κλήση μεθόδου από την κλάση Λύκος
    return 0;
}
Έξοδος:

Το ζώο τρέχει.
Ο σκύλος γαβγίζει.
Ο λύκος ουρλιάζει.
```

## ✅166. Ποια χρωματικά μοντέλα υπάρχουν; Δώστε μια σύντομη περιγραφή για τη λειτουργία τους και για τα χρώματα που χρησιμοποιούνται στο κάθε ένα.

**Χρωματικά Μοντέλα:**

1. **RGB (Red, Green, Blue):**
   - **Περιγραφή:** Το μοντέλο RGB βασίζεται στην προσθετική χρωματοθεωρία, όπου τα χρώματα παράγονται συνδυάζοντας τρεις βασικές αποχρώσεις φωτός: κόκκινο, πράσινο και μπλε.
   - **Λειτουργία:** Με την ανάμειξη αυτών των τριών χρωμάτων σε διάφορες εντάσεις, μπορούν να δημιουργηθούν εκατομμύρια διαφορετικές αποχρώσεις.
   - **Χρώματα:** Κόκκινο, Πράσινο, Μπλε.

2. **CMYK (Cyan, Magenta, Yellow, Key/Black):**
   - **Περιγραφή:** Το μοντέλο CMYK χρησιμοποιείται στη διαδικασία εκτύπωσης και βασίζεται στην αφαιρετική χρωματοθεωρία.
   - **Λειτουργία:** Ξεκινώντας από ένα λευκό υπόστρωμα, τα χρώματα αφαιρούνται μέσω της εφαρμογής μελανιών, απορροφώντας συγκεκριμένα μήκη κύματος του φωτός.
   - **Χρώματα:** Κυανό, Ματζέντα, Κίτρινο, Μαύρο.

3. **HSV (Hue, Saturation, Value):**
   - **Περιγραφή:** Το μοντέλο HSV επικεντρώνεται στην αντίληψη του ανθρώπινου ματιού για το χρώμα, χωρίζοντας το σε απόχρωση, κορεσμό και φωτεινότητα.
   - **Λειτουργία:** Περιγράφει τα χρώματα με βάση την απόχρωση (τύπος χρώματος), τον κορεσμό (ένταση του χρώματος) και τη φωτεινότητα (πόσο φωτεινό ή σκοτεινό είναι το χρώμα).
   - **Χρώματα:** Όλα τα χρώματα μπορούν να αναπαρασταθούν μέσω αυτών των τριών παραμέτρων.

4. **HSL (Hue, Saturation, Lightness):**
   - **Περιγραφή:** Παρόμοιο με το HSV, το μοντέλο HSL περιγράφει τα χρώματα με βάση την απόχρωση, τον κορεσμό και τη φωτεινότητα, αλλά με διαφορετική προσέγγιση στη φωτεινότητα.
   - **Λειτουργία:** Εστιάζει στη δημιουργία χρωμάτων που είναι πιο κοντά στην ανθρώπινη αντίληψη, με τη φωτεινότητα να αναφέρεται στην ποσότητα λευκού ή μαύρου που αναμιγνύεται με το χρώμα.
   - **Χρώματα:** Όλα τα χρώματα μπορούν να αναπαρασταθούν μέσω αυτών των τριών παραμέτρων.

5. **Lab (CIELAB):**
   - **Περιγραφή:** Το μοντέλο Lab είναι ένα χρωματικό μοντέλο που βασίζεται στην ανθρώπινη αντίληψη του χρώματος, προσπαθώντας να είναι ανεξάρτητο από την οθόνη ή την εκτυπωτική διαδικασία.
   - **Λειτουργία:** Χρησιμοποιεί τρεις αξόνες: L* για τη φωτεινότητα, a* για τον άξονα από πράσινο σε κόκκινο και b* για τον άξονα από μπλε σε κίτρινο.
   - **Χρώματα:** Όλα τα χρώματα μπορούν να αναπαρασταθούν μέσω αυτών των τριών αξόνων.

6. **XYZ (CIE 1931 Color Space):**
   - **Περιγραφή:** Το μοντέλο XYZ είναι ένα από τα πρώτα χρωματικά μοντέλα που αναπτύχθηκαν από την CIE (International Commission on Illumination) και χρησιμοποιείται ως βάση για άλλα μοντέλα.
   - **Λειτουργία:** Βασίζεται σε τρεις φασματικές συνιστώσες φωτός, X, Y και Z, που αντιστοιχούν σε συγκεκριμένες περιοχές του ορατού φάσματος.
   - **Χρώματα:** Όλα τα χρώματα μπορούν να αναπαρασταθούν μέσω αυτών των τριών συνιστωσών.

7. **Pantone:**
   - **Περιγραφή:** Το σύστημα Pantone είναι ένα χρωματικό σύστημα που χρησιμοποιείται κυρίως στη γραφιστική και την εκτύπωση για την ακριβή αναπαραγωγή χρωμάτων.
   - **Λειτουργία:** Περιλαμβάνει μια προκαθορισμένη παλέτα χρωμάτων με μοναδικούς κωδικούς, επιτρέποντας την ακριβή επικοινωνία και αναπαραγωγή χρωμάτων.
   - **Χρώματα:** Περιλαμβάνει χιλιάδες μοναδικά χρώματα με συγκεκριμένες συνθέσεις.

## ✅167. Ποιο χρώμα ονομάζουμε πρωτεύον συμπληρωματικό και ποια δευτερεύοντα; Δώστε δύο (2) παραδείγματα, καθώς και αιτιολογία για το λόγο χρήσης τους.

**Πρωτεύον συμπληρωματικά χρώματα**: Τα χρώματα που, όταν συνδυαστούν, παράγουν λευκό φως. Στο RGB μοντέλο, αυτά είναι το κόκκινο (Red), το πράσινο (Green) και το μπλε (Blue). Στο CMY μοντέλο, τα πρωτεύοντα συμπληρωματικά είναι το κυανό (Cyan), το ματζέντα (Magenta) και το κίτρινο (Yellow).

**Δευτερεύοντα χρώματα**: Δημιουργούνται με την ανάμειξη δύο πρωτευόντων χρωμάτων. Στο RGB μοντέλο, τα δευτερεύοντα είναι το κίτρινο (Red + Green), το ματζέντα (Red + Blue) και το κυανό (Green + Blue). Στο CMY μοντέλο, τα δευτερεύοντα είναι το κόκκινο (Magenta + Yellow), το πράσινο (Cyan + Yellow) και το μπλε (Cyan + Magenta).

**Παραδείγματα**:

1. **RGB μοντέλο**:
   - *Πρωτεύοντα*: Κόκκινο, Πράσινο, Μπλε.
   - *Δευτερεύοντα*: Κίτρινο (Red + Green), Ματζέντα (Red + Blue), Κυανό (Green + Blue).

2. **CMY μοντέλο**:
   - *Πρωτεύοντα*: Κυανό, Ματζέντα, Κίτρινο.
   - *Δευτερεύοντα*: Κόκκινο (Magenta + Yellow), Πράσινο (Cyan + Yellow), Μπλε (Cyan + Magenta).

Η κατανόηση αυτών των χρωμάτων είναι θεμελιώδης για την επεξεργασία και αναπαραγωγή εικόνας σε διάφορα μέσα.

## ✅168. Ποια είναι τα χαρακτηριστικά μιας ψηφιογραφικής εικόνας (bitmap);

- **Διαστάσεις**: Ύψος και πλάτος σε pixels.
- **Χρώμα**: Καθορίζεται από το βάθος χρώματος (color depth), π.χ., 24-bit για 16,7 εκατομμύρια χρώματα.
- **Ανάλυση**: Πυκνότητα των pixels, επηρεάζει την ποιότητα.
- **Μέγεθος αρχείου**: Εξαρτάται από τις διαστάσεις, το βάθος χρώματος και την ύπαρξη συμπίεσης.

## ✅169. Ποιο είναι το μέγεθος μίας ασυμπίεστης εικόνας bitmap (σε bytes), διαστάσεων 100x100 pixels, αν είναι
:α) true-color; β) grayscale;

**α) True-color:**

- **Διαστάσεις:** 100 x 100 pixels
- **Βάθος χρώματος:** 24 bits (8 bits για κάθε κανάλι RGB)
- **Μέγεθος εικόνας:** 100 x 100 x 24 bits = 240.000 bits = 30.000 bytes

**β) Grayscale:**

- **Διαστάσεις:** 100 x 100 pixels
- **Βάθος χρώματος:** 8 bits (256 αποχρώσεις του γκρι)
- **Μέγεθος εικόνας:** 100 x 100 x 8 bits = 80.000 bits = 10.000 bytes

## ✅170. Να αναφέρετε τέσσερις μορφές αρχείων ψηφιογραφικών εικόνων (bitmap) και πού χρησιμοποιούνται, συνήθως, αντίστοιχα.

- **JPEG (Joint Photographic Experts Group):** Χρησιμοποιείται ευρέως για φωτογραφίες και εικόνες με πολλά χρώματα, λόγω της δυνατότητας συμπίεσης με απώλειες που μειώνει το μέγεθος του αρχείου.

- **PNG (Portable Network Graphics):** Προτιμάται για εικόνες με διαφάνεια και γραφικά web, καθώς υποστηρίζει συμπίεση χωρίς απώλειες και διαφανή backgrounds.

- **BMP (Bitmap):** Χρησιμοποιείται κυρίως σε περιβάλλοντα Windows για απλές, ασυμπίεστες εικόνες, διατηρώντας την πλήρη ποιότητα, αλλά με μεγάλο μέγεθος αρχείου.

- **GIF (Graphics Interchange Format):** Κατάλληλο για απλά γραφικά και κινούμενες εικόνες (animations) με περιορισμένο αριθμό χρωμάτων (έως 256), λόγω της υποστήριξης διαδοχικών καρέ.

## ✅171. Ποια η χρησιμότητα μάσκας κατά την επεξεργασία εικόνας;

Η μάσκα χρησιμοποιείται για την επιλογή συγκεκριμένων περιοχών μιας εικόνας, επιτρέποντας την εφαρμογή επεξεργασιών μόνο σε αυτές τις περιοχές χωρίς να επηρεάζεται το υπόλοιπο της εικόνας. Αυτό επιτρέπει την ακριβή επεξεργασία και την προστασία τμημάτων της εικόνας από ανεπιθύμητες αλλαγές.

## ✅172. Τι είναι πρότυπο συμπίεσης εικόνας JPEG; Ποια είναι τα μειονεκτήματα και τα πλεονεκτήματα του;

Το JPEG είναι ένα πρότυπο συμπίεσης με απώλειες που μειώνει το μέγεθος των αρχείων εικόνας, διατηρώντας παράλληλα ικανοποιητική ποιότητα.

- **Πλεονεκτήματα:**
  - Μείωση μεγέθους αρχείου, εξοικονομώντας χώρο αποθήκευσης και εύρος ζώνης.
  - Ευρέως υποστηριζόμενο από λογισμικό και συσκευές.

- **Μειονεκτήματα:**
  - Απώλεια ποιότητας λόγω της συμπίεσης με απώλειες, ιδιαίτερα μετά από πολλαπλές αποθηκεύσεις.
  - Μη κατάλληλο για εικόνες με διαφάνεια ή με κείμενο και γραφικά με έντονες γραμμές, λόγω πιθανής εμφάνισης artifacts.

## ✅173. Τι ονομάζουμε Bit Depth, τι ονομάζουμε Color Depth και ποιες κατηγορίες εικόνων γνωρίζετε με βάση το bit depth;

- **Bit Depth:** Αναφέρεται στον αριθμό των bits που χρησιμοποιούνται για την αναπαράσταση της πληροφορίας χρώματος ενός pixel.

- **Color Depth:** Αναφέρεται στον αριθμό των διαφορετικών χρωμάτων που μπορεί να εμφανίσει μια εικόνα, καθοριζόμενο από το bit depth.

**Κατηγορίες εικόνων με βάση το bit depth:**

- **1-bit:** Δύο χρώματα (συνήθως ασπρόμαυρο).

- **8-bit:** Έως 256 χρώματα ή αποχρώσεις του γκρι.

- **24-bit:** Περίπου 16,7 εκατομμύρια χρώματα (true color).

## ✅174. Ποια είναι τα πλεονεκτήματα και τα μειονεκτήματα των ψηφιογραφικών εικόνων bitmap;

- **Πλεονεκτήματα:**
  - Ακριβής αναπαράσταση λεπτομερειών και χρωμάτων.
  - Ευρεία υποστήριξη από λογισμικό επεξεργασίας εικόνας.

- **Μειονεκτήματα:**
  - Μεγάλο μέγεθος αρχείου, ειδικά σε υψηλές αναλύσεις.
  - Απώλεια ποιότητας κατά την κλιμάκωση, οδηγώντας σε pixelation.

## ✅175. Αναφέρετε τους τρόπους λήψης και ψηφιοποίησης ψηφιογραφικής εικόνας.

- **Ψηφιακές φωτογραφικές μηχανές:** Άμεση λήψη ψηφιακών εικόνων.

- **Σαρωτές (scanners):** Μετατροπή φυσικών εικόνων ή εγγράφων σε ψηφιακή μορφή.

- **Οθόνες αφής ή γραφίδες:** Δημιουργία ψηφιακών σχεδίων ή γραφικών.

## ✅176. Με ποια εντολή δημιουργούμε, διαγράφουμε έναν πίνακα και με ποια εντολή διαγράφουμε τα δεδομένα ενός πίνακα;

- **Δημιουργία πίνακα:**
  ```sql
  CREATE TABLE όνομα_πίνακα (
    στήλη1 τύπος_δεδομένων,
    στήλη2 τύπος_δεδομένων,
    ...
  );
  ```
**Διαγραφή πίνακα:**
```sql
DROP TABLE όνομα_πίνακα;
```

**Διαγραφή δεδομένων πίνακα:**

- Χρήση DELETE:
```sql
DELETE FROM όνομα_πίνακα;
```
- Αυτή η εντολή διαγράφει όλες τις εγγραφές του πίνακα, αλλά διατηρεί τη δομή του.

**Χρήση TRUNCATE:**
```sql
TRUNCATE TABLE όνομα_πίνακα;
```
- Αυτή η εντολή διαγράφει όλες τις εγγραφές του πίνακα και επαναφέρει τον μετρητή ταυτότητας (identity).

## ✅177. Τί εννοούμε όταν αναφερόμαστε στις όψεις; Ορίστε την "όψη" στην SQL.

Μια **όψη** (view) στην SQL είναι ένα εικονικό σύνολο αποτελεσμάτων που προκύπτει από ένα ερώτημα σε έναν ή περισσότερους πίνακες. Δεν αποθηκεύει δεδομένα από μόνη της, αλλά παρέχει μια προσαρμοσμένη προβολή των δεδομένων, διευκολύνοντας την πρόσβαση και την ασφάλεια.

## ✅178. Τί είναι ένα ευρετήριο (index); Δώστε ένα παράδειγμα με χρήση κώδικα SQL.

Ένα **ευρετήριο** (index) είναι μια δομή δεδομένων που βελτιώνει την ταχύτητα ανάκτησης εγγραφών από έναν πίνακα, δημιουργώντας ένα δείκτη στις τιμές μιας ή περισσότερων στηλών.

*Παράδειγμα δημιουργίας ευρετηρίου:*

```sql
CREATE INDEX idx_Όνομα
ON Επαφές (Όνομα);
```

## ✅179. Ποια είναι η χρήση των stored procedures; Δώστε δύο παραδείγματα για τη δομή τους.

Οι stored procedures είναι προκαθορισμένες συναρτήσεις αποθηκευμένες στη βάση δεδομένων που επιτρέπουν την εκτέλεση μιας σειράς εντολών SQL. Χρησιμοποιούνται για αυτοματοποίηση εργασιών, βελτίωση της απόδοσης και ενίσχυση της ασφάλειας.

**Παράδειγμα 1: Stored procedure χωρίς παραμέτρους:**
```sql
CREATE PROCEDURE ΕμφάνισηΕπαφών()
BEGIN
  SELECT * FROM Επαφές;
END;
```

**Παράδειγμα 2: Stored procedure με παραμέτρους:**
```sql
CREATE PROCEDURE ΕύρεσηΕπαφής(IN κωδικός CHAR(3))
BEGIN
  SELECT * FROM Επαφές WHERE Κωδικός = κωδικός;
END;
```

## ✅180. Με τη χρήση κώδικα SQL δημιουργήστε ένα πίνακα ο οποίος στην πρώτη στήλη με τίτλο "Κωδικός" και τιμές 053, 109, 027, στη δεύτερη την ιδιότητα με τίτλο: "Όνομα" και τιμές: Παπαδόπουλου, Χατζηκώστα, Καρανίκα, στη τρίτη με τίτλο "Τηλέφωνο" και τιμές 21041111, 21033099, 21023322. Η κάθε στήλη θα έχει και τον αντίστοιχο τύπο δεδομένων.

```sql
CREATE TABLE Επαφές (
  Κωδικός CHAR(3),
  Όνομα VARCHAR(50),
  Τηλέφωνο CHAR(8)
);

INSERT INTO Επαφές (Κωδικός, Όνομα, Τηλέφωνο) VALUES
('053', 'Παπαδόπουλου', '21041111'),
('109', 'Χατζηκώστα', '21033099'),
('027', 'Καρανίκα', '21023322');
```

## ✅181. Τί είναι τα ψευδώνυμα και πού τα χρησιμοποιούμε; Εξηγήστε τον ακόλουθο κώδικα:

```sql
SELECT E.NAME, S.NAME 
FROM EMPLOYEE E, EMPLOYEE S 
WHERE E.SUPERSN=S.SN
```
**Ψευδώνυμα (Aliases)**: Είναι εναλλακτικά ονόματα που δίνονται σε πίνακες ή στήλες για ευκολία και σαφήνεια στα ερωτήματα SQL.

`SELECT E.NAME, S.NAME`: Επιστρέφει τα ονόματα των υπαλλήλων και των επόπτων τους.
`EMPLOYEE E, EMPLOYEE S`: Δημιουργούνται δύο ψευδώνυμα για τον πίνακα EMPLOYEE, το E και το S.
`E.SUPERSN = S.SN`: Η συνθήκη συνένωσης που αντιστοιχίζει τον επόπτη (SUPERSN) ενός υπαλλήλου με τον αριθμό κοινωνικής ασφάλισης (SN) ενός άλλου.


## ✅182. Αν στο αποτέλεσμα ενός ερωτήματος πάρουμε ως απάντηση πολλαπλές πλειάδες πώς τις εξαλείφουμε; Δώστε ένα παράδειγμα σε SQL.

```sql
SELECT DISTINCT column_name FROM table_name;
```

## ✅183. Πώς επιτυγχάνουμε τη διάταξη των αποτελεσμάτων του ερωτήματος; Δώστε ένα παράδειγμα όπου θα επιλέγεται από ένα πίνακα το ονοματεπώνυμο ενός σπουδαστή και θα εμφανίζονται τα αποτελέσματα ταξινομημένα κατά αύξουσα αλφαβητική σειρά στο όνομα και κατά φθίνουσα αλφαβητική σειρά στο επώνυμο.

```sql
SELECT first_name, last_name 
FROM students 
ORDER BY first_name ASC, last_name DESC;
```

## ✅184. Εξηγήστε τον ακόλουθο κώδικα:

```sql
SELECT ΝΑΜΕ
FROM WORKER W
WHERE EXISTS
(SELECT * FROM CONNECT C WHERE ID=C.CONNECT_ID AND W.Name=C.CONNECT_Name);
```
1. **`SELECT NAME FROM WORKER W`**:  
   Επιλέγει το πεδίο `NAME` από τον πίνακα `WORKER`, τον οποίο αναφερόμαστε με το alias `W`.

2. **`WHERE EXISTS`**:  
   Η `EXISTS` είναι μια υποερώτηση (subquery) που επιστρέφει `TRUE` αν επιστρέφει τουλάχιστον μία γραμμή. Αν η υποερώτηση επιστρέψει γραμμές, τότε η κεντρική ερώτηση θα επιλέξει τις γραμμές του πίνακα `WORKER` όπου η συνθήκη ισχύει.

3. **`(SELECT * FROM CONNECT C WHERE ID=C.CONNECT_ID AND W.Name=C.CONNECT_Name)`**:  
   Εδώ, η υποερώτηση επιλέγει όλα τα πεδία από τον πίνακα `CONNECT`, τον οποίο αναφερόμαστε με το alias `C`.
   - Η υποερώτηση ψάχνει για καταχωρήσεις στον πίνακα `CONNECT` όπου το πεδίο `ID` από τον πίνακα `WORKER` (με alias `W`) είναι ίσο με το `C.CONNECT_ID` και το `W.Name` είναι ίσο με το `C.CONNECT_Name`.

4. **Συνολική Λειτουργία**:  
   Η κεντρική ερώτηση επιστρέφει τα ονόματα (`NAME`) από τον πίνακα `WORKER` όπου υπάρχει τουλάχιστον μία εγγραφή στον πίνακα `CONNECT` που πληροί τις συνθήκες:
   - Η τιμή `ID` του εργαζομένου στον πίνακα `WORKER` είναι ίση με το πεδίο `CONNECT_ID` του πίνακα `CONNECT`.
   - Η τιμή `Name` του εργαζομένου στον πίνακα `WORKER` είναι ίση με το πεδίο `CONNECT_Name` του πίνακα `CONNECT`.

### Σκοπός:
Αυτή η ερώτηση επιλέγει τα ονόματα των εργαζομένων που έχουν μια αντίστοιχη εγγραφή στον πίνακα `CONNECT` με βάση τα κριτήρια σύνδεσης.

## ✅185. Δώστε 3 τύπους συνένωσης στην SQL (όχι το απλό JOIN) και για κάθε έναν από αυτούς δώστε ένα παράδειγμα με χρήση κώδικα SQL.

- LEFT JOIN: Επιστρέφει όλα τα δεδομένα από τον αριστερό πίνακα και τα αντίστοιχα από τον δεξιό, αν υπάρχουν.
```sql
SELECT students.name, courses.course_name
FROM students
LEFT JOIN courses ON students.course_id = courses.id;
```

- RIGHT JOIN: Επιστρέφει όλα τα δεδομένα από τον δεξιό πίνακα και τα αντίστοιχα από τον αριστερό, αν υπάρχουν.
```sql
SELECT students.name, courses.course_name
FROM students
RIGHT JOIN courses ON students.course_id = courses.id;
```

- FULL JOIN: Επιστρέφει όλα τα δεδομένα και από τους δύο πίνακες, αντιστοιχίζοντας όπου είναι δυνατόν.
```sql
SELECT students.name, courses.course_name
FROM students
FULL JOIN courses ON students.course_id = courses.id;
```

## ✅186. Αναλύστε τη χρήση των συναρτήσεων στον αντικειμενοστραφή προγραμματισμό. Δώστε παράδειγμα πως οι συναρτήσεις καλούνται ως μηνύματα σύνδεσης μεταξύ τάξεων.

Στον αντικειμενοστραφή προγραμματισμό (OOP), οι **συναρτήσεις** (ή **μέθοδοι**) είναι μπλοκ κώδικα που εκτελούν συγκεκριμένες ενέργειες και συνδέονται με αντικείμενα (instances) κλάσεων. Αυτές οι μέθοδοι:

- **Ορίζουν συμπεριφορές**: Καθορίζουν τις ενέργειες που μπορεί να εκτελέσει ένα αντικείμενο.
- **Επιτρέπουν αλληλεπίδραση**: Μέσω της κλήσης μεθόδων, τα αντικείμενα μπορούν να αλληλεπιδρούν μεταξύ τους, ανταλλάσσοντας δεδομένα και ενεργώντας ως μονάδες σε ένα σύστημα.

### Κλήση Συναρτήσεων ως Μηνύματα Σύνδεσης μεταξύ Τάξεων

Στον OOP, η κλήση μεθόδων μεταξύ αντικειμένων λειτουργεί ως **μηνύματα** που επιτρέπουν την επικοινωνία και συνεργασία μεταξύ τους. Όταν ένα αντικείμενο καλεί μια μέθοδο σε άλλο αντικείμενο, στέλνει ένα "μήνυμα" ζητώντας του να εκτελέσει μια συγκεκριμένη ενέργεια.

**Παράδειγμα:**

```java
// Κλάση Car που αντιπροσωπεύει ένα αυτοκίνητο
class Car {
    private String model;
    private int speed;

    public Car(String model) {
        this.model = model;
        this.speed = 0;
    }

    public void accelerate(int increment) {
        speed += increment;
        System.out.println(model + " επιταχύνει κατά " + increment + " km/h. Τρέχουσα ταχύτητα: " + speed + " km/h.");
    }

    public void brake(int decrement) {
        speed -= decrement;
        if (speed < 0) speed = 0;
        System.out.println(model + " επιβραδύνεται κατά " + decrement + " km/h. Τρέχουσα ταχύτητα: " + speed + " km/h.");
    }
}
// Κλάση Driver που αντιπροσωπεύει έναν οδηγό
class Driver {
    private String name;

    public Driver(String name) {
        this.name = name;
    }

    public void drive(Car car) {
        System.out.println(name + " ξεκινάει οδήγηση.");
        car.accelerate(50); // Κλήση μεθόδου accelerate του αντικειμένου Car
        car.brake(20);       // Κλήση μεθόδου brake του αντικειμένου Car
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car("Toyota");
        Driver driver = new Driver("Γιάννης");

        driver.drive(myCar); // Ο οδηγός οδηγεί το αυτοκίνητο
    }
}
```

## ✅187. Ποια από τα ακόλουθα είναι σωστά και ποια είναι λάθος; Αιτιολογήστε την απάντησή σας για κάθε περίπτωση.

1. Person p1 = new Student(); ΣΩΣΤΟ ✅   
- Η Student είναι υποκλάση της Person, άρα μπορεί να ανατεθεί σε μεταβλητή τύπου Person.

2. Person p2 = new PhDStudent(); ΣΩΣΤΟ ✅ 
- Η PhDStudent είναι υποκλάση της Student, η οποία είναι υποκλάση της Person. 
- Άρα μπορεί να αποθηκευτεί σε μεταβλητή τύπου Person.

3. PhDStudent phd1 = new Student(); ΛΑΘΟΣ ❌ 
- Η Student είναι **ανώτερη** στην ιεραρχία από την PhDStudent. 
- Δεν μπορεί να ανατεθεί ένας Student σε μια μεταβλητή τύπου PhDStudent, γιατί μπορεί να μην έχει τα χαρακτηριστικά της.

4. Prof t1 = new Person(); ΛΑΘΟΣ ❌ 
 - Η Prof είναι **διαφορετική** υποκλάση της Person, αλλά η Person **δεν είναι υποκλάση της Prof**. 
 - Δεν μπορεί να γίνει εκχώρηση από γονική σε υποκλάση χωρίς casting.

5. Student s1 = new PhDStudent(); ΣΩΣΤΟ ✅ 
 - Η PhDStudent είναι **υποκλάση** της Student, άρα μπορεί να αποθηκευτεί σε μεταβλητή τύπου Student.

## ✅188. Γιατί δεν μπορούμε να αφαιρέσουμε πεδία από μια subclass ενώ μπορούμε να προσθέσουμε;

- Η υποκλάση πρέπει να διατηρεί τη συμβατότητα με την υπερκλάση.
- Αν αφαιρούσαμε πεδία, θα σπάγαμε την αρχή αντικατάστασης Liskov.
- Προσθέτοντας πεδία δεν επηρεάζεται η υπερκλάση.

## ✅189. Ποια είναι η διαφορά μεταξύ ενός Frame και ενός Dialog;

- **Frame**: Ανεξάρτητο παράθυρο (JFrame).
- **Dialog**: Δευτερεύον παράθυρο που εξαρτάται από ένα Frame (JDialog).

## ✅190. Ποια είναι η διαφορά μεταξύ ενός αντικείμενου Menu και ενός MenuBar (σε Java);

- **MenuBar**: Περιέχει πολλά Menu.
- **Menu**: Περιέχει πολλές επιλογές (MenuItem).

## ✅191. Ποια είναι η διαφορά μεταξύ ενός Menu και ενός MenuItem (σε Java);

- **Menu**: Αναπτυσσόμενο μενού.
- **MenuItem**: Μία επιλογή μέσα σε ένα Menu.

## ✅192. Ποια είναι η διαφορά μεταξύ της επανεκκίνησης και της επαναφόρτωσης ενός Java applet;

- **Restart**: Σταματά και ξεκινά από την αρχή.
- **Reload**: Φορτώνει ξανά, διατηρώντας δεδομένα.

## ✅193. Τι είναι οι constructors στην JAVA; Δώστε ένα παράδειγμα.

- Ειδικές μέθοδοι που εκτελούνται κατά τη δημιουργία ενός αντικειμένου.

**Παράδειγμα:**

```java
class Car {
    String model;
    public Car(String model) { this.model = model; }
}
```

## ✅194. Να αναφέρετε από ποια μέρη αποτελείται η Java Virtual Machine και ποιες μεθόδους τρέχει.

- **Μέρη**:
  1. **Class Loader**: Φορτώνει τις κλάσεις στην JVM.
  2. **Runtime Memory**: Αποθηκεύει δεδομένα σε μνήμη (stack, heap, method area).
  3. **Execution Engine**: Εκτελεί bytecode.
  4. **Garbage Collector**: Διαχειρίζεται τη μνήμη και καθαρίζει τα ανεκμετάλλευτα αντικείμενα.
  
- **Μέθοδοι**: 
  1. **main()**: Η βασική μέθοδος εκκίνησης της εφαρμογής.
  2. **static methods**: Εκτελούνται χωρίς να απαιτούν δημιουργία αντικειμένου.

## ✅195. Ποιοι είναι οι τύποι μεταβλητών στην Java;

1. **Local Variables**: Ορισμένες μέσα σε μεθόδους.
2. **Instance Variables**: Ανήκουν σε αντικείμενα.
3. **Class (Static) Variables**: Ανήκουν στην κλάση και είναι κοινές για όλα τα αντικείμενα.
4. **Parameters**: Παράμετροι που περνάνε σε μεθόδους.

## ✅196. Τι κάνει το παρακάτω JAVA πρόγραμμα: 

```java
int j=5; 
int k=10;
long max=0; 
max=k>j?k:j;
```
1. **Αρχικοποίηση Μεταβλητών**:
   - `j = 5`
   - `k = 10`
   - `max = 0`

2. **Τελεστής Ανάθεσης Τριάδας**:
   - Η γραμμή `max = k > j ? k : j;` είναι μια συντομευμένη μορφή της δήλωσης `if-else`.
     - Αν η συνθήκη `k > j` είναι αληθής (10 > 5), τότε η `max` παίρνει την τιμή του `k` (δηλαδή 10).
     - Αν η συνθήκη ήταν ψευδής, η `max` θα έπαιρνε την τιμή του `j` (δηλαδή 5).

3. **Αποτέλεσμα**:
   - Επειδή η συνθήκη `k > j` είναι αληθής, η `max` θα πάρει την τιμή `10`.

**Τελικό Αποτέλεσμα**: Η μεταβλητή `max` θα έχει την τιμή `10`.

## ✅197. Ποιος ο ρόλος των εξαιρέσεων στα προγράμματα εισόδου / εξόδου; Δώστε δύο παραδείγματα σε JAVA.

Οι εξαιρέσεις χρησιμοποιούνται για να χειρίζονται σφάλματα που μπορεί να συμβούν κατά την εκτέλεση προγραμμάτων εισόδου/εξόδου, 
όπως π.χ. αν προσπαθήσουμε να ανοίξουμε ένα αρχείο που δεν υπάρχει ή αν προσπαθήσουμε να διαβάσουμε από μια κλειστή ροή δεδομένων. 
Βοηθούν στην αποφυγή του να καταρρεύσει το πρόγραμμα και παρέχουν δυνατότητες για αναφορά και χειρισμό των σφαλμάτων.

**Παραδείγματα:**

1. **Ανάγνωση από αρχείο που δεν υπάρχει**:

```java
   try {
       FileReader file = new FileReader("nonexistentfile.txt");
   } catch (FileNotFoundException e) {
       System.out.println("Αρχείο δεν βρέθηκε: " + e.getMessage());
   }
```
2. **Προσπάθεια να διαβάσουμε από κλειστή ροή**:
```java
try {
    BufferedReader reader = new BufferedReader(new FileReader("file.txt"));
    reader.close();
    reader.readLine(); // Ρίχνει εξαίρεση επειδή η ροή είναι κλειστή
} catch (IOException e) {
    System.out.println("Σφάλμα κατά την ανάγνωση: " + e.getMessage());
}
```

## ✅198. Δημιουργήστε σε JAVA το παιχνίδι κρεμάλα (hangman). O χρήστης εισάγει γράμματα τα οποία και συγκρίνονται με λέξεις που επιλέγονται τυχαία από έναν πίνακα με λέξεις string. Μηνύματα επιτυχίας ή αποτυχίας εμφανίζονται στο χρήστη και τον καθοδηγούν για το αποτέλεσμα. Για διευκόλυνσή σας τοποθετήστε στον πίνακα 5 διαφορετικές λέξεις και το πρόγραμμά σας μην επεκταθείτε στη δημιουργία GUI.

```java
import java.util.Scanner;
import java.util.Random;

public class HangmanGame {
    public static void main(String[] args) {
        String[] words = {"java", "python", "ruby", "javascript", "html"};
        Random rand = new Random();
        String wordToGuess = words[rand.nextInt(words.length)];
        char[] guessedWord = new char[wordToGuess.length()];
        for (int i = 0; i < guessedWord.length; i++) {
            guessedWord[i] = '_';
        }
        
        Scanner scanner = new Scanner(System.in);
        int attempts = 6;
        boolean wordGuessed = false;

        System.out.println("Welcome to Hangman!");
        
        while (attempts > 0 && !wordGuessed) {
            System.out.println("Current word: " + new String(guessedWord));
            System.out.print("Guess a letter: ");
            char guess = scanner.next().charAt(0);

            boolean correctGuess = false;
            for (int i = 0; i < wordToGuess.length(); i++) {
                if (wordToGuess.charAt(i) == guess) {
                    guessedWord[i] = guess;
                    correctGuess = true;
                }
            }
            
            if (!correctGuess) {
                attempts--;
                System.out.println("Incorrect guess. Attempts remaining: " + attempts);
            }

            wordGuessed = new String(guessedWord).equals(wordToGuess);
        }

        if (wordGuessed) {
            System.out.println("Congratulations! You've guessed the word: " + wordToGuess);
        } else {
            System.out.println("Game over. The word was: " + wordToGuess);
        }

        scanner.close();
    }
}
```

## ✅199. Να ορίσετε σε JAVA την κλάση Tires (Λάστιχα) με τις ακόλουθες ιδιότητες:width Πλάτος της επιφάνειας του ελαστικού (inches)radius Ακτίνα του ελαστικού (inches)rim Ζαντα (inches)type Τύπος ελαστικού0 – Παντός Καιρού1 – Ξηρό2 – Βροχή3 – Χιόνι brand Κατασκευαστής model Μοντέλο year έτος κατασκευής Να δημιουργήσετε constructor για την κλάση αυτή, ο ποιος να παίρνει παραμέτρους για όλα τα στοιχεία της κλάσης.

```java
public class Tires {
    private double width;
    private double radius;
    private double rim;
    private int type;
    private String brand;
    private String model;
    private int year;

    // Constructor
    public Tires(double width, double radius, double rim, int type, String brand, String model, int year) {
        this.width = width;
        this.radius = radius;
        this.rim = rim;
        this.type = type;
        this.brand = brand;
        this.model = model;
        this.year = year;
    }

    // Getters and setters (optional, can be added as needed)
    public double getWidth() {
        return width;
    }

    public double getRadius() {
        return radius;
    }

    public double getRim() {
        return rim;
    }

    public int getType() {
        return type;
    }

    public String getBrand() {
        return brand;
    }

    public String getModel() {
        return model;
    }

    public int getYear() {
        return year;
    }

    // Main method to test the Tires class
    public static void main(String[] args) {
        // Δημιουργία ενός αντικειμένου Tires
        Tires tire = new Tires(8.5, 16, 17, 0, "Michelin", "Pilot Sport", 2022);
        
        // Εκτύπωση των ιδιοτήτων του αντικειμένου
        System.out.println("Tire Brand: " + tire.getBrand());
        System.out.println("Tire Model: " + tire.getModel());
        System.out.println("Tire Width: " + tire.getWidth() + " inches");
        System.out.println("Tire Radius: " + tire.getRadius() + " inches");
        System.out.println("Tire Rim: " + tire.getRim() + " inches");
        System.out.println("Tire Type: " + tire.getType());
        System.out.println("Tire Year: " + tire.getYear());
    }
}
```

## ✅200. Ποια είναι η διαφορά μεταξύ μιας abstract class και ενός interface (σε Java);

- **Abstract Class**: Μπορεί να έχει υλοποιημένες μεθόδους και κατασκευαστές, κληρονομείται μόνο μία φορά.
- **Interface**: Ορίζει σύνολο μεθόδων χωρίς υλοποίηση, κληρονομείται πολλές φορές.

## ✅201. Τι είναι τα interfaces στην JAVA; Πώς δημιουργούμε ένα interface; Δώστε ένα παράδειγμα.

- **Interface**: Ορίζει συμπεριφορές που πρέπει να υλοποιηθούν από τις κλάσεις.
- **Δημιουργία**: `public interface MyInterface { void myMethod(); }`

## ✅202. Γράψτε σε Java ένα πρόγραμμα που θα μετατρέπει την θερμοκρασία από βαθμούς Fahrenheit σε Celcius σημείωση: C = 5 (F – 32) / 9"

```java
import java.util.Scanner;

public class TemperatureConversion {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double fahrenheit = scanner.nextDouble();
        double celsius = (fahrenheit - 32) * 5 / 9;
        System.out.println(celsius);
    }
}
```

## ✅203. Γράψτε πρόγραμμα σε Java, το οποίο θα ζητάει από το χρήστη να εισάγει μία λίστα με 6 ονόματα στην αρχική του σειρά, θα ταξινομεί τα ονόματα με αύξουσα αλφαβητική σειρά και κατόπιν θα εμφανίζει ξανά τη λίστα.

```java
import java.util.Arrays;
import java.util.Scanner;

public class SortNames {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] names = new String[6];
        for (int i = 0; i < 6; i++) names[i] = scanner.nextLine();
        Arrays.sort(names);
        for (String name : names) System.out.println(name);
    }
}
```

## ✅204. Τι είναι το Method Overloading; Δώστε ένα παράδειγμα με χρήση κώδικα Java.

**Method Overloading** (Υπερφόρτωση Μεθόδου) στην Java είναι η δυνατότητα ύπαρξης πολλαπλών μεθόδων με το ίδιο όνομα σε μια κλάση, οι οποίες διαφέρουν ως προς τον αριθμό ή τον τύπο των παραμέτρων τους. Αυτό επιτρέπει την εκτέλεση της ίδιας λειτουργίας με διαφορετικούς τρόπους, ανάλογα με τα δεδομένα εισόδου.

**Παράδειγμα:**

```java
public class Calculator {

    // Μέθοδος για πρόσθεση δύο ακέραιων αριθμών
    public int add(int a, int b) {
        return a + b;
    }

    // Μέθοδος για πρόσθεση τριών ακέραιων αριθμών
    public int add(int a, int b, int c) {
        return a + b + c;
    }

    // Μέθοδος για πρόσθεση δύο δεκαδικών αριθμών
    public double add(double a, double b) {
        return a + b;
    }

    public static void main(String[] args) {
        Calculator calc = new Calculator();

        // Κλήση της μεθόδου add για δύο ακέραιους
        System.out.println("Πρόσθεση δύο ακέραιων: " + calc.add(5, 3));

        // Κλήση της μεθόδου add για τρεις ακέραιους
        System.out.println("Πρόσθεση τριών ακέραιων: " + calc.add(5, 3, 2));

        // Κλήση της μεθόδου add για δύο δεκαδικούς
        System.out.println("Πρόσθεση δύο δεκαδικών: " + calc.add(5.5, 3.2));
    }
}
```

## ✅205. Τι είναι το Method Overriding; Δώστε ένα παράδειγμα με χρήση κώδικα Java.

**Method Overriding** (Επικάλυψη Μεθόδου) στην Java είναι η διαδικασία κατά την οποία μια υποκλάση παρέχει τη δική της υλοποίηση για μια μέθοδο που υπάρχει ήδη στην υπερκλάση της. Αυτό επιτρέπει στην υποκλάση να τροποποιήσει ή να επεκτείνει τη συμπεριφορά της κληρονομημένης μεθόδου.

**Κανόνες για την Επικάλυψη Μεθόδου:**

- Η μέθοδος στην υποκλάση πρέπει να έχει το ίδιο όνομα, τύπο επιστροφής και λίστα παραμέτρων με τη μέθοδο της υπερκλάσης.
- Η μέθοδος της υπερκλάσης δεν πρέπει να είναι `final`, `static` ή `private`, καθώς αυτές δεν μπορούν να επικαλυφθούν.
- Συνιστάται η χρήση της annotation `@Override` για να υποδεικνύεται ότι μια μέθοδος επικαλύπτει μια μέθοδο της υπερκλάσης. Αν και δεν είναι υποχρεωτική, βοηθά στον έλεγχο τυχόν λαθών σύνταξης.

**Παράδειγμα:**

```java
// Υπερκλάση
class Animal {
    // Μέθοδος που θα επικαλυφθεί
    public void sound() {
        System.out.println("Το ζώο κάνει έναν ήχο.");
    }
}

// Υποκλάση
class Dog extends Animal {
    // Επικάλυψη της μεθόδου sound()
    @Override
    public void sound() {
        System.out.println("Ο σκύλος γαβγίζει.");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myAnimal = new Animal();  // Δημιουργία αντικειμένου τύπου Animal
        Animal myDog = new Dog();         // Δημιουργία αντικειμένου τύπου Dog

        myAnimal.sound();  // Καλεί την μέθοδο της υπερκλάσης
        myDog.sound();     // Καλεί την επικαλυμμένη μέθοδο της υποκλάσης
    }
}
```

## ✅206. Εξηγήστε αναλυτικά τον παρακάτω κώδικα:

```java
interface MyInterface{ 
public void method1();
public void method2(); 
}
class XYZ implements MyInterface {
 public void method1(){System.out.println(""implementation of method1"");}
 public void method2(){System.out.println(""implementation of method2"");}
 public static void main(String arg[]){MyInterface obj=new XYZ(); obj.method1();
 }
}
```
Ο παραπανω κώδικας Java χρησιμοποιεί **interfaces** και **κλάσεις** για να επιδείξει την έννοια της εφαρμογής μεθόδων:

- Interface MyInterface: Δηλώνει δύο αφηρημένες μεθόδους method1() και method2() χωρίς υλοποίηση.

- Κλάση XYZ: Υλοποιεί το interface και παρέχει υλοποιήσεις για τις method1() και method2().

- Μέθοδος main: Δημιουργεί αντικείμενο obj από την κλάση XYZ και καλεί τη μέθοδο method1(), η οποία εκτυπώνει "implementation of method1".

## ✅207. Δημιουργήστε (σε Java) το class inventory χρησιμοποιώντας Vector Arrays μέσα στο inventory όπου εμπεριέχονται αντικείμενα τύπου string[ ] με χαρακτηριστικά όπλων π.χ mithril sword, Plate Armour κτλ.

```java
import java.util.Vector;

public class Inventory {
    private Vector<String[]> inventory;

    public Inventory() {
        inventory = new Vector<>();
    }

    public void addItem(String[] item) {
        inventory.add(item);
    }

    public void displayInventory() {
        for (String[] item : inventory) {
            for (String attribute : item) {
                System.out.print(attribute + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Inventory inv = new Inventory();

        // Δημιουργία αντικειμένων όπλων με τα χαρακτηριστικά τους
        String[] sword = {"Mithril Sword", "Attack: 50", "Weight: 5kg"};
        String[] armor = {"Plate Armour", "Defense: 70", "Weight: 15kg"};

        // Προσθήκη αντικειμένων στο inventory
        inv.addItem(sword);
        inv.addItem(armor);

        // Εμφάνιση του περιεχομένου του inventory
        inv.displayInventory();
    }
}
```

## ✅208. Δημιουργήστε (σε Java) το πρόγραμμα Print(), που εκτυπώνει μέσω κληρονομικότητας στην οθόνη το αποτέλεσμα των τάξεων:
sum, που προσθέτει αριθμούς integer,
sub, που αφαιρεί αριθμούς integer και
multiply που πολλαπλασιάζει αριθμούς integer.

```java
// Κλάση για βασικές αριθμητικές λειτουργίες
class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
    public int subtract(int a, int b) {
        return a - b;
    }
    public int multiply(int a, int b) {  
        return a * b;
    }
}

// Κλάση που εκτυπώνει τα αποτελέσματα των αριθμητικών λειτουργιών
class Printer extends Calculator {
    public void printResults(int a, int b) {
        System.out.println("Άθροισμα: " + add(a, b));
        System.out.println("Αφαίρεση: " + subtract(a, b));
        System.out.println("Πολλαπλασιασμός: " + multiply(a, b));
    }
}

// Κύρια κλάση για την εκτέλεση του προγράμματος
public class Print {
    public static void main(String[] args) {
        Printer printer = new Printer();
        int num1 = 10;
        int num2 = 5;
        printer.printResults(num1, num2);  // Κλήση της μεθόδου για εκτύπωση των αποτελεσμάτων
    }
}
```

## ✅209. Δημιουργήστε (σε Java) την τάξη Rectangle, την τάξη Square και την τάξη Circle η κάθε μία περιέχει τουλάχιστον 3 μεταβλητές και μια συνάρτηση που υπολογίζει το εμβαδόν τους. Οι τάξεις Square και Circle κληρονομούν από την τάξη Rectangle τις μεταβλητές της, υπολογίζουν και εκτυπώνουν το εμβαδόν τους (εμβαδό κύκλου = 2*3.14*R*R, εμβαδό τετραγώνου = Width*Width).

```java
// Κλάση για ορθογώνιο παραλληλόγραμμο
class Rectangle {
    double width;
    double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    public double calculateArea() {
        return width * height;
    }
}

// Κλάση για τετράγωνο που κληρονομεί από την Rectangle
class Square extends Rectangle {

    public Square(double sideLength) {
        super(sideLength, sideLength);
    }

    @Override
    public double calculateArea() {
        return width * width;
    }
}

// Κλάση για κύκλο που κληρονομεί από την Rectangle
class Circle extends Rectangle {
    double radius;

    public Circle(double radius) {
        super(0, 0); // Δεν χρησιμοποιούμε width και height για τον κύκλο
        this.radius = radius;
    }

    @Override
    public double calculateArea() {
        return 2 * 3.14 * radius * radius;
    }
}

// Κύρια κλάση για την εκτέλεση του προγράμματος
public class ShapeTest {
    public static void main(String[] args) {
        Rectangle rectangle = new Rectangle(5, 10);
        System.out.println("Εμβαδόν Ορθογωνίου Παραλληλόγραμμου: " + rectangle.calculateArea());

        Square square = new Square(4);
        System.out.println("Εμβαδόν Τετραγώνου: " + square.calculateArea());

        Circle circle = new Circle(3);
        System.out.println("Εμβαδόν Κύκλου: " + circle.calculateArea());
    }
}
```

## ✅210. Να γραφεί συνάρτηση σε OpenGL που να σχεδιάζει ένα επίπεδο (plane).

```c
void drawPlane(float width, float height) {
    glBegin(GL_QUADS); // Ξεκινάμε την σχεδίαση τετραγώνου
    glVertex3f(-width / 2, -height / 2, 0.0f); // Κορυφή 1
    glVertex3f(width / 2, -height / 2, 0.0f);  // Κορυφή 2
    glVertex3f(width / 2, height / 2, 0.0f);  // Κορυφή 3
    glVertex3f(-width / 2, height / 2, 0.0f); // Κορυφή 4
    glEnd(); // Τερματισμός της σχεδίασης
}
```

## ✅211. Σε τι οφείλουμε το γεγονός ότι η OpenGL μπορεί να δείξει από 256 έως δισεκατομμύρια χρώματα χωρίς να χρειαστεί να ξαναγράψουμε ή να ξανακάνουμε compile τον κώδικα;

Η δυνατότητα της OpenGL να εμφανίζει από 256 έως δισεκατομμύρια χρώματα χωρίς να χρειάζεται να τροποποιούμε τον κώδικα οφείλεται στην υποστήριξη του σύγχρονου υποσυστήματος γραφικών, το οποίο μπορεί να χειρίζεται διαφορετικά βάθη χρώματος (color depths) όπως 8-bit, 16-bit, 24-bit, και 32-bit χρώματα. 
Επιπλέον, χρησιμοποιεί την έννοια των μεταβλητών χρωμάτων μέσω της υλοποίησης διαφορετικών πίνακες χρωμάτων και εξαρτάται από την υποστήριξη των υλικών γραφικών (GPU). 
Με αυτόν τον τρόπο, μπορεί να αναπαραστήσει χιλιάδες ή εκατομμύρια χρώματα χωρίς να χρειάζεται αλλαγή στον κώδικα.

## ✅212. Η OpenGL χρησιμοποιεί μια απλή, βασική, μορφή ονοματολογίας για τις εντολές της. Αναφέρατε ποια είναι αυτή και παραθέστε παράδειγμα.

Η OpenGL ακολουθεί μια βασική μορφή ονοματολογίας όπου όλες οι εντολές ξεκινούν με το πρόθεμα `gl` και ακολουθούνται από το όνομα της λειτουργίας σε πεζούς χαρακτήρες, με τις λέξεις να χωρίζονται από κάτω παύλες (underscores). Αυτός ο τρόπος ονοματολογίας διατηρεί τον κώδικα καθαρό και αναγνώσιμο.

Παραδείγματα:
- `glClearColor`: Ρυθμίζει το χρώμα καθαρισμού για το παράθυρο.
- `glEnable`: Ενεργοποιεί μια συγκεκριμένη λειτουργία ή δυνατότητα στην OpenGL.
- `glDisable`: Απενεργοποιεί μια δυνατότητα στην OpenGL.
- `glBegin`: Ξεκινά τη διαδικασία σχεδίασης γεωμετρίας.
- `glEnd`: Ολοκληρώνει τη διαδικασία σχεδίασης γεωμετρίας.

## ✅213. Αναφέρατε τι ονομάζουμε GLUT στην OpenGL. Για ποιο λόγο δημιουργήθηκε και ποιες βασικές λειτουργίες προσφέρει;

Το GLUT (OpenGL Utility Toolkit) είναι μια βιβλιοθήκη που παρέχει μια σειρά από εργαλεία και λειτουργίες για τη διευκόλυνση της ανάπτυξης εφαρμογών OpenGL. Δημιουργήθηκε για να παρέχει βασικές λειτουργίες χειρισμού παραθύρων, γεγονότων (events) και εισόδου (input), ανεξαρτήτως της πλατφόρμας στην οποία τρέχει η εφαρμογή (Windows, Linux, MacOS). Προσφέρει σημαντικές λειτουργίες όπως:
- Δημιουργία και διαχείριση παραθύρων.
- Διαχείριση εισόδου από το πληκτρολόγιο και το ποντίκι.
- Διαχείριση γεγονότων (events).
- Διαχείριση των κύκλων ανανέωσης της οθόνης και των παραθύρων.

## ✅214. Με ποια εντολή δημιουργούμε ένα τρισδιάστατο ορθογραφικό παράθυρο με διαστάσεις: 
αριστερά -3,δεξιά 3, πάνω 3, κάτω -3 και clipping planes στα 1 και 100 για το near και far αντίστοιχα (στην
OpenGL);

- Για να δημιουργήσετε ένα τρισδιάστατο ορθογραφικό παράθυρο στην OpenGL με τις καθορισμένες διαστάσεις και επίπεδα κοπής, χρησιμοποιείτε την εντολή `glOrtho`.

Η σύνταξή της είναι:

```c
glOrtho(left, right, bottom, top, near, far);
```

## ✅215. Εξετάστε την ισχύ των παρακάτω προτάσεων δηλώνοντας ΣΩΣΤΟ ή ΛΑΘΟΣ και εξηγώντας την επιλογή σας (Όπου κρίνετε απαραίτητο, παραθέστε παράδειγμα).
α) 1. Τα επικρατέστερα Λειτουργικά Συστήματα (Windows, Unix, Linux, Mac OS) υποστηρίζουν την OpenGL. 
β) Η OpenGL μπορεί αποκλειστικά να κληθεί (is callable) από τις γλώσσες προγραμματισμού C / C++ (δηλαδή υπάρχει μοναδικό language binding). 
γ) Το μοναδικό περιβάλλον ανάπτυξης προγραμμάτων OpenGL είναι το DEV C++. 
δ) Η OpenGL περιέχει εντολές επιλογής (τύπου If ... else). 
ε) Οι εντολές της OpenGL ξεκινούν με το πρόθεμα gl.

**α) ΣΩΣΤΟ:** Η OpenGL υποστηρίζεται από Windows, Unix, Linux, Mac OS.

**β) ΛΑΘΟΣ:** Η OpenGL υποστηρίζεται από πολλές γλώσσες, όχι μόνο C/C++.

**γ) ΛΑΘΟΣ:** Η OpenGL αναπτύσσεται σε διάφορα περιβάλλοντα, όχι μόνο στο DEV C++.

**δ) ΛΑΘΟΣ:** Η OpenGL δεν έχει εντολές ελέγχου ροής (π.χ. if-else).

**ε) ΣΩΣΤΟ:** Οι εντολές της OpenGL ξεκινούν με το πρόθεμα `gl`.


## ✅216. Ποια η λειτουργία των παρακάτω εντολών στην OpenGL και τι παραμέτρους δέχονται; Να δοθεί παράδειγμα.α) glutInitWindowPosition β) glutInitWindowSize γ) glutCreateWindow

**a) glutInitWindowPosition**: 

  Ορίζει τη θέση του παραθύρου στην οθόνη. Παραμέτροι: (`int x, int y`) - Οι συντεταγμένες για την τοποθέτηση του παραθύρου.
  
  **Παράδειγμα**:
```c
glutInitWindowPosition(100, 100);
```

**b) glutInitWindowSize**: Ορίζει το μέγεθος του παραθύρου. Παραμέτροι: (`int width, int height`) - Πλάτος και ύψος του παραθύρου. Παράδειγμα:

```c
glutInitWindowSize(500, 500);
```

**c) glutCreateWindow**: Δημιουργεί το παράθυρο. Παραμέτροι: (`const char* title`) - Ο τίτλος του παραθύρου. Παράδειγμα:

```c
glutCreateWindow("OpenGL Window");
```

## ✅217. Περιγράψτε τρεις βασικές βιβλιοθήκες εντολών της OpenGL που περιέχουν εντολές σχεδίασης, γραφικών και απόδοσης. Σε ποιο σημείο του προγράμματος δηλώνονται;

1. **GLU (OpenGL Utility Library):**

   - **Λειτουργία:** Παρέχει επιπλέον εντολές για εργασίες όπως η δημιουργία γεωμετρικών σχημάτων, η διαχείριση προβολών και η διαχείριση μετασχηματισμών.
   - **Δήλωση:** Συνήθως δηλώνεται στην αρχή του προγράμματος, μετά την εισαγωγή της κύριας βιβλιοθήκης OpenGL.
   - **Παράδειγμα:**
     ```cpp
     #include <GL/glut.h>
     #include <GL/glu.h>
     ```

2. **GLEW (OpenGL Extension Wrangler Library):**

   - **Λειτουργία:** Διαχειρίζεται τις επεκτάσεις της OpenGL, επιτρέποντας την πρόσβαση σε νέες λειτουργίες που δεν υποστηρίζονται από όλες τις κάρτες γραφικών.
   - **Δήλωση:** Δηλώνεται στην αρχή του προγράμματος, μετά την εισαγωγή της βιβλιοθήκης OpenGL.
   - **Παράδειγμα:**
     ```cpp
     #include <GL/glew.h>
     #include <GL/glut.h>
     ```

3. **GLUT (OpenGL Utility Toolkit):**

   - **Λειτουργία:** Παρέχει λειτουργίες για τη δημιουργία παραθύρων, τη διαχείριση εισόδου και την εκτέλεση του κύκλου γεγονότων.
   - **Δήλωση:** Δηλώνεται στην αρχή του προγράμματος, πριν από τη χρήση των συναρτήσεών της.
   - **Παράδειγμα:**
     ```cpp
     #include <GL/glut.h>
     ```

## ✅218. Αναφέρετε την λειτουργία της glutMainLoop() στην OpenGL. Σε ποιο σημείο πρέπει να καλείται;

- **Λειτουργία:** Η `glutMainLoop()` εισέρχεται στον κύκλο επεξεργασίας γεγονότων της GLUT, διατηρώντας το πρόγραμμα σε λειτουργία και επεξεργάζοντας τα γεγονότα εισόδου και τα γραφικά.
- **Σημείο κλήσης:** Καλείται μία φορά στο τέλος της συνάρτησης `main()`, μετά την ολοκλήρωση της ρύθμισης του παραθύρου και της καταγραφής των callbacks.
- **Παράδειγμα:**
 ```c
  int main(int argc, char** argv) {
      glutInit(&argc, argv);
      glutCreateWindow("OpenGL Window");
      // Ρυθμίσεις και δηλώσεις callbacks
      glutMainLoop();
      return 0;
  }
```

## ✅219. Ποια είναι τα πλεονεκτήματα χρήσης μιας πλατφόρμας CMS (Content Management System), σε σχέση με την δημιουργία εκ νέου ενός web site;

- **Ευκολία Διαχείρισης Περιεχομένου:** Τα CMS προσφέρουν φιλικά προς το χρήστη περιβάλλοντα, επιτρέποντας την εύκολη προσθήκη, επεξεργασία και διαγραφή περιεχομένου χωρίς ανάγκη προγραμματιστικών γνώσεων.
- **Εξοικονόμηση Χρόνου και Κόστους:** Η χρήση ενός CMS μειώνει τον χρόνο ανάπτυξης και το κόστος, καθώς παρέχει έτοιμες λύσεις και πρότυπα για τη δημιουργία ιστοσελίδων.
- **Επεκτασιμότητα και Ευελιξία:** Τα CMS επιτρέπουν την προσθήκη νέων λειτουργιών μέσω plugins και modules, διευκολύνοντας την προσαρμογή της ιστοσελίδας στις ανάγκες του χρήστη.
- **Διαχείριση Χρηστών και Πρόσβαση:** Προσφέρουν δυνατότητες διαχείρισης χρηστών με διαφορετικά επίπεδα πρόσβασης, βελτιώνοντας την ασφάλεια και την οργάνωση.

## ✅220. To σύστημα διαχείρισης περιεχομένου (CMS) υποστηρίζει την εγκατάσταση διαφόρων modules. Τι είναι τα modules και γιατί είναι χρήσιμα για ένα CMS;

- **Ορισμός Modules:** Τα modules είναι πρόσθετα λογισμικού που επεκτείνουν τη λειτουργικότητα του CMS, προσθέτοντας νέες δυνατότητες ή τροποποιώντας υπάρχουσες.
  - **Επέκταση Λειτουργικότητας:** Επιτρέπουν την προσθήκη χαρακτηριστικών όπως φόρμες επικοινωνίας, εργαλεία SEO ή ενσωμάτωση κοινωνικών δικτύων.
  - **Προσαρμοστικότητα:** Διευκολύνουν την προσαρμογή του CMS στις συγκεκριμένες ανάγκες του χρήστη χωρίς την ανάγκη εκτεταμένης προγραμματιστικής εργασίας.
  - **Ευκολία Εγκατάστασης:** Η εγκατάσταση modules είναι συνήθως απλή, μέσω του πίνακα διαχείρισης του CMS, επιτρέποντας γρήγορη επέκταση της λειτουργικότητας.

## ✅221. Στην διάρκεια κατασκευής μιας ιστοσελίδας πολλές φορές καλούμαστε να προσθέσουμε alt και title tags. Τι είναι το καθένα απ’ αυτά και για ποιο σκοπό χρησιμοποιούνται; Είναι απαραίτητη ή προαιρετική η συμπλήρωσή τους;

- **alt Tag:**
  - **Ορισμός:** Το `alt` (alternative text) είναι ένα χαρακτηριστικό του HTML που παρέχει μια γραπτή περιγραφή για μια εικόνα όταν αυτή δεν μπορεί να εμφανιστεί.
    - **Προσβασιμότητα:** Βοηθά χρήστες με προβλήματα όρασης που χρησιμοποιούν αναγνώστες οθόνης.
    - **SEO:** Βελτιώνει την κατάταξη του ιστότοπου στις μηχανές αναζήτησης.
    - **Παράδειγμα:**
      ```html
      <img src="logo.png" alt="Λογότυπο της εταιρείας">
      ```
  - **Απαραίτητο:** Η συμπλήρωση του `alt` tag είναι απαραίτητη για λόγους προσβασιμότητας και SEO.

- **title Tag:**
  - **Ορισμός:** Το `title` είναι ένα χαρακτηριστικό του HTML που παρέχει έναν τίτλο για την εικόνα, ο οποίος εμφανίζεται όταν ο χρήστης τοποθετεί τον δείκτη του ποντικιού πάνω από την εικόνα.
    - **Επιπλέον Πληροφορίες:** Παρέχει συμπληρωματικές πληροφορίες για την εικόνα.
    - **Παράδειγμα:**
      ```html
      <img src="logo.png" title="Καλώς ήρθατε στην επίσημη ιστοσελίδα μας">
      ```
  - **Προαιρετικό:** Η συμπλήρωση του `title` tag είναι προαιρετική, αλλά προσφέρει επιπλέον πληροφορίες στον χρήστη.

## ✅222. Η επιστήμη του SEO (Search Engine Optimization), δίνει μεγάλη βαρύτητα στην σωστή συμπλήρωση τριών tags (title tag, keyword tag, description tag). Τι ακριβώς είναι το καθένα από αυτά τα tags και με ποιον τρόπο γίνεται η σωστή επιλογή του περιεχομένου τους, έτσι ώστε η ιστοσελίδα να ανταποκρίνεται στα κριτήρια σωστής διάρθρωσης της επιστήμης SEO;

- **title Tag:**
  - **Ορισμός:** Ορίζει τον τίτλο της ιστοσελίδας, εμφανίζεται στη γραμμή τίτλου του προγράμματος περιήγησης και στις σελίδες αποτελεσμάτων των μηχανών αναζήτησης.
    - **Σαφήνεια και Συντομία:** Περιγράψτε με σαφήνεια το περιεχόμενο της σελίδας σε 50-60 χαρακτήρες.
    - **Χρήση Κλειδιών:** Ενσωματώστε σημαντικές λέξεις-κλειδιά για SEO.
    - **Παράδειγμα:**
      ```html
      <title>Υπηρεσίες Ψηφιακού Μάρκετινγκ | Εταιρεία ABC</title>
      ```

- **meta Keywords Tag:**
  - **Ορισμός:** Παρέχει μια λίστα λέξεων-κλειδιών που σχετίζονται με το περιεχόμενο της σελίδας.
    - **Σχετικότητα:** Επιλέξτε λέξεις-κλειδιά που αντιπροσωπεύουν το περιεχόμενο της σελίδας. 
    - **Μέτρο:** Μην υπερφορτώνετε το πεδίο με πάρα πολλές λέξεις-κλειδιά.
    - **Παράδειγμα:**
      ```html
      <meta name="keywords" content="ψηφιακό μάρκετινγκ, στρατηγική SEO, ανάπτυξη ιστοσελίδων">
      ```

- **meta Description Tag:**
  - **Ορισμός:** Παρέχει μια σύντομη περιγραφή του περιεχομένου της σελίδας που εμφανίζεται στις μηχανές αναζήτησης.
    - **Σαφήνεια και Λεπτομέρεια:** Η περιγραφή πρέπει να είναι σαφής και να περιλαμβάνει τα βασικά σημεία της σελίδας.
    - **Μήκος:** Πρέπει να έχει μήκος 150-160 χαρακτήρες.
    - **Παράδειγμα:**
      ```html
      <meta name="description" content="Η Εταιρεία ABC προσφέρει υπηρεσίες ψηφιακού μάρκετινγκ και SEO για επιχειρήσεις που θέλουν να αυξήσουν την online παρουσία τους.">
      ```

## ✅223. Μετά την υλοποίηση της ιστοσελίδας με χρήση CMS τοπικά, ποια βήματα πρέπει να γίνουν ώστε να "ανέβει" (upload) στο Internet;

1. **Επιλογή Παρόχου Φιλοξενίας (Hosting):**
   - Επιλέξτε έναν αξιόπιστο πάροχο φιλοξενίας ιστοσελίδων που προσφέρει τις απαιτούμενες δυνατότητες και υποστήριξη.

2. **Προετοιμασία Αρχείων Ιστοσελίδας:**
   - Συγκεντρώστε όλα τα αρχεία της ιστοσελίδας σας, συμπεριλαμβανομένων των HTML, CSS, JavaScript, εικόνων και άλλων πόρων.
   - Εξαγάγετε τη βάση δεδομένων (αν χρησιμοποιείτε) από το τοπικό περιβάλλον.

3. **Επιλογή Μεθόδου Μεταφόρτωσης:**
   - **File Manager:** Χρησιμοποιήστε τον διαχειριστή αρχείων που παρέχει ο πάροχος φιλοξενίας μέσω του πίνακα ελέγχου (cPanel, hPanel κ.λπ.).
   - **FTP (File Transfer Protocol):** Χρησιμοποιήστε έναν FTP client (π.χ., FileZilla) για να μεταφορτώσετε τα αρχεία στον διακομιστή.

4. **Μεταφόρτωση Αρχείων στον Διακομιστή:**
   - Μεταφορτώστε τα αρχεία της ιστοσελίδας στον κατάλληλο φάκελο του διακομιστή (συνήθως τον `public_html`).
   - Εισαγάγετε τη βάση δεδομένων στον διακομιστή, αν υπάρχει.

5. **Διαμόρφωση Ρυθμίσεων:**
   - Ρυθμίστε τα αρχεία παραμετροποίησης της CMS για να αντιστοιχούν στο νέο περιβάλλον (π.χ., ενημερώστε τις ρυθμίσεις σύνδεσης με τη βάση δεδομένων).

6. **Ενημέρωση DNS:**
   - Ενημερώστε τις ρυθμίσεις DNS του domain σας ώστε να δειχνει στον νέο διακομιστή φιλοξενίας.

7. **Έλεγχος Λειτουργίας:**
   - Επισκεφθείτε την ιστοσελίδα σας μέσω του domain για να βεβαιωθείτε ότι όλα λειτουργούν σωστά.

## ✅224. Τι είναι τα σχεδιαστικά χνάρια και ποια η χρησιμότητα τους;

- **Ορισμός:**
  - Στην επιστήμη των υπολογιστών, τα σχεδιαστικά χνάρια (design patterns) είναι επαναχρησιμοποιήσιμες λύσεις σε κοινά προβλήματα σχεδιασμού λογισμικού.
  - Πρόκειται για γενικές, επαναλαμβανόμενες απαντήσεις σε συχνά εμφανιζόμενα προβλήματα σε συγκεκριμένα περιβάλλοντα ανάπτυξης.

- **Χρησιμότητα:**
  - **Επαναχρησιμοποίηση Κώδικα:** Αποφεύγεται η αναδημιουργία λύσεων για κοινά προβλήματα, εξοικονομώντας χρόνο και πόρους.
  - **Κλιμάκωση:** Διευκολύνεται η ανάπτυξη ευέλικτων και προσαρμόσιμων εφαρμογών.
  - **Συντηρησιμότητα:** Ευκολότερη τροποποίηση και αποσφαλμάτωση του κώδικα.
  - **Τυποποίηση:** Παροχή κοινού λεξιλογίου για τους προγραμματιστές, διευκολύνοντας την επικοινωνία και τη συνεργασία.


# ΟΜΑΔΑ Β. ΕΙΔΙΚΕΣ ΕΡΩΤΗΣΕΙΣ(174)
(if answers correct add "✅")
## ✅1. Περιγράψτε τον τρόπο λειτουργίας των οπτικών δίσκων (CD-DVD/ROM).

Οι οπτικοί δίσκοι, όπως τα CD, DVD και ROM, αποθηκεύουν δεδομένα σε μια σειρά από μικρές αυλακώσεις (pits) και επίπεδες περιοχές (lands) στην επιφάνειά τους. 
Κατά την ανάγνωση, μια ακτίνα λέιζερ εντοπίζει αυτές τις αυλακώσεις, και η αντίδραση του λέιζερ (ανάκλαση ή απορρόφηση) μεταφράζεται σε ψηφιακά δεδομένα. 
Αυτός ο μηχανισμός επιτρέπει την αποθήκευση και ανάκτηση δεδομένων με ακρίβεια και αξιοπιστία.

## ✅2. Τι ονομάζουμε κύρια και τι δευτερεύουσα μνήμη; Ποια είναι η βασική διαφορά τους;

- **Κύρια Μνήμη (RAM):**
  - **Ορισμός:** Είναι η μνήμη που χρησιμοποιείται άμεσα από τον επεξεργαστή για την εκτέλεση προγραμμάτων και την προσωρινή αποθήκευση δεδομένων.
  - **Χαρακτηριστικά:** Πτητική (χάνει το περιεχόμενό της όταν διακοπεί η παροχή ρεύματος), υψηλή ταχύτητα πρόσβασης, περιορισμένη χωρητικότητα.

- **Δευτερεύουσα Μνήμη:**
  - **Ορισμός:** Είναι η μνήμη που χρησιμοποιείται για τη μόνιμη αποθήκευση δεδομένων και προγραμμάτων.
  - **Χαρακτηριστικά:** Μη πτητική (διατηρεί τα δεδομένα μετά την απενεργοποίηση), μεγαλύτερη χωρητικότητα, πιο αργή πρόσβαση σε σχέση με την κύρια μνήμη.

**Βασική Διαφορά:** Η κύρια μνήμη παρέχει ταχύτατη πρόσβαση σε δεδομένα που απαιτούνται άμεσα από τον επεξεργαστή, ενώ η δευτερεύουσα μνήμη προσφέρει μεγαλύτερη χωρητικότητα για τη μόνιμη αποθήκευση δεδομένων με πιο αργή πρόσβαση.

## ✅3. Πόσους αγωγούς χρησιμοποιεί ο δίαυλος USB και ποια η χρήση του καθενός απ' αυτούς;

Ο δίαυλος USB (Universal Serial Bus) χρησιμοποιεί τέσσερις αγωγούς:

1. **Vcc (ή +5V):** Παρέχει τροφοδοσία ρεύματος 5 volt προς τις συνδεδεμένες συσκευές.
2. **D- (Data Minus):** Μεταφέρει δεδομένα σε ψηφιακή μορφή, χρησιμοποιώντας την τεχνική της διαφορικής μετάδοσης.
3. **D+ (Data Plus):** Συνεργάζεται με το D- για τη μετάδοση δεδομένων, επίσης μέσω διαφορικής μετάδοσης.
4. **GND (Ground):** Παρέχει τη γείωση για τη σωστή λειτουργία του συστήματος.

Αυτοί οι αγωγοί συνεργάζονται για την ασφαλή και αποτελεσματική μετάδοση δεδομένων και τροφοδοσίας μεταξύ του υπολογιστή και των περιφερειακών συσκευών.

## ✅4. Τι είναι το υλικό (Hardware) και τι το λογισμικό (Software) στοιχείο ενός υπολογιστικού συστήματος; Να αναφέρετε τέσσερα παραδείγματα από το καθένα.

- **Υλικό (Hardware):**
  - **Ορισμός:** Αποτελείται από τα φυσικά εξαρτήματα του υπολογιστικού συστήματος.
  - **Παραδείγματα:**
    1. Κεντρική Μονάδα Επεξεργασίας (CPU)
    2. Μνήμη Τυχαίας Προσπέλασης (RAM)
    3. Σκληρός Δίσκος (HDD)
    4. Οθόνη (Monitor)

- **Λογισμικό (Software):**
  - **Ορισμός:** Αποτελείται από τα προγράμματα και τις εφαρμογές που εκτελούνται στον υπολογιστή.
  - **Παραδείγματα:**
    1. Λειτουργικό Σύστημα (π.χ., Windows, Linux)
    2. Επεξεργαστής Κειμένου (π.χ., Microsoft Word)
    3. Πρόγραμμα Περιήγησης (π.χ., Google Chrome)
    4. Αντιϊκό Λογισμικό (π.χ., Norton Antivirus)

## ✅5. Ποιες είναι οι βασικές κατηγορίες των λειτουργικών συστημάτων; Ποια είναι τα ιδιαίτερα χαρακτηριστικά καθεμιάς;

1. **Λειτουργικά Συστήματα Μονής Εργασίας (Single-tasking):**
   - **Χαρακτηριστικά:** Επιτρέπουν την εκτέλεση μόνο ενός προγράμματος τη φορά.
   - **Παράδειγμα:** MS-DOS.

2. **Λειτουργικά Συστήματα Πολυπροσωπίας (Multiprogramming):**
   - **Χαρακτηριστικά:** Επιτρέπουν την εκτέλεση πολλών προγραμμάτων ταυτόχρονα, βελτιώνοντας την απόδοση.
   - **Παράδειγμα:** Unix.

3. **Λειτουργικά Συστήματα Πραγματικού Χρόνου (Real-time):**
   - **Χαρακτηριστικά:** Εγγυώνται την επεξεργασία γεγονότων ή δεδομένων σε συγκεκριμένο χρονικό σημείο. Διακρίνονται σε:
     - **Σύστημα Σκληρού Πραγματικού Χρόνου (Hard Real-time):** Απαιτεί ακριβή χρονισμό, κοινά σε βιομηχανικές εφαρμογές.
     - **Σύστημα Μαλακού Πραγματικού Χρόνου (Soft Real-time):** Επιτρέπει περιστασιακή καθυστέρηση, όπως σε πολυμέσα ή κινητές συσκευές.
   - **Παράδειγμα:** VxWorks.

4. **Ενσωματωμένα Λειτουργικά Συστήματα (Embedded):**
   - **Χαρακτηριστικά:** Σχεδιασμένα για ενσωματωμένες συσκευές με περιορισμένους πόρους, όπως οικιακές συσκευές ή IoT.
   - **Παράδειγμα:** Embedded Linux.

5. **Υπερσυστήματα (Hypervisor):**
   - **Χαρακτηριστικά:** Επιτρέπουν τη λειτουργία εικονικών μηχανών, προσφέροντας απομόνωση και εικονικοποίηση.
   - **Παράδειγμα:** VMware ESXi.

6. **Βιβλιοθήκες Λειτουργικών Συστημάτων (Library OS):**
   - **Χαρακτηριστικά:** Παρέχουν λειτουργίες του λειτουργικού συστήματος μέσω βιβλιοθηκών, επιτρέποντας την ανάπτυξη εξειδικευμένων συστημάτων.
   - **Παράδειγμα:** Unikernels.

## ✅6. Ποιους τύπους οθονών υπολογιστών γνωρίζετε; Περιγράψτε σύντομα τις αρχές λειτουργίας τους.

1. **CRT (Cathode Ray Tube):**
   - **Αρχή Λειτουργίας:** Χρησιμοποιούν ηλεκτρονικές δέσμες που προσκρούουν σε φωτεινές φθορίζουσες οθόνες, παράγοντας εικόνα.
   - **Χαρακτηριστικά:** Όγκοι και βάρος, αλλά υψηλή ποιότητα εικόνας.

2. **LCD (Liquid Crystal Display):**
   - **Αρχή Λειτουργίας:** Χρησιμοποιούν υγρούς κρυστάλλους που αλλάζουν κατάσταση υπό την επίδραση ηλεκτρικού πεδίου, ελέγχοντας το φως που περνά.
   - **Χαρακτηριστικά:** Λεπτό προφίλ, χαμηλή κατανάλωση, αλλά περιορισμένες γωνίες θέασης.

3. **LED (Light Emitting Diode):**
   - **Αρχή Λειτουργίας:** Χρησιμοποιούν διόδους εκπομπής φωτός για την παραγωγή εικόνας.
   - **Χαρακτηριστικά:** Εξοικονόμηση ενέργειας, λεπτό προφίλ, ζωντανά χρώματα.

4. **OLED (Organic Light Emitting Diode):**
   - **Αρχή Λειτουργίας:** Χρησιμοποιούν οργανικά υλικά που εκπέμπουν φως όταν διαρρέονται από ρεύμα.
   - **Χαρακτηριστικά:** Υψηλή αντίθεση, ευελιξία, αλλά ενδέχεται να εμφανίσουν "burn-in".

5. **AMOLED (Active Matrix OLED):**
   - **Αρχή Λειτουργίας:** Εξελιγμένη μορφή OLED με ενεργή μήτρα, επιτρέποντας γρήγορη απόκριση.
   - **Χαρακτηριστικά:** Βελτιωμένη ποιότητα εικόνας, αλλά υψηλότερη κατανάλωση ενέργειας.

6. **IPS LCD (In-Plane Switching):**
   - **Αρχή Λειτουργίας:** Μια τεχνολογία LCD που βελτιώνει τις γωνίες θέασης και την αναπαραγωγή χρωμάτων.
   - **Χαρακτηριστικά:** Καλύτερες γωνίες θέασης και χρώματα σε σχέση με τα παραδοσιακά LCD.

## ✅7. Με ποιο τρόπο το Λειτουργικό Σύστημα συνεργάζεται με την Κεντρική Μονάδα Επεξεργασίας;

- **Διαχείριση Διακοπών (Interrupts):** Το ΛΣ χρησιμοποιεί διακοπές για να ενημερώσει την ΚΜΕ για σημαντικά γεγονότα, όπως η ολοκλήρωση μιας εισόδου/εξόδου, επιτρέποντας την άμεση αντίδραση του συστήματος.

- **Προγραμματισμός Διαδικασιών (Process Scheduling):** Το ΛΣ καθορίζει ποιες διαδικασίες θα εκτελούνται και για πόσο χρόνο, διαχειριζόμενο την ουρά έτοιμων διαδικασιών και διασφαλίζοντας δίκαιο καταμερισμό χρόνου επεξεργασίας.

- **Διαχείριση Μνήμης:** Το ΛΣ αναθέτει περιοχές μνήμης στις διαδικασίες, διατηρώντας την απομόνωση και την ασφάλεια μεταξύ τους, και διαχειρίζεται την εικονική μνήμη για αποτελεσματική χρήση των διαθέσιμων πόρων.

- **Επικοινωνία με Συσκευές (I/O Management):** Το ΛΣ παρέχει οδηγίες και ελέγχους για την επικοινωνία με περιφερειακές συσκευές, όπως δίσκους και οθόνες, μέσω προγραμμάτων οδήγησης (drivers).

- **Διαχείριση Ασφαλείας και Πρόσβασης:** Το ΛΣ ελέγχει την πρόσβαση στις διάφορες λειτουργίες του συστήματος, διατηρώντας την ακεραιότητα και την ασφάλεια του συστήματος.

## ✅8. Τι πρέπει να κάνουμε, έτσι ώστε να είναι δυνατόν να γράψουμε ένα μικρό κείμενο μπροστά ακριβώς από μια εικόνα που έχουμε εισάγει στο κείμενο;

- **Χρήση Πλαίσιου Κειμένου (Text Box):** Εισάγουμε ένα πλαίσιο κειμένου δίπλα στην εικόνα και πληκτρολογούμε το επιθυμητό κείμενο μέσα σε αυτό.

- **Χρήση Στυλ Παράθεσης (Text Wrapping):** Ενεργοποιούμε τη λειτουργία παράθεσης κειμένου γύρω από την εικόνα, επιτρέποντας στο κείμενο να ρέει γύρω της.

- **Χρήση Πινάκων:** Δημιουργούμε έναν πίνακα με δύο στήλες, τοποθετούμε την εικόνα σε μία στήλη και το κείμενο στην άλλη, ρυθμίζοντας τα όρια του πίνακα ώστε να είναι αόρατα.

## ✅9. Να περιγράψετε τον κύκλο ανάπτυξης ενός Πληροφοριακού Συστήματος. Δώστε ένα παράδειγμα.

1. **Προκαταρκτική Μελέτη:** Αξιολόγηση σκοπιμότητας.
2. **Ανάλυση Απαιτήσεων:** Συλλογή απαιτήσεων χρηστών.
3. **Σχεδιασμός:** Δημιουργία σχεδίου για βάση δεδομένων και διεπαφή χρήστη.
4. **Υλοποίηση:** Προγραμματισμός και ανάπτυξη.
5. **Έλεγχος:** Δοκιμές για αξιοπιστία και συμμόρφωση.
6. **Εγκατάσταση και Λειτουργία:** Εγκατάσταση και παρακολούθηση.
7. **Συντήρηση:** Υποστήριξη και ενημερώσεις.

## ✅10. Με τη χρήση κατάλληλου προγράμματος να παρουσιάσετε την διαφορά μεταξύ των εντολών break και continue.

**Παράδειγμα χρήσης των εντολών `break` και `continue` σε γλώσσα προγραμματισμού C:**
```c
#include <stdio.h>

int main() {
    // Χρήση της εντολής break
    printf("Παράδειγμα με break:\n");
    for (int i = 0; i < 5; i++) {
        if (i == 3) {
            break; // Τερματισμός του βρόχου όταν i = 3
        }
        printf("%d ", i);
    }
    printf("\n");

    // Χρήση της εντολής continue
    printf("Παράδειγμα με continue:\n");
    for (int i = 0; i < 5; i++) {
        if (i == 3) {
            continue; // Παράλειψη της επανάληψης όταν i = 3
        }
        printf("%d ", i);
    }
    printf("\n");

    return 0;
}
```

## ✅11. Να γραφεί πρόγραμμα σε C, που να υπολογίζει τη μέση τιμή ακέραιων αριθμών, όταν εισάγονται από το πληκτρολόγιο. Η εισαγωγή τερματίζεται, όταν δοθεί σαν τιμή ακεραίου το 0 (μηδέν).

```c
#include <stdio.h>

int main() {
    int αριθμός, άθροισμα = 0, πλήθος = 0;
    double μέση_τιμή;

    printf("Εισάγετε ακέραιους αριθμούς (0 για τερματισμό):\n");

    do {
        printf("Αριθμός: ");
        scanf("%d", &αριθμός);

        if (αριθμός != 0) {
            άθροισμα += αριθμός;
            πλήθος++;
        }
    } while (αριθμός != 0);

    if (πλήθος > 0) {
        μέση_τιμή = (double)άθροισμα / πλήθος;
        printf("Μέση τιμή: %.2f\n", μέση_τιμή);
    } else {
        printf("Δεν εισήχθησαν αριθμοί.\n");
    }

    return 0;
}
```

## ✅12. Να γραφεί πρόγραμμα σε C, που θα διαβάζει 2 ακεραίους αριθμούς από το πληκτρολόγιο και θα εκτυπώνει το άθροισμά τους στην οθόνη σε δεκαδική μορφή. Το αποτέλεσμα να φαίνεται επίσης σε οκταδική και δεκαεξαδική μορφή.

```c
#include <stdio.h>

int main() {
    int αριθμός1, αριθμός2, άθροισμα;

    // Εισαγωγή δύο ακεραίων αριθμών
    printf("Εισάγετε τον πρώτο ακέραιο αριθμό: ");
    scanf("%d", &αριθμός1);
    printf("Εισάγετε τον δεύτερο ακέραιο αριθμό: ");
    scanf("%d", &αριθμός2);

    // Υπολογισμός του αθροίσματος
    άθροισμα = αριθμός1 + αριθμός2;

    // Εκτύπωση του αθροίσματος σε δεκαδική, οκταδική και δεκαεξαδική μορφή
    printf("Το άθροισμα σε δεκαδική μορφή: %d\n", άθροισμα);
    printf("Το άθροισμα σε οκταδική μορφή: %o\n", άθροισμα);
    printf("Το άθροισμα σε δεκαεξαδική μορφή: %X\n", άθροισμα);

    return 0;
}
```

## ✅13. Να γραφεί πρόγραμμα σε C, που θα υπολογίζει το μέσο όρο δύο πραγματικών αριθμών. Ο υπολογισμός της μέσης τιμής να γίνει με τη δημιουργία ξεχωριστής συνάρτησης.

```c
#include <stdio.h>

// Συνάρτηση για τον υπολογισμό του μέσου όρου δύο πραγματικών αριθμών
double υπολογισμός_μέσου_όρου(double αριθμός1, double αριθμός2) {
    return (αριθμός1 + αριθμός2) / 2;
}

int main() {
    double αριθμός1, αριθμός2, μέσος_όρος;

    // Εισαγωγή δύο πραγματικών αριθμών
    printf("Εισάγετε τον πρώτο πραγματικό αριθμό: ");
    scanf("%lf", &αριθμός1);
    printf("Εισάγετε τον δεύτερο πραγματικό αριθμό: ");
    scanf("%lf", &αριθμός2);

    // Κλήση της συνάρτησης για τον υπολογισμό του μέσου όρου
    μέσος_όρος = υπολογισμός_μέσου_όρου(αριθμός1, αριθμός2);

    // Εκτύπωση του αποτελέσματος
    printf("Ο μέσος όρος των %.2f και %.2f είναι: %.2f\n", αριθμός1, αριθμός2, μέσος_όρος);

    return 0;
}
```

## ✅14. Να γραφεί πρόγραμμα σε C, που θα διαβάζει το όνομα του χρήστη και θα εκτυπώνει φιλικό χαιρετισμό.

```c
#include <stdio.h>

int main() {
    char όνομα[100];

    // Ζητάμε το όνομα του χρήστη
    printf("Παρακαλώ εισάγετε το όνομά σας: ");
    fgets(όνομα, sizeof(όνομα), stdin);

    // Εκτυπώνουμε τον φιλικό χαιρετισμό
    printf("Γεια σας, %s! Καλώς ήρθατε!\n", όνομα);

    return 0;
}
```

## ✅15. Να γραφεί πρόγραμμα σε C, που θα εκτυπώνει πίνακα αντιστοίχισης μονάδων θερμοκρασίας από Φαρενάιτ σε Κελσίου ανά 20 βαθμούς. [Ο τύπος μετατροπής είναι C=5(F-32)/9 ]

```c
#include <stdio.h>

int main() {
    double φαρενάιτ, κελσίου;
    int i;

    printf("Φαρενάιτ\tΚελσίου\n");
    printf("----------------------\n");

    for (i = 0; i <= 10; i++) {
        φαρενάιτ = i * 20;
        κελσίου = 5.0 / 9.0 * (φαρενάιτ - 32);
        printf("%.0f\t\t%.2f\n", φαρενάιτ, κελσίου);
    }

    return 0;
}
```

## ✅16. Να σχεδιαστεί ο αλγόριθμος εξαγωγής στοιχείου από λίστα.

1. **Αρχή**

2. **Ελέγξτε αν η λίστα είναι κενή**:
   - Αν ναι, τερματίστε (η λίστα είναι άδεια).
   - Αν όχι, συνεχίστε.

3. **Αν θέλουμε να εξαγάγουμε το πρώτο στοιχείο**:
   - Ορίστε το επόμενο στοιχείο της λίστας ως την νέα κεφαλή.

4. **Αν θέλουμε να εξαγάγουμε το τελευταίο στοιχείο**:
   - Βρείτε το τελευταίο στοιχείο και το προτελευταίο.
   - Συνδέστε το προτελευταίο με `null`.

5. **Ενημερώστε τη λίστα μετά την εξαγωγή του στοιχείου**.

6. **Τέλος**


## ✅17. Να σχεδιαστεί ο αλγόριθμος εισαγωγής στοιχείου σε λίστα.

1. **Αρχή**

2. Δημιουργία νέου κόμβου με την τιμή του στοιχείου.

3. **Ελέγξτε αν η λίστα είναι κενή**:
   - Αν ναι, ορίστε τον νέο κόμβο ως την κεφαλή της λίστας.
   - Αν όχι, συνεχίστε.

4. **Εισαγωγή του νέου κόμβου** στο τέλος της λίστας ή στην κατάλληλη θέση (ανάλογα με τις ανάγκες).

5. Συνδέστε τον νέο κόμβο με τον επόμενο κόμβο (εάν υπάρχει).

6. **Τέλος**


## ✅18. Να σχεδιαστεί ο αλγόριθμος εισαγωγής στοιχείου σε ουρά.

1. **Αρχή**

2. Δημιουργία νέου κόμβου με την τιμή του στοιχείου.

3. **Ελέγξτε αν η ουρά είναι κενή**:
   - Αν ναι, ορίστε τον νέο κόμβο ως το πρώτο και το τελευταίο στοιχείο της ουράς.
   - Αν όχι, συνεχίστε.

4. Συνδέστε τον τελευταίο κόμβο της ουράς με τον νέο κόμβο.

5. Ορίστε τον νέο κόμβο ως τον τελευταίο κόμβο της ουράς.

6. **Τέλος**


## ✅19. Να σχεδιαστεί ο αλγόριθμος εξαγωγής στοιχείου από ουρά.

1. **Αρχή**

2. **Ελέγξτε αν η ουρά είναι κενή**:
   - Αν ναι, τερματίστε (η ουρά είναι άδεια).
   - Αν όχι, συνεχίστε.

3. Αφαιρέστε το πρώτο στοιχείο από την ουρά (εκχωρήστε το επόμενο στοιχείο ως το πρώτο).

4. Αν η ουρά είναι άδεια μετά την εξαγωγή, ορίστε και το τελευταίο στοιχείο ως `null`.

5. **Τέλος**

## ✅20. Να σχεδιαστεί ο αλγόριθμος εισαγωγής στοιχείου σε στοίβα.

1. **Αρχή**

2. Δημιουργία νέου κόμβου με την τιμή του στοιχείου.

3. **Ελέγξτε αν η στοίβα είναι κενή**:
   - Αν ναι, ορίστε τον νέο κόμβο ως την κορυφή της στοίβας.
   - Αν όχι, συνεχίστε.

4. Συνδέστε τον νέο κόμβο στην κορυφή της στοίβας (ο νέος κόμβος δείχνει στον προηγούμενο κορυφαίο κόμβο).

5. Ορίστε τον νέο κόμβο ως την κορυφή της στοίβας.

6. **Τέλος**

## ✅21. Να σχεδιαστεί ο αλγόριθμος εξαγωγής στοιχείου από στοίβα.

1. **Αρχή**

2. **Έλεγχος αν η στοίβα είναι άδεια**:
   - Αν η στοίβα είναι άδεια, εμφάνισε μήνυμα σφάλματος και τερμάτισε τη διαδικασία.

3. **Αποθήκευση του στοιχείου που θα εξαχθεί**:
   - Αποθήκευσε το στοιχείο στην κορυφή της στοίβας σε μια μεταβλητή.

4. **Ενημέρωση της κορυφής της στοίβας**:
   - Μείωσε την τιμή της κορυφής κατά 1.

5. **Επιστροφή του εξαγόμενου στοιχείου**.

6. **Τέλος**


## ✅22. Να σχεδιαστεί ο αλγόριθμος της σειριακής αναζήτησης.

1. **Αρχή**

2. **Εισαγωγή του στοιχείου που αναζητείται**.

3. **Διάσχιση του πίνακα**:
   - Για κάθε στοιχείο στον πίνακα:
     - Αν το στοιχείο είναι ίσο με το ζητούμενο, επέστρεψε την τρέχουσα θέση.

4. **Επιστροφή -1** αν το στοιχείο δεν βρέθηκε.

5. **Τέλος**


## ✅23. Να σχεδιαστεί ο αλγόριθμος της δυαδικής αναζήτησης.

1. **Αρχή**

2. **Ορισμός μεταβλητών**:
   - `αρχή = 0`
   - `τέλος = μήκος πίνακα - 1`

3. **Επανάληψη**:
   - Υπολογίστε το μεσαίο στοιχείο: `μέσο = (αρχή + τέλος) // 2`
   - Αν το στοιχείο στο `μέσο` είναι ίσο με το ζητούμενο, επέστρεψε τη θέση `μέσο`.
   - Αν το στοιχείο στο `μέσο` είναι μικρότερο, θέστε `αρχή = μέσο + 1`.
   - Αν το στοιχείο στο `μέσο` είναι μεγαλύτερο, θέστε `τέλος = μέσο - 1`.

4. **Επιστροφή -1** αν το στοιχείο δεν βρέθηκε.

5. **Τέλος**

## ✅24. Να σχεδιαστεί ο αλγόριθμος της ταξινόμησης φυσαλίδας.

1. **Αρχή**

2. **Εισαγωγή του πίνακα προς ταξινόμηση**.

3. **Επανάληψη για κάθε στοιχείο του πίνακα**:
   - Για κάθε ζεύγος γειτονικών στοιχείων στον πίνακα:
     - Αν το πρώτο είναι μεγαλύτερο από το δεύτερο, αντάλλαξέ τα.

4. **Επανάλαβε τη διαδικασία μέχρι να μην απαιτούνται άλλες ανταλλαγές**.

5. **Επιστροφή του ταξινομημένου πίνακα**.

6. **Τέλος**

 
## ✅25. Τι είναι ένα σύστημα Πολυδιεργασίας (Multitasking System);

- Ένα σύστημα πολυδιεργασίας επιτρέπει την ταυτόχρονη εκτέλεση πολλών διεργασιών, αυξάνοντας την αποδοτικότητα του υπολογιστή.

## ✅26. Τι εννοούμε με τον όρο διεργασία; Σε τι διαφέρει από το πρόγραμμα;

- **Διεργασία** είναι ένα πρόγραμμα που εκτελείται και βρίσκεται στη μνήμη, περιμένοντας πόρους.
- **Πρόγραμμα** είναι ένα σύνολο εντολών, ενώ η **διεργασία** είναι η ενεργή εκτέλεση αυτών των εντολών.

## ✅27. Πως λειτουργεί η σελιδοποίηση; Τι συμβαίνει όταν μια σελίδα της εικονικής μνήμης δεν αντιστοιχεί σε ενότητα της φυσικής μνήμης;

- Η **σελιδοποίηση** χωρίζει τη μνήμη σε μικρές, σταθερού μεγέθους σελίδες, επιτρέποντας την αποδοτική χρήση της μνήμης.
- Όταν μια σελίδα της εικονικής μνήμης δεν βρίσκεται στη φυσική μνήμη, προκαλείται μια **σελιδοποίηση (page fault)**, και το λειτουργικό σύστημα φορτώνει τη σελίδα από τον δίσκο στη φυσική μνήμη.

## ✅28. Τι λέγεται εικονική μηχανή (virtual machine);

Η **εικονική μηχανή** είναι ένα λογισμικό που δημιουργεί την ψευδαίσθηση ενός πλήρους υπολογιστή, επιτρέποντας την εκτέλεση λειτουργικών συστημάτων και εφαρμογών σαν να τρέχουν σε πραγματικό υλικό.

## ✅29. Πόσα είδη διεργασιών υπάρχουν; Σε ποιες καταστάσεις μπορεί να βρίσκεται μια διεργασία;

- **Είδη διεργασιών**:
  - **Διεργασίες χρήστη**: Εφαρμογές που εκτελούνται από τους χρήστες, όπως επεξεργαστές κειμένου, προγράμματα περιήγησης κ.λπ.
  - **Σύστημα διεργασίες**: Διεργασίες που διαχειρίζονται το λειτουργικό σύστημα, όπως ο διαχειριστής αρχείων, ο χρονοδρομολογητής διεργασιών κ.λπ.

- **Καταστάσεις διεργασίας**:
  - **Ετοιμότητας (Ready)**: Η διεργασία είναι έτοιμη να εκτελεστεί, αλλά περιμένει την κατανομή της CPU.
  - **Εκτέλεσης (Running)**: Η διεργασία εκτελείται αυτή τη στιγμή από την CPU.
  - **Αναμονής (Waiting)**: Η διεργασία περιμένει κάποιον πόρο, όπως είσοδο/έξοδο ή την ολοκλήρωση άλλης διεργασίας.
  - **Τερματισμού (Terminated)**: Η διεργασία έχει ολοκληρωθεί ή έχει τερματιστεί λόγω σφάλματος ή άλλης αιτίας.

## ✅30. Τι ονομάζεται εσωτερικός και εξωτερικός κατακερματισμός;

- **Εσωτερικός κατακερματισμός**: Συμβαίνει όταν μια διεργασία καταλαμβάνει περισσότερο χώρο στη μνήμη από αυτόν που χρειάζεται, αφήνοντας αχρησιμοποίητους χώρους μέσα στο δεσμευμένο τμήμα.
- **Εξωτερικός κατακερματισμός**: Συμβαίνει όταν υπάρχουν μικρές, κατακερματισμένες περιοχές ελεύθερης μνήμης μεταξύ δεσμευμένων τμημάτων, καθιστώντας δύσκολη την εύρεση συνεχόμενου χώρου για νέες διεργασίες.

## ✅31. Τι συμβαίνει κατά την ανταλλαγή μνήμης;

Η **ανταλλαγή μνήμης** (memory swapping) είναι μια διαδικασία κατά την οποία το λειτουργικό σύστημα μεταφέρει τμήματα της μνήμης που χρησιμοποιούνται από μια διεργασία από την κύρια μνήμη (RAM) σε έναν αποθηκευτικό χώρο στο δίσκο, για να ελευθερωθεί μνήμη για άλλες διεργασίες.

Αυτή η τεχνική χρησιμοποιείται όταν η φυσική μνήμη είναι περιορισμένη και το σύστημα χρειάζεται να διαχειριστεί περισσότερες διεργασίες από ό,τι η διαθέσιμη μνήμη μπορεί να υποστηρίξει ταυτόχρονα. Αν κάποια διεργασία χρειάζεται περισσότερη μνήμη από αυτή που διατίθεται, τα δεδομένα της μεταφέρονται στον δίσκο και επιστρέφουν στη μνήμη όταν απαιτείται εκ νέου.

### Διαδικασία ανταλλαγής:
1. **Αναγνώριση υπερφόρτωσης μνήμης**: Όταν η φυσική μνήμη δεν αρκεί για να φιλοξενήσει όλες τις διεργασίες.
2. **Μεταφορά δεδομένων στον δίσκο**: Τα δεδομένα που δεν είναι άμεσα απαραίτητα μεταφέρονται στον δίσκο.
3. **Ανάκτηση δεδομένων**: Όταν μια διεργασία χρειάζεται τα δεδομένα που βρίσκονται στο δίσκο, αυτά επιστρέφουν στη μνήμη και αντικαθιστούν τα δεδομένα μιας άλλης διεργασίας που μπορεί να αποθηκευτεί ξανά στον δίσκο.

## ✅32. Να ορισθούν οι έννοιες "Μερισμός χρόνου" (Time sharing) και "επεξεργασία Πραγματικού χρόνου" (Real Time processing).

- **Μερισμός χρόνου (Time sharing)**: Είναι μια τεχνική όπου ο επεξεργαστής μοιράζεται τον χρόνο του μεταξύ πολλών διεργασιών, δίνοντας σε κάθε μία ένα μικρό χρονικό διάστημα για εκτέλεση. Αυτό επιτρέπει σε πολλούς χρήστες ή προγράμματα να εκτελούνται ταυτόχρονα, βελτιώνοντας την αποδοτικότητα και την ανταπόκριση του συστήματος.

- **Επεξεργασία Πραγματικού χρόνου (Real Time processing)**: Αναφέρεται σε συστήματα που επεξεργάζονται δεδομένα και παρέχουν αποτελέσματα εντός αυστηρών χρονικών πλαισίων. Αυτά τα συστήματα είναι κρίσιμα σε εφαρμογές όπου οι καθυστερήσεις μπορεί να οδηγήσουν σε αποτυχία, όπως σε συστήματα ελέγχου αεροσκαφών ή ιατρικές συσκευές.

## ✅33. Τι είναι τα μονότροπα και τι τα πολύτροπα καλώδια οπτικών ινών;

- **Μονότροπα καλώδια οπτικών ινών (Single-mode fibers)**: Έχουν μικρότερη διάμετρο πυρήνα και επιτρέπουν τη διάδοση ενός μόνο φωτεινού κύματος. Αυτό μειώνει την διάχυση του σήματος, επιτρέποντας τη μετάδοση σε μεγάλες αποστάσεις με υψηλή ταχύτητα.

- **Πολύτροπα καλώδια οπτικών ινών (Multi-mode fibers)**: Έχουν μεγαλύτερη διάμετρο πυρήνα και επιτρέπουν τη διάδοση πολλών φωτεινών κυμάτων ταυτόχρονα. Είναι κατάλληλα για μικρότερες αποστάσεις λόγω της διάχυσης του σήματος, αλλά προσφέρουν υψηλή χωρητικότητα μετάδοσης.

## ✅34. Περιγράψτε την λειτουργία του δρομολογητή (router) και του μεταγωγέα (ethernet Switch).

- **Δρομολογητής (Router)**: Συσκευή που συνδέει διαφορετικά δίκτυα, όπως τοπικά δίκτυα (LAN) και το Διαδίκτυο (WAN). Ελέγχει τη διεύθυνση προορισμού των πακέτων δεδομένων και τα δρομολογεί στο κατάλληλο δίκτυο, επιλέγοντας την καλύτερη διαδρομή για την αποστολή τους.

- **Μεταγωγέας Ethernet (Ethernet Switch)**: Συσκευή που λειτουργεί σε τοπικά δίκτυα (LAN) και συνδέει πολλούς υπολογιστές ή άλλες συσκευές. Λειτουργεί στο επίπεδο σύνδεσης δεδομένων του OSI και χρησιμοποιεί τη διεύθυνση MAC για να μεταφέρει τα πακέτα δεδομένων μόνο προς τη συσκευή προορισμού, βελτιώνοντας την αποδοτικότητα του δικτύου.

## ✅35. Τι είναι η οπτική ίνα; Να περιγράψετε την λειτουργία της.

Η **οπτική ίνα** είναι ένα λεπτό νήμα από γυαλί ή πλαστικό που χρησιμοποιείται για τη μετάδοση δεδομένων με τη μορφή φωτεινών σημάτων. Η λειτουργία της βασίζεται στο φαινόμενο της **ολοκληρωτικής ανάκλασης**, όπου το φως που εισέρχεται στην ίνα ανακλάται συνεχώς στις εσωτερικές της επιφάνειες, επιτρέποντας τη μετάδοση δεδομένων σε μεγάλες αποστάσεις με ελάχιστη απώλεια σήματος.

## ✅36. Τι είναι ημίδιπλη (ταυτόχρονα αμφίδρομη - Full Duplex) επικοινωνία και τι η ημίδιπλη (αμφίφρομη μη ταυτόχρονη - Half Duplex) επικοινωνία. Να αναφέρετε τις διαφορές μεταξύ τους.

- **Ημι-διπλή επικοινωνία (Half Duplex)**: Επιτρέπει τη μετάδοση δεδομένων σε μία κατεύθυνση τη φορά. Κάθε συσκευή μπορεί είτε να στέλνει είτε να λαμβάνει δεδομένα, αλλά όχι ταυτόχρονα. Παράδειγμα: Ραδιόφωνο CB.

- **Διπλή επικοινωνία (Full Duplex)**: Επιτρέπει τη ταυτόχρονη μετάδοση και λήψη δεδομένων και στις δύο κατευθύνσεις. Παράδειγμα: Τηλεφωνική συνομιλία.

**Διαφορές**:

- **Κατεύθυνση μετάδοσης**: Στην ημι-διπλή, η μετάδοση είναι είτε προς μία είτε προς την άλλη κατεύθυνση, ενώ στη διπλή είναι ταυτόχρονη και στις δύο κατευθύνσεις.
- **Χρόνος μετάδοσης**: Στην ημι-διπλή, ο χρόνος μετάδοσης μοιράζεται μεταξύ των συσκευών, ενώ στη διπλή, η μετάδοση είναι συνεχής και αμφίδρομη.

## ✅37. Τι είναι το Χ.25; Να περιγράψετε τα επίπεδα του.

Το **Χ.25** είναι ένα πρωτόκολλο δικτύου που καθορίζει τον τρόπο με τον οποίο τα δεδομένα μεταδίδονται σε δημόσια δίκτυα δεδομένων. Διαχωρίζεται σε τρία επίπεδα:

1. **Φυσικό επίπεδο**: Καθορίζει τις φυσικές και ηλεκτρικές προδιαγραφές της σύνδεσης.
2. **Επίπεδο σύνδεσης δεδομένων**: Διαχειρίζεται τη μετάδοση δεδομένων μεταξύ δύο συσκευών, εξασφαλίζοντας αξιόπιστη επικοινωνία.
3. **Επίπεδο πακέτου**: Διαχειρίζεται τη δρομολόγηση και την ελέγχου ροής των πακέτων δεδομένων στο δίκτυο.

## ✅38. Τι γνωρίζετε για την τεχνολογία ADSL;

Η **τεχνολογία ADSL (Asymmetric Digital Subscriber Line)** είναι μια μορφή DSL που επιτρέπει τη μετάδοση δεδομένων υψηλής ταχύτητας μέσω των υπάρχοντων γραμμών τηλεφωνίας. Είναι "ασύμμετρη" επειδή προσφέρει υψηλότερες ταχύτητες λήψης δεδομένων σε σχέση με την ταχύτητα αποστολής. Χρησιμοποιεί διαφορετικές συχνότητες για φωνητική επικοινωνία και μετάδοση δεδομένων, επιτρέποντας τη ταυτόχρονη χρήση του τηλεφώνου και του διαδικτύου.

## ✅39. Περιγράψτε την δομή ενός δικτύου ATM καθώς και τις κατηγορίες υπηρεσιών που προσφέρει.

Το **ATM (Asynchronous Transfer Mode)** είναι ένα πρωτόκολλο δικτύου που χρησιμοποιείται για τη μετάδοση δεδομένων, φωνής και βίντεο μέσω ενός κοινού δικτύου. Η δομή του βασίζεται σε μικρά, σταθερού μεγέθους πακέτα δεδομένων, γνωστά ως "cells", που επιτρέπουν την αποτελεσματική και αξιόπιστη μετάδοση.

Οι κύριες κατηγορίες υπηρεσιών που προσφέρει το ATM είναι:

- **CBR (Constant Bit Rate)**: Υπηρεσία με σταθερό ρυθμό μετάδοσης, κατάλληλη για εφαρμογές όπως η τηλεφωνία.
- **VBR (Variable Bit Rate)**: Υπηρεσία με μεταβλητό ρυθμό μετάδοσης, κατάλληλη για εφαρμογές πολυμέσων.
- **ABR (Available Bit Rate)**: Υπηρεσία που προσαρμόζει τον ρυθμό μετάδοσης με βάση τη διαθεσιμότητα του δικτύου.
- **UBR (Unspecified Bit Rate)**: Υπηρεσία χωρίς εγγυημένο ρυθμό μετάδοσης, κατάλληλη για εφαρμογές που μπορούν να ανεχτούν καθυστερήσεις.

## ✅40. Τι είναι το PSTN και το ISDN; Να αναφέρετε τις λειτουργίες τους.

**PSTN (Public Switched Telephone Network):**
- **Ορισμός:** Το PSTN είναι το παραδοσιακό αναλογικό τηλεφωνικό δίκτυο που χρησιμοποιείται για φωνητική επικοινωνία μέσω σταθερών τηλεφώνων.
- **Λειτουργίες:**
  - Φωνητική επικοινωνία μέσω αναλογικών γραμμών.
  - Περιορισμένες δυνατότητες μετάδοσης δεδομένων με χαμηλές ταχύτητες.

**ISDN (Integrated Services Digital Network):**
- **Ορισμός:** Το ISDN είναι ένα ψηφιακό τηλεπικοινωνιακό δίκτυο που παρέχει ταυτόχρονη μετάδοση φωνής, δεδομένων και εικόνας μέσω ψηφιακών γραμμών.
- **Λειτουργίες:**
  - Ψηφιακή μετάδοση φωνής και δεδομένων με ταχύτητες έως 128 Kbps.
  - Βελτιωμένη ποιότητα κλήσεων και δυνατότητες ταυτόχρονης μετάδοσης πολλαπλών υπηρεσιών.

## ✅41. Ποια είναι τα βασικά στάδια κατά την επεξεργασία εικόνων bitmap;

1. **Εισαγωγή Εικόνας:** Φόρτωση της εικόνας bitmap στο πρόγραμμα επεξεργασίας.
2. **Επεξεργασία:** Τροποποίηση της εικόνας μέσω εργαλείων όπως περικοπή, αλλαγή μεγέθους, περιστροφή, διόρθωση χρωμάτων και αντίθεσης.
3. **Εφαρμογή Φίλτρων:** Χρήση ψηφιακών φίλτρων για εφέ όπως θόλωση, ευκρίνεια ή μετατροπή σε ασπρόμαυρη.
4. **Αποθήκευση:** Αποθήκευση της επεξεργασμένης εικόνας σε επιθυμητό φορμά.

## ✅42. Τι είναι τα ψηφιακά φίλτρα σε ένα οποιοδήποτε πρόγραμμα επεξεργασίας εικόνας; Αναφέρετε τέσσερις κατηγορίες φίλτρων που εφαρμόζουμε επί εικόνων bitmap και ποια είναι τα αποτελέσματά τους.

**Ψηφιακά Φίλτρα:**
Ψηφιακά φίλτρα είναι αλγόριθμοι που εφαρμόζονται σε εικόνες για να τροποποιήσουν ή να βελτιώσουν συγκεκριμένα χαρακτηριστικά τους.

**Τέσσερις Κατηγορίες Φίλτρων:**

1. **Φίλτρα Εξομάλυνσης (Smoothing Filters):**
   - **Αποτέλεσμα:** Μείωση του θορύβου και των ανεπιθύμητων διαφορών χρωμάτων, δημιουργώντας μια πιο ομαλή εμφάνιση.
   - **Παράδειγμα:** Gaussian Blur.

2. **Φίλτρα Ενίσχυσης (Enhancement Filters):**
   - **Αποτέλεσμα:** Ενίσχυση χαρακτηριστικών όπως η αντίθεση, η φωτεινότητα ή η ευκρίνεια της εικόνας.
   - **Παράδειγμα:** Unsharp Mask.

3. **Φίλτρα Διαχωρισμού (Edge Detection Filters):**
   - **Αποτέλεσμα:** Εντοπισμός και ανάδειξη των ακμών και των περιγραμμάτων στην εικόνα.
   - **Παράδειγμα:** Sobel Operator.

4. **Φίλτρα Μετατροπής (Transformation Filters):**
   - **Αποτέλεσμα:** Εφαρμογή γεωμετρικών αλλαγών όπως περιστροφή, κλίμακα ή παραμόρφωση.
   - **Παράδειγμα:** Affine Transformation.

## ✅43. Περιγράψτε ποιο είναι το περιεχόμενο σ’ ένα αρχείο διανυσματικών γραφικών.

**Δρομολογητής (Router):**
- **Λειτουργία:** Συνδέει διαφορετικά δίκτυα, όπως τοπικά δίκτυα (LAN) με το διαδίκτυο, και καθορίζει την καλύτερη διαδρομή για τη μετάδοση δεδομένων μεταξύ τους.

**Μεταγωγέας (Ethernet Switch):**
- **Λειτουργία:** Συνδέει πολλαπλές συσκευές εντός ενός τοπικού δικτύου (LAN), διευκολύνοντας την επικοινωνία μεταξύ τους και διαχειρίζεται την κυκλοφορία δεδομένων για αποδοτικότερη μετάδοση.

## ✅44. Αναφέρετε πλεονεκτήματα και μειονεκτήματα των διανυσματικών γραφικών.

### Πλεονεκτήματα:
- **Ανεξαρτησία Ανάλυσης (Resolution Independence):** Τα διανυσματικά γραφικά μπορούν να μεγεθύνονται ή να σμικρύνονται χωρίς απώλεια ποιότητας, καθώς βασίζονται σε μαθηματικές περιγραφές αντί για πίνακες εικονοστοιχείων.
- **Μικρό Μέγεθος Αρχείου:** Αποθηκεύουν μόνο τις μαθηματικές εξισώσεις που περιγράφουν τα σχήματα, καταλαμβάνοντας λιγότερο χώρο σε σχέση με τα bitmap γραφικά.
- **Εύκολη Επεξεργασία:** Επιτρέπουν την εύκολη τροποποίηση μεμονωμένων στοιχείων, όπως η αλλαγή του χρώματος, του μεγέθους ή της θέσης, χωρίς να επηρεάζεται η συνολική ποιότητα της εικόνας.
- **Υποστήριξη για Επαγγελματική Εκτύπωση:** Η δυνατότητα διατήρησης της ποιότητας σε διάφορες κλίμακες τα καθιστά ιδανικά για εφαρμογές που απαιτούν υψηλή ανάλυση, όπως η εκτύπωση.

### Μειονεκτήματα:
- **Περιορισμένη Ικανότητα Φωτορεαλισμού:** Δυσκολεύονται να αναπαραστήσουν φωτορεαλιστικές εικόνες με λεπτομέρεια, καθώς δεν αποθηκεύουν πληροφορίες για κάθε pixel.
- **Πολυπλοκότητα στη Δημιουργία Σύνθετων Εικόνων:** Η δημιουργία πολύπλοκων εικόνων μπορεί να απαιτεί περισσότερη προσπάθεια και εξειδικευμένα εργαλεία σε σχέση με τα bitmap γραφικά.
- **Πιθανή Ασυμβατότητα με Παλαιότερα Προγράμματα:** Ορισμένα παλαιότερα προγράμματα ή συσκευές ενδέχεται να μην υποστηρίζουν διανυσματικά γραφικά, περιορίζοντας τη δυνατότητα προβολής ή επεξεργασίας τους.

## 45. Ποιες είναι οι βασικές διαφορές μεταξύ bitmap graphics και vector graphics;

## 46. Περιγράψτε τις διαφορές μεταξύ των προτύπων TIFF, JPEG, GIF. Που χρησιμοποιείται το καθένα;

## 47. Να βρεθούν τα χρώματα που είναι στην παρακάτω λίστα. Υπάρχουν διαδικτυακά χρώματα
συμπληρωματικά μεταξύ τους; Αν ναι, ποια ειναι αυτά και ως προς τι είναι συμπληρωματικά;

α)#FF0000 b) #FFFFFF c) #00FFFF d) #000000 e) #A1A1A1

Σημείωση: δοκιμάστε πρώτα να μετατρέψετε τις παραπάνω τιμές στην κλίμακα 0 έως 255 για κάθε κανάλι χρώματος.

## 48. Εξηγήστε την τεχνική Antialiasing και Alpha channel που χρησιμοποιείται σε εφαρμογές επεξεργασίας εικόνας και φωτορεαλιστικής απεικόνισης αντικειμένων.

## 49. Τι είναι το encapsulation; Δώστε ένα παράδειγμα σε γλώσσα προγραμματισμού Java.

## 50. Δημιουργήστε ένα πρόγραμμα σε Java το οποίο θα ζητάει από το χρήστη να εισάγει/πληκτρολογήσει μία φράση και στη συνέχεια θα εμφανίζει πόσες φορές εμφανίζεται το κάθε φωνήεν στη φράση.

## 51. Δημιουργήστε ένα πρόγραμμα σε Java το οποίο θα σχεδιάζει ένα κύκλο. Το χρώμα και το μέγεθος της ακτίνας του κύκλου θα καθορίζεται από τον χρήστη.

## 52. Τι είναι τα Demon Threads και τί τα Non-Demon Threads; Από που εκτελούνται και πως;

## 53. Δίνεται το μη ASCII αρχείο DATA.dbs όπου κάθε εγγραφή είναι αντικείμενο που έχει την ακόλουθη δομή: IBAN λογαριασμού (20 χαρακτήρες) Ανάληψη/Κατάθεση ('0'/'1' αντίστοιχα) Ποσό συναλλαγής (δεκαδικός αριθμός) Όνομα πελάτη (40 χαρακτήρες) ΑΦΜ πελάτη (ακέραιος 8-ψήφιος)
Να γραφεί πρόγραμμα Java προσπέλασης του αρχείου DATA.dbs που να τυπώνει στην οθόνη το
άθροισμα των καταθέσεων, το άθροισμα των αναλήψεων καθώς και τα στοιχεία του πελάτη με τη
μεγαλύτερη ανάληψη και κατάθεση.

## 54. Περιγράψτε τη βασική δομή μιας εφαρμογής φτιαγμένης σε OpenGL.

## 55. Να αναφέρετε και να περιγράψετε σύντομα τα callback functions της OpenGL.

## 56. Ποιες εντολές χρησιμοποιούμε για τις εξής λειτουργίες της OpenGL: 
α. translate β. rotate γ. scale ή stretch;

## 57. Για ποιο λόγο είναι καλό να χρησιμοποιούμε τους τύπους δεδομένων της OpenGL;

## 58. Περιγράψτε τη σύνταξη και τις παραμέτρους της glLookAt() (στην OpenGL).

## 59. Ποια είναι η λειτουργία της glClear() και ποια της glClearColor3f() (στην OpenGL);

## 60. Στην OpenGL όπως και στα περισσότερα API γραφικών χρησιμοποιούμε “normalized values”, τι
σημαίνει αυτό;

## 61. Αναφέρατε τις εντολές (μαζί με τις παραμέτρους τους) για προοπτική (perspective) και για ορθογραφική (orthographic) απεικόνιση (στην OpenGL).

## 62. Με ποιους τρόπους μπορούμε να μετατοπίσουμε ένα αντικείμενο -σχήμα στην OpenGL;

## 63. Περιγράψτε με εντολές και παραμέτρους της OpenGL, τα βασικά γεωμετρικά σχήματα α) Γραμμές, β)Τρίγωνα, γ) Πολύγωνα. Παραθέστε σχήματα.

## 64. Να γραφεί function (στην OpenGL) με όνομα keyboard που να λειτουργεί έτσι ώστε, όταν ο χρήστης πατήσει το ‘Q’ (ή ‘q’) να κλείνει την εφαρμογή και όταν πατήσει το ‘C’ (ή ‘c’) να καθαρίζει την οθόνη στο χρώμα του GL_COLOR_BUFFER_BIT. Επίσης να γράψετε την εντολή του mainloop που θα το καλέσετε.

## 65. Περιγράψτε τα βήματα για τη δημιουργία animation στην OpenGL.

## 66. Ποιες είναι οι ιδιότητές που έχουν οι επιφάνειες στην OpenGL;

## 67. Περιγράψτε αναλυτικά τι είναι το double buffering. Με ποια εντολή ενεργοποιούμε το double buffering σε RGB mode στην OpenGL; Με ποια εντολή κάνουμε swap τον front και τον back buffer έτσι ώστε να έχουμε animation;

## 68. Για ποιό σκοπό χρειάζονται οι συναρτήσεις κλήσης στην OpenGl και πώς ορίζονται;

## 69. Με ποιές συναρτήσεις γίνεται μοντελοποίηση επιφανειών που ανακλούν στην OpenGl;

## 70. Σε πόσες και ποιες συνιστώσες διαχωρίζετε το φως πηγής κατά την μοντελοποίηση πηγών φωτισμού;

## 71. Με ποια σειρά γίνονται οι διεργασίες για τον υπολογισμό της τελικής εικόνας (rendering) στην OpenGL;

## 72. Με ποια εντολή και ποιες συναρτήσεις θα πραγματοποιήσετε απόδοση υφής σε γραμμές και επιφάνειες στην OpenGl;

## 73. Για ποιο λόγο χρησιμοποιούνται οι λίστες απεικόνισης(display lists) στην γλώσσα OpenGl και πώς συντάσονται; Δώστε και από ένα παράδειγμα για κάθε περίπτωση.

## 74. Έστω κώδικας:<?php $a = “6”; $b = 8; echo $b - $a; ?> Ποιο θα είναι το αποτέλεσμα; Δικαιολογήστε την απαντησής σας."

## 75. Ποιες είναι οι διαφορές μεταξύ των πινάκων της PHP και των πινάκων της C++;

## 76. Περιγράψτε τα στάδια επεξεργασίας μιας PHP σελίδας από τη στιγμή της αίτησής της μέχρι την
εμφάνιση στον browser του χρήστη.

## 77. Αναφέρετε τους κανόνες που αφορούν στην ονομασία των μεταβλητών της PHP;

## 78. Η εντολή $c = 1; echo ‘$c’ . $c; τι θα δώσει ως τύπωση;

## 79. Έστω κώδικας:
<?php $a = “Hello, ”; $b = “world!”; echo $a; echo $b; ?>
Ποιό θα είναι το αποτέλεσμα;Δικαιολογήστε την απαντησής σας.

## 80. Έστω κώδικας php:
$a = 2; echo $a; ++$a; echo $a; --$a; echo $a;
Ποιό θα είναι το αποτέλεσμα;Δικαιολογήστε την απαντησής σας.

## 81. Να γραφεί ένα πρόγραμμα PHP το οποίο θα εμφανίζει με αλλαγή γραμμής το μήνυμα "Καλωσήρθατε
στην PHP" 5 φορές.

## 82. Ποιοί είναι οι βασικοί τύποι σχέσεων μεταξύ πινάκων στην PHP(MySql);

## 83. Να γραφεί μία φόρμα σε HTML με δύο πλαίσια κειμένου με τα συμβολικά ονόματα text1 και text2 και ένα πλήκτρο πιέσεως submit το οποίο θα ενεργοποιεί μία σελίδα σε PHP η οποία θα εμφανίζει τις τιμές των πλαισίων κειμένου με πλάγια γράμματα.

## 84. Να γραφεί μία φόρμα η οποία θα δέχεται από τον χρήστη ένα όνομα, ένα επίθετο και έναν αριθμητικό κωδικό. Αν κάποιο από τα πεδία δεν συμπληρωθεί από τον χρήστη τότε θα πρέπει να επανεμφανίζεται η φόρμα με ένα κόκκινο μήνυμα που να γράφει ποια πεδία πρέπει να συμπληρωθούν. Η φόρμα ενεργοποιεί μία σελίδα PHP που εκτυπώνει τα πεδία της φόρμας.

## 85. Σε ένα αρχείο PHP υπάρχουν οι μεταβλητές var1,var2, Ex1 και Ex2 με διάφορες τιμές. Να γραφεί μία φόρμα που θα έχει ένα πλαίσιο κειμένου και θα ενεργοποιεί το παραπάνω αρχείο και το οποίο θα εμφανίζει την τιμή της μεταβλητής που έχει όνομα ίδιο με αυτό που είναι η τιμή του πλαισίου κειμένου.

## 86. Ποιες είναι οι βασικές διαφορές μεταξύ PHP και JAVASCRIPT;

## 87. Πώς μπορούμε να έχουμε καθολικές μεταβλητές μεταξύ πολλώνσυναρτήσεων; Δώστε από ένα
παράδειγμα σε κάθε περίπτωση.

## 88. Γιατί δεν μπορούμε να εκτελέσουμε ένα αρχείο PHP απλά ανοίγοντάς το με έναν διαχειριστή αρχείων όπως γίνεται με τις HTML σελίδες; Δικαιολογήστε την απάντησης σας.

## 89. Πώς θα έπρεπε να δημιουργήσετε έναν βρόχο με την εντολή while για την εκτύπωση όλων των
περιττών αριθμών απο το 1 μέχρι το 49;

## 90. Πώς θα έπρεπε να χρησιμοποιήσετε μία εντολή ίf για να εκτυπώσετε το αλφαριθμητικό ''Yοuth
message" στο παράθυρο μιας εφαρμογής browser εάν η τιμή μιας ακέραιης μεταβλητής ( της $age)
είναι μεταξύ 18 και 35; Εάν η $age περιέχει οποιαδήποτε άλλη τιμή θα πρέπει να εκτυπώνεται το
αλφαριθμητικό "Generic message" στο παράθυρο της εφαρμογής browser.

## 91. Να υλοποιήσετε μια ιστοσελίδα η οποία να περιέχει κώδικα HTML και PHP script, βάσει των οποίων θα εμφανίζει φόρμα στην οποία ο χρήστης θα δίνει δυο αριθμούς, θα επιλέγει την πράξη (πρόσθεση ή αφαίρεση) και πατώντας στο Execute θα εμφανίζεται το κατάλληλο αποτέλεσμα.

## 92. Να υλοποιηθεί ένας απλός υπολογισμός για το εμβαδόν ενός κύκλου χρησιμοποιώντας τον τύπο
Εμβαδόν = π*(r*r). Η ακτίνα θα δίνεται μέσω φόρμας από τον χρήστη και το PHP script θα κάνει τον υπολογισμό του εμβαδού. Ο υπολογισμός του εμβαδού θα γίνεται υποχρεωτικά από κατάλληλη
συνάρτηση (function) την οποία θα ορίσετε στο PHP script. (Το π ισούται με 3,14).

## 93. Διατυπώστε τον κώδικα που χρειάζεται η PHP για να συνδεθεί στον (My)SQL DataBase Server με
πρόβλεψη εκτύπωσης τυχόν σφάλματος ή επιτυχούς σύνδεσης. Χρησιμοποιήστε το username "admin"
και password "fail".

## 94. Πού χρησιμοποιούμε τις μεταβλητές συνόδου στην PHP (PHP session variables); Δώστε δύο
παραδείγματα.

## 95. Δημιουργήστε στην PHP τη συνάρτηση addNums() η οποία δέχεται ως ορίσματα 2 ακέραιους και
επιστρέφει το αποτέλεσμα της πρόσθεσης αυτών στην οθόνη.

## 96. Φτιάξτε ένα script στην PHP που θα διαβάζει την τιμή τής μεταβλητής συνόδου (session) "logged" και εάν αυτή δεν είναι αληθής να κάνει ανακατεύθυνση (redirect) στην σελίδα login.html.

## 97. Δημιουργήστε στην PHP τη συνάρτηση sum() η οποία δέχεται ως ορίσματα 2 ακέραιους και επιστρέφει το αποτέλεσμα της πρόσθεσης αυτών στην οθόνη. Εκτελέστε το σε παράδειγμα χρησιμοποιώντας τους παρακάτω ακέραιους αριθμούς:α) 5 + 10 = 15β) 7 + 13 = 20γ) 2 + 4 = 6

## 98. Στείλτε ένα e-mail σε όλες τις εγγραφές του πίνακα subscribers χρησιμοποιώντας τη συνάρτηση mail (to, subject, body). Το email θα έχει θέμα "Login info" και περιεχόμενο "Your username is <το username χρήστη> and your password is <το password χρήστη> ". Δεν απαιτείται ο κώδικας σύνδεσης με τον (My)Sql server. Ο πίνακας subscribers έχει τα πεδία id, username, password, email.

## 99. Τι εννοούμε με τον όρο static mesh στην αρχιτεκτονική των Game Engines (Unreal Engine , Source και
Unity);

## 100. Τι είναι τα collision boxes στα Game Engines; Τι εξυπηρετούν και με ποιο σκεπτικό τα κατασκευάζουμε;

## 101. Αναφέρετε ποιες τεχνικές φωτισμού χρησιμοποιούνται στα video games και ποια τα χαρακτηριστικά τους.

## 102. Τι είναι το bill boarding και ποια τα πλεονεκτήματά του στην κατασκευή 3D games;

## 103. Πολλές φορές στους κατασκευαστές παιχνιδιών (πχ Unity) εφαρμόζεται το Level of Detail (LOD),περιγράψτε τι είναι και ποια είναι η χρησιμοτητά του.

## 104. Να αναφερθούν συνοπτικά οι βασικές κλάσεις του Unreal Editor και ποια η λογική της 
χρησιμοποίησής τους.

## 105. Περιγράψτε τη κλάση actor (στην UnrealScript), αναφέρατε τη χρησιμότητά της.

## 106. Περιγράψτε τη κλάση pawn (στην UnrealScript), αναφέρατε τη χρησιμότητά της.

## 107. Να αναφερθούν οι τύποι μεταβλητών που υποστηρίζονται από την Unrealscript καθώς και οι
περιγραφές τους.

## 108. Η UnrealScript δίνει αρκετή λειτουργικότητα για τα όπλα, να αναφερθούν αναλυτικά οι βασικές καταστάσεις στις οποίες μπορεί να περιέλθει ένα όπλο με τη χρήση της.

## 109. Τι σημαίνουν οι όροι Modeling, Rendering και Animation;

## 110. Τι είναι φωτοαπόδοση και ποιοι παράγοντες την επηρεάζουν;

## 111. Αναφέρετε τα στάδια δημιουργίας κινούμενης φωτορεαλιστικής απεικόνισης ενός θέματος πολυμέσων με τη χρήση κάποιου εργαλείου τρισδιάστατης σχεδίασης και κίνησης (π.χ. 3d Studio).

## 112. Τι είναι οι τεχνικές φωτισμού (lighting) και σκίασης (shading); Αναφέρετε τις βασικές τεχνικές φωτισμού και σκίασης που χρησιμοποιούνται σε μια εφαρμογή τρισδιάστατης σχεδίασης και κίνησης.

## 113. Ποιες τεχνικές γνωρίζετε για την απόδοση υλικών (materials & textures) πάνω στα τρισδιάστατα μοντέλα;

## 114. Τι είναι το Normal Mapping και ποια η χρησιμότητα του; Περιγράψτε αναλυτικά τον τρόπο λειτουργίας του.

## 115. Τι είναι οι τεχνικές σχεδίασης και φωτισμού; Περιγράψτε περιληπτικά τρεις τεχνικές δημιουργίας της τελικής εικόνας (rendering).

## 116. Γιατί είναι απαραίτητος ο φωτισμός της σκηνής; Περιγράψτε τρεις τρόπους με τους οποίους μπορεί να επιτευχθεί το παραπάνω.

## 117. Τι είναι τα function curves (στα προγράμματα τρισδιάτατης απεικόνισης) και που χρησιμεύουν;

## 118. Τι είναι το UV Mapping;

## 119. Τι είναι το Diffuse Map και ποια η διαφορά του από το Texture Map;

## 120. Τι είναι το Bump Map;

## 121. Τι είναι το Opacity Map;

## 122. Tι είναι η τεχνική extrude και πώς μπορεί να αξιοποιηθεί;

## 123. Στην τεχνική του Box Modeling, πoια η διαφορά μεταξύ του Convert to editable poly και πότε του convert to editable mesh; Πότε χρησιμοποιείται το δεύτερο;

## 124. Τι είναι το Specular Map;

## 125. Tι είναι το modifier Lathe; Τι μπορεί να σχεδιαστεί χρησιμοποιώντας το;

## 126. Τι είναι το Displacement Mapping;

## 127. Δημιουργείστε ένα παράθυρο 300Χ400 (window 300Χ400) σε JAVA, το οποίο θα μπορεί να
περιλαμβάνει ένα υπό δημιουργία παιχνίδι.

## 128. Περιγράψτε τη χρησιμότητα των μεταβλητών κατά τη δημιουργία παιχνιδιών σε κώδικα JAVA (JAVA Game Variables).

## 129. Να γραφεί απλό πρόγραμμα με κώδικα σε Java, που να τυπώνει ως αποτέλεσμα στον χρήστη τις λέξεις “I love JAVA Game Programming"

## 130. Να αναφέρετε τη χρησιμότητα των μεθόδων (methods) στο JAVA Game Programming.

## 131. Ένα παιχνίδι που έχει δημιουργηθεί σε JAVA, συνήθως περιέχει:1) Frame2) Canvas3) GameLoop4) Rendering method5) Update method6) Mouse and Key input Εξηγείστε συνοπτικά τις έννοιες που αναφέρθηκαν, καθώς και τη χρησιμότητά τους.

## 132. Δημιουργείστε σε JAVA απλό κινούμενο αντικείμενο για το παιχνίδι σας (πχ μπαλάκι του τένις),ορίζοντας πρώτα την αρχική του θέση με x και y και κατόπιν τις επόμενες ανάλογα με την κίνηση που θέλετε να πάρει.

## 133. Αναφέρατε τουλάχιστον τέσσερις τύπους πολυμέσων που μπορούν να εισαχθούν (import) σε μια
ιστοσελίδα και εξηγήστε γιατί είναι απαραίτητη η εγκατάσταση ενός πρόσθετου προγράμματος
αναπαραγωγής (add-ons) για ορισμένους τύπους πολυμέσων.

## 134. Τι είναι τα keywords, γιατί είναι απαραίτητη η χρησιμοποίηση τους στην δημιουργία μιας ιστοσελίδας και με ποιον τρόπο γίνεται η σωστή επιλογής τους;

## 135. Τι εννοούμε με τον όρο Search Engine Optimization (SEO); Για ποιον λόγο μια ιστοσελίδα θα πρέπει να εφαρμόζει όλους τους κανόνες που εισάγει η επιστήμη του SEO;

## 136. Τί είναι οι εφαρμογές CMS (Content Management systems); Αναφέρατε δύο τουλάχιστον εργαλεία
CMS.

## 137. Ποια η χρησιμότητα του RSS και πώς επιτυγχάνεται η ενσωμάτωση του σε μια ιστοσελίδα τύπου CMS;

## 138. Πώς ελέγχουμε την επισκεψιμότητα μιας ιστοσελίδας που δημιουργήθηκε με CMS;

## 139. Ανφέρετε τις διαφορές μεταξύ component, module και plugin.

## 140. Τι κάνουν τα εργαλεία τύπου filezilla?

## 141. Ποιοι τύποι χρηστών υπάρχουν σε μια ιστοσελίδα και ποια τυπικά δικαιώματα έχει ο καθένας;

## 142. Τι είναι το ψηφιακό Video; Αναφέρετε ονομαστικά τις γνωστότερες μεθόδους συμπίεσης και
αντίστοιχους τύπους ψηφιακών αρχείων video.

## 143. Τι είναι Component video σήμα;

## 144. Τι είναι Composite σήμα video;

## 145. Περιγράψτε τις διαφορές μεταξύ των σημάτων VGA και Βίντεο.

## 146. Ποια είναι τα βασικά μέρη του ψηφιακού βίντεο;

## 147. Σε τι διαφέρει το Video από το Animation και ποιο κοινό χαρακτηριστικό έχουν;

## 148. Εξηγήστε τις διαφορές μεταξύ γραμμικής (linear) και μη γραμμικής (non linear) επεξεργασίας video.

## 149. Πότε χρησιμοποιούνται οι λειτουργίες προεπισκόπηση (preview video) και σύλληψη (capture video),κατά την επεξεργασία ψηφιακού video;

## 150. Τι είναι τα “Transition Effect” σε ένα πρόγραμμα επεξεργασίας video; Δώστε ένα παράδειγμα.

## 151. Εξηγήστε τη λειτουργία των εργαλείων trimming (ψαλίδισμα) και cropping (ξάκρισμα), κατά την επεξεργασία μοντάζ ψηφιακού video.

## 152. Τι είναι ο υπέρτιτλος (Superimposed clip) στη διαδικασία μοντάζ ψηφιακού video;

## 153. Να περιγράψετε τα κύρια χαρακτηριστικά ενός ασυμπίεστου ψηφιακού αρχείου video.

## 154. Τι είναι κωδικοποιητής ψηφιακών αρχείων video πραγματικού χρόνου (real time video encoders);

## 155. Περιγράψτε την τεχνική συμπίεσης ψηφιακού video MPEG.

## 156. Περιγράψτε τα τυπικά βήματα της διαδικασίας Μοντάζ για την παραγωγή ενός ψηφιακού αρχείου video με τη χρήση ενός εργαλείου επεξεργασίας video (πχ. Premiere).

## 157. Υπολογίστε το μέγεθος σε Kbytes από τον αποθηκευτικό χώρο ενός σκληρού δίσκου που δεσμεύεται κατά τη σύλληψη ασυμπίεστου ψηφιακού video χωρίς ήχο από βιντεοσυσκευή με σύνθετο βιντεοσήμα PAL, διάρκειας 2 λεπτών, με διαστάσεις 320 x 240 εικονοστοιχείων και βάθος χρώματος 16bit.

## 158. Αναφέρατε τους τύπους των symbols που υπάρχουν στο Flash και τα χαρακτηριστικά του κάθενος από αυτούς.

## 159. Αναφέρατε τα πεδία του classic text που μπορούν να δημιουργηθούν από την εργαλειοθήκη του Flash και σε ποιες περιπτώσεις χρησιμοποιούνται.

## 160. Ποιες οι διαφορές μεταξύ keyframe, blanc keyframe και frame στο flash;

## 161. Σε λευκό stage στο flash διαστάσεων 800*600px υπάρχει ένα μπλε τετράγωνο διαστάσεων 400*400px,το οποίο βρίσκεται στο σημείο 400,300 του stage. Περιγράψτε σχηματικά τι θα δει ο χρήστης όταν το movie γίνει publish.

## 162. Τι είναι τα code snippets;

## 163. Πότε χρησιμοποιείται η εντολή trace bitmap;

## 164. Ποια η διαφορά μεταξύ symbol και instance;

## 165. Πού βρίσκεται και πώς λειτουργεί το εργαλείο onion skin στο flash;

## 166. Ποιος ο ρόλος του frame HIT στο timeline ενός button symbol; Τι πρόβλημα δημιουργείται με κουμπί που περιέχει μόνο κείμενο και πώς το αντιμετωπίζετε;

## 167. Ποια είδη tweening υπάρχουν στο Flash και ποια είναι τα χαρακτηριστικά τους;

## 168. Πώς δουλεύει το εργαλείο Bone Tool;

## 169. Γράψτε τον κώδικα σε Actionscript 3 για ένα movie clip, το οποίο θα μετακινείται 5px στο stage ανάλογα με την πίεση των βελών του πληκτρολογίου (αριστερά-δεξιά-πάνω-κάτω).

## 170. Με ποιο τρόπο κάνουμε path animation ενός tween στο Flash;

## 171. Δημιουργήστε σε AS3 την function DistanceTwoPoints που θα υπολογίζει την απόσταση μεταξύ δύο σημείων πάνω στο stage.

## 172. Περιγράψτε πώς επιδρά μια μάσκα σε ένα layer που «μασκάρεται» στο Flash. Πώς θα δημιουργούσατε έναν τίτλο που να δείχνει ότι κυματίζει, όπως το νερό της πισίνας;

## 173. Περιγράψτε τα αντικείμενα που πρέπει να δημιουργηθούν και τον τρόπο που πρέπει να τοποθετηθούν μέσα στην εφαρμογή, έτσι ώστε να έχουμε έναν κόκκινο κύκλο να διασχίζει οριζόντια το stage,φέρνοντας μαζί του ένα άλλο μικρότερο μπλε κύκλο σαν δορυφόρο του (δηλ. να διαγράφει κυκλική τροχιά γύρω από αυτόν) (στο Flash).

## 174. Δώστε ένα παράδειγμα (στο Flash) που γίνεται collision detection μεταξύ του movieclip mc_1 και του mc_2. To movieclip mc_1 κινείται αρχικά με βήμα 5px στον οριζόντιο άξονα του stage(800*600). Εάν εξέλθει του stage από μια πλευρά εισέρχεται από την άλλη, διατηρώντας την κατεύθυνσή του. Εάν συναντήσει τo movieclip mc_2 η κατεύθυνσή του αναστρέφεται.


# 4. Πρακτικό Μέρος: Κατάλογος Στοχοθεσίας Πρακτικών Ικανοτήτων και Δεξιοτήτων (Στοχοθεσία Εξεταστέας Ύλης Πρακτικού Μέρους)
Για την πιστοποίηση της επαγγελματικής ικανότητας, κατά το Πρακτικό Μέρος, οι υποψήφιοι της
ειδικότητας ΤΕΧΝΙΚΟΣ ΕΦΑΡΜΟΓΩΝ ΠΛΗΡΟΦΟΡΙΚΗΣ (ΠΟΛΥΜΕΣΑ/WEB DESIGNER DEVELOPER/VIDEO GAMES) εξετάζονται σε γενικά θέματα επαγγελματικών γνώσεων και ικανοτήτων και επίσης σε ειδικές επαγγελματικές γνώσεις και ικανότητες, που περιλαμβάνονται αποκλειστικά στη στοχοθεσία του πρακτικού μέρους της ειδικότητας.

# ΘΕΜΑΤΑ ΕΞΕΤΑΣΗΣ ΠΡΑΚΤΙΚΟΥ ΜΕΡΟΥΣ ενδεικτικά:
Σχεδιασμός ολοκληρωμένου έργου με συνδυασμό τουλάχιστον τριών προγραμμάτων, βάσει δοθέντος
ενδεικτικού προτύπου σε μορφή jpg ή pdf ή κατάλληλης περιγραφής των ζητουμένων. Το έργο δύναται να περιλαμβάνει σχεδιασμό γραφικών, επεξεργασία κειμένων, πινάκων, εικόνων κλπ. Τα απαιτούμενα κείμενα δίνονται σε μορφή doc-docx και οι εικόνες σε μορφή jpg. Οι εξεταζόμενοι καλούνται να δημιουργήσουν και να παραδώσουν προς αξιολόγηση με τη βοήθεια κατάλληλων λογισμικών το ζητούμενο έργο ολοκληρωμένο σε ψηφιακή μορφή.

# Ενδεικτικά ζητούμενα έργα:
- Δημιουργία δυναμικού website (πχ e-shop).
- Ανάπτυξη εφαρμογών, με χρήση γλώσσας προγραμματισμού Java.
- Δημιουργία διαδραστικής εφαρμογής για κινητές υπολογιστικές μικροσυσκευές (tablet, smartphones κλπ.), συμβατής με κάθε λειτουργικό σύστημα (πχ χρήση γλώσσας SWIFT2) .
- Δημιουργία διαδικτυακής πλατφόρμας υποστήριξης και παρουσίασης για κινητές υπολογιστικές
μικροσυσκευές και υπολογιστές γραφείου.
- Εφαρμογή για «Έξυπνο» Σπίτι (Απομακρυσμένη πρόσβαση σε φωτισμούς, θέρμανση, συναγερμό
ασφαλείας κλπ) με τη χρήση σύγχρονων γλωσσών προγραμματισμού, που αφορούν στη χρήση
«Έξυπνων Συσκευών».
- Σχεδιασμός τρισδιάστατου αντικειμένου με συγκεκριμένα δεδομένα, φωτισμό κλπ.
- Δημιουργία παιχνιδιού / animation.

Στα ανωτέρω προτεινόμενα Θέματα Εξέτασης Πρακτικού Μέρους, δύνανται να ζητούνται: επεξεργασία
εικόνων, δημιουργία / ενσωμάτωση video ή /και animation, βάσεων δεδομένων κλπ και κάθε άλλο στοιχείο βάσει των μαθησιακών αποτελεσμάτων του οδηγού σπουδών.
